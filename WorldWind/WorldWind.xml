<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorldWind</name>
    </assembly>
    <members>
        <member name="T:Mashi.Stereo.AnaglyphStereo">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="F:Mashi.Stereo.AnaglyphStereo.LayerName">
            <summary>
            Name displayed in layer manager
            </summary>
        </member>
        <member name="M:Mashi.Stereo.AnaglyphStereo.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Mashi.Stereo.AnaglyphStereo.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="T:Mashi.Stereo.StereoLayer">
            <summary>
            Anaglyph Stereo layer
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.#ctor(System.String,WorldWind.WorldWindow)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Mashi.Stereo.StereoLayer.Opacity">
            <summary>
            Opacity not available
            </summary>
        </member>
        <member name="P:Mashi.Stereo.StereoLayer.InterocularDistance">
            <summary>
            The distance separating the two eyes - percent of distance to target.
            </summary>
        </member>
        <member name="P:Mashi.Stereo.StereoLayer.FocusAngle">
            <summary>
            The convergence angle between left and right view in degree.
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.RenderRightEye(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Texture,WorldWind.Camera.CameraBase)">
            <summary>
            Render view from right eye
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Gets called when user left clicks.
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Mashi.Stereo.StereoLayer.OnDeviceLost(System.Object,System.EventArgs)">
            <summary>
            Direct3D device was lost or is resizing
            </summary>
        </member>
        <member name="T:WorldWind.AnimatedEarthManager">
            <summary>
            Animated Earth Manager (animated playback)
            SVS Image Server: http://aes.gsfc.nasa.gov/documents/standards.html
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.#ctor(WorldWind.WorldWindow)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.AnimatedEarthManager"/> class.
            </summary>
            <param name="worldWindow"></param>
        </member>
        <member name="P:WorldWind.AnimatedEarthManager.CurrentFrameInterval">
            <summary>
            The delay between frames while animating (milliseconds)
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.SetCaption(System.String)">
            <summary>
            Modifies the window title.
            </summary>
            <param name="caption"></param>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.IsSelectedChanged">
            <summary>
            Checks whether user selected a new layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.updateCurrentProgressBar(System.Int32,System.Int32)">
            <summary>
            Updates progress bar (thread safe)
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.UpdateProgressBarFrame(System.Int32,System.Int32)">
            <summary>
            Updates frame progress bar 
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.RefreshCapabilities">
            <summary>
            Performs a complete (cache + server) refresh of layer info.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.RefreshCapabilitiesFromUrl">
            <summary>
            Loads table of contents from server and populates the list box.
            PS: Not running in UI thread (Invoke when updating UI)
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.updateStatusBar(System.String)">
            <summary>
            Displays a message in the status bar (thread safe)
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.AddAnimationFrame(WorldWind.Net.WMSDownload)">
            <summary>
            Adds an image to the animation list
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.AnimateSlower">
            <summary>
            Slows down the animation.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.AnimateFaster">
            <summary>
            Speeds up the animation.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.StartAnimation">
            <summary>
            Start playing currently selected layer.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.PauseAnimation">
            <summary>
            Stops the animation playback.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.StopAnimation">
            <summary>
            Stops the animation playback.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.buttonColorBar_Click(System.Object,System.EventArgs)">
            <summary>
            Fired when the legend display button is clicked.
            </summary>
        </member>
        <member name="M:WorldWind.AnimatedEarthManager.Downloader">
            <summary>
            Download thread runs this function.
            </summary>
        </member>
        <member name="P:WorldWind.WMSLayer.IsAnimation">
            <summary>
            Whether this layer has animation (more than one frame).
            </summary>
        </member>
        <member name="P:WorldWind.WMSLayer.AnimationFrameCount">
            <summary>
            The number of pictures in the animation.
            </summary>
        </member>
        <member name="M:WorldWind.WMSLayer.GetDateTimeFromWmsDate(System.String)">
            <returns>System.DateTime.MinValue if date string is incorrect format</returns>
        </member>
        <member name="T:WorldWind.AnimationState">
            <summary>
            State of animation playback
            </summary>
        </member>
        <member name="T:WorldWind.DynamicCloudLayer">
            <summary>
            Summary description for DynamicCloudLayer.
            </summary>
        </member>
        <member name="F:WorldWind.DynamicCloudLayer.m_cloudBaseAltitude">
            <summary>
            These two values determine cloud altitude and how '3D' they look
            </summary>
        </member>
        <member name="P:WorldWind.DynamicCloudLayer.Playing">
            <summary>
            Toggles play/pause for the layer
            </summary>
        </member>
        <member name="P:WorldWind.DynamicCloudLayer.ExposureLevel">
            <summary>
            Gets/sets exposure level
            </summary>
        </member>
        <member name="P:WorldWind.DynamicCloudLayer.EnableHdrLighting">
            <summary>
            Turns Hdr Lighting on/off
            </summary>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.#ctor(System.String,WorldWind.World,System.String,System.String)">
            <summary>
            Creates Dynamic Cloud layer
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="remoteUrl"></param>
            <param name="imageDirectoryPath"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Builds context menu for renderable
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes renderable
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Update(WorldWind.DrawArgs)">
            <summary>
            Updates renderable
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Render(WorldWind.DrawArgs)">
            <summary>
            Renders object
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Dispose">
            <summary>
            Disposes renderable
            </summary>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Executes upon selection
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.DynamicClouds">
            <summary>
            Summary description for DynamicClouds.
            </summary>
        </member>
        <member name="T:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManager">
            <summary>
            Summary description for ExternalLayerManager.
            </summary>
        </member>
        <member name="F:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManager.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManager.KeyLayer">
            <summary>
            Layer selected for GetFeature request.
            Returns a QTS if the selected items is a WMS layer, otherwise returns null.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManagerLoader.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.ExternalLayerManager.ExternalLayerManagerLoader.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="T:WorldWind.CMPlugins.OverviewForm.ImageTileCache">
            <summary>
            Summary description for ImageTileCache.
            </summary>
        </member>
        <member name="T:WorldWind.CMPlugins.OverviewForm.OverviewForm">
            <summary>
            Summary description for OverviewForm.
            </summary>
        </member>
        <member name="F:WorldWind.CMPlugins.OverviewForm.OverviewForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormLoader.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormLoader.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="T:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent">
            <summary>
            Summary description for OverviewFormComponent.
            </summary>
        </member>
        <member name="F:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent.Render">
            <summary>
            Render the scene.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent.AttemptRecovery">
            <summary>
            Attempt to restore the 3D m_Device3d
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent.IsInDesignMode">
            <summary>
            Returns true if executing in Design mode (inside IDE)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewFormComponent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.CMPlugins.OverviewForm.OverviewToolbar">
            <summary>
            Summary description for OverviewToolbar.
            </summary>
        </member>
        <member name="F:WorldWind.CMPlugins.OverviewForm.OverviewToolbar.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewToolbar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewToolbar.IsInDesignMode">
            <summary>
            Returns true if executing in Design mode (inside IDE)
            </summary>
            <returns></returns>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewToolbar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.CMPlugins.OverviewForm.OverviewToolbar.AttemptRecovery">
            <summary>
            Attempt to restore the 3D m_Device3d
            </summary>
        </member>
        <member name="T:WorldWind.CMPlugins.OverviewForm.ResourceCache">
            <summary>
            Summary description for ResourceCache.
            </summary>
        </member>
        <member name="T:WorldWind.FileLoader">
            <summary>
            GUI to select a file or url to load
            </summary>
        </member>
        <member name="F:WorldWind.FileLoader.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.FileLoader.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WorldWind.FileLoader.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.FileLoader.#ctor(WorldWind.MainApplication)">
            <summary>
            Constructor for the file loader GUI
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:WorldWind.FileLoader.#ctor(System.String,WorldWind.MainApplication)">
            <summary>
            Constructor for the file loader GUI
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:WorldWind.GotoDialog">
            <summary>
            Place Finder (placename search) dialog
            </summary>
        </member>
        <member name="M:WorldWind.GotoDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.GotoDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.GotoDialog.#ctor(WorldWind.WorldWindow,WorldXmlDescriptor.WorldType,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.GotoDialog"/> class.
            </summary>
            <param name="ww"></param>
            <param name="currentWorld"></param>
            <param name="worldsXMLFilePath"></param>
        </member>
        <member name="M:WorldWind.GotoDialog.PositionUpDowns_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Enter key in Longitude/latitude/altitude = "Go"
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:WorldWind.NativeMethods">
            <summary>
             Interop functionality for WorldWind namespace
            </summary>
        </member>
        <member name="M:WorldWind.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
            API function to find window based on WindowName and class.
            </summary>
        </member>
        <member name="M:WorldWind.NativeMethods.SendArgs(System.IntPtr,System.String)">
            <summary>
            Sends string arguments to running instance of World Wind.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.PathMaker">
            <summary>
            Summary description for PathMaker.
            </summary>
        </member>
        <member name="F:WorldWind.PathMaker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.PathMaker.#ctor(WorldWind.WorldWindow)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PathMaker"/> class.
            </summary>
            <param name="ww"></param>
        </member>
        <member name="M:WorldWind.PathMaker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PathMaker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.PlaceBuilder">
            <summary>
            Summary description for PlaceBuilder.
            </summary>
        </member>
        <member name="F:WorldWind.PlaceBuilder.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.PlaceBuilder.#ctor(WorldWind.WorldWindow)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PlaceBuilder"/> class.
            </summary>
            <param name="ww"></param>
        </member>
        <member name="M:WorldWind.PlaceBuilder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PlaceBuilder.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.PlaceBuilder.updateStatusBar(System.String)">
            <summary>
            Updates status bar message (thread safe)
            </summary>
        </member>
        <member name="T:WorldWind.PlaceFinder">
            <summary>
            Summary description for PlaceFinder.
            </summary>
        </member>
        <member name="F:WorldWind.PlaceFinder.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.PlaceFinder.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PlaceFinder.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.PlaceFinder.SearchOnline">
            <summary>
            Search WWC's placename db
            </summary>
        </member>
        <member name="M:WorldWind.PlaceFinder.gmSearch_Click(System.Object,System.EventArgs)">
            <summary>
            The Google API Key registered against http://worldwind.arc.nasa.gov/
            is ABQIAAAACa4WGp5Uv52H7G0K5NI5sBTvg4F4NXNiK5VsCB5rxeWSfz3KRBROXKeNOov5-8cqJUzDuisDCCxI2Q
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.PlaceFinderLoader.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:WorldWind.PlaceFinderLoader.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="T:WorldWind.PlaceListSettings">
            <summary>
            Implements persistent XML storage of place data
            (Used as a base class to save favorites and history)
            </summary>
        </member>
        <member name="T:WorldWind.PlaceListSettings.MetaDataEntry">
            <summary>
            This class represents one metadatum name/value pair
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.MetaDataEntry.name">
            <summary>
            Meta-datum name
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.MetaDataEntry.value">
            <summary>
            Meta-datum value
            </summary>
        </member>
        <member name="T:WorldWind.PlaceListSettings.PlaceData">
            <summary>
            This class stores fixed place attributes
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.Name">
            <summary>
            The name of the place
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.Lat">
            <summary>
            Latitude in decimal degrees
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.Lon">
            <summary>
            Longitude in decimal degrees
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.metadata">
            <summary>
            A place can have an arbitrary number of associated metadata
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.places">
            <summary>
            All the places in one array
            </summary>
        </member>
        <member name="T:WorldWind.FavoritesSettings">
            <summary>
            This class is used for persistent XML storage of the users favorites
            </summary>
        </member>
        <member name="M:WorldWind.FavoritesSettings.ToString">
            <summary>
            Override ToString to use "Favorites.xml" as default filename
            </summary>
            <returns></returns>
        </member>
        <member name="T:WorldWind.HistorySettings">
            <summary>
            This class is used for persistent XML storage of the users place visit history
            </summary>
        </member>
        <member name="M:WorldWind.HistorySettings.ToString">
            <summary>
            Override ToString to use "History.xml" as default filename
            </summary>
            <returns></returns>
        </member>
        <member name="T:WorldWind.PluginEngine.Plugin">
             <summary>
            插件基础类
             </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginCompiler.Plugins">
            <summary>
            The list of discovered plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginCompiler"/> class.
            </summary>
            <param name="worldWind"></param>
            <param name="pluginDirectory"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.AddCodeProvider(System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Adds a compiler to the list of available codeDomProviders
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.FindPlugins(System.Reflection.Assembly)">
            <summary>
            Scan for plugins inside an assembly.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.FindPlugins">
            <summary>
            Build/update the list of available plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.AddPlugin(System.String)">
            <summary>
            Adds plugin from one of the plugins
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.LoadStartupPlugins">
            <summary>
            Loads the plugins that are set for load on world wind startup.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.HasCompiler(System.String)">
            <summary>
            Determine if a file extension is that of a compilable plugin.
            </summary>
            <param name="fileExtension">File extension to check.</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.IsPreCompiled(System.String)">
            <summary>
            Determine if a file extension is that of a pre-compiled plugin.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Load(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Load a plugin
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Unload(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Unload a plugin if it's loaded.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Uninstall(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Uninstall/delete a plugin.
            </summary>
            <param name="pi"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Dispose">
            <summary>
            Shut down plugins
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Compile(WorldWind.PluginEngine.PluginInfo,System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Compiles a file to an assembly using specified compiler.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.AddCompilerReference(System.String,System.String)">
            <summary>
            Adds reference to a local assembly or an assembly in the global cache.
            </summary>
            <param name="pluginDirectory">Local directory to search.</param>
            <param name="assemblyName">Partial name of the assembly.</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.GetPluginInterface(System.Reflection.Assembly)">
            <summary>
            Looks for class derived from Plugin and returns an instance of this class.
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginDialog">
            <summary>
            Plugin manager dialog.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginDialog.ImageList">
            <summary>
            On/Off images for items.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.#ctor(WorldWind.PluginEngine.PluginCompiler)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginDialog"/> class.
            </summary>
            <param name="compiler"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.AddPluginList">
            <summary>
            Fill the list view with currently installed plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.buttonUnload_Click(System.Object,System.EventArgs)">
            <summary>
            Unload selected plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.buttonLoad_Click(System.Object,System.EventArgs)">
            <summary>
            Load selected plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.PluginLoad(WorldWind.PluginEngine.PluginListItem)">
            <summary>
            Load plugin and display message on failure.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.PluginUnload(WorldWind.PluginEngine.PluginListItem)">
            <summary>
            Unload plugin and display message on failure.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.UpdateUIStates">
            <summary>
            Updates enabled states of controls to reflect selection.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.buttonUninstall_Click(System.Object,System.EventArgs)">
            <summary>
            Uninstall/remove plugins
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.listView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Invert state of double clicked item (load/unload)
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInfo.ReadMetaData">
            <summary>
            Reads strings from the source file header tags
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInfo.FindTagInLine(System.String,System.String,System.String@)">
            <summary>
            Extract tag value from input source line.
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginInstallDialog">
            <summary>
            Ask user for plugin file path/url, then download and install.
            </summary>
        </member>
        <member name="F:WorldWind.PluginEngine.PluginInstallDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.#ctor(WorldWind.PluginEngine.PluginCompiler)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginInstallDialog"/> class.
            </summary>
            <param name="compiler"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.buttonInstall_Click(System.Object,System.EventArgs)">
            <summary>
            Install plugin
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginInstallDialog.IsFile">
            <summary>
            Determine if user points to a file.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginInstallDialog.IsWeb">
            <summary>
            Determine if user points to a web URL.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.InstallFromFile(System.String)">
            <summary>
            Install plugin from local file.
            </summary>
            <param name="pluginPath">Plugin path/filename.</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.InstallFromUrl(System.Uri)">
            <summary>
            Install plugin from web (url).
            </summary>
            <param name="uri">http:// URL</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.GetDestinationPath(System.String)">
            <summary>
            Calculates plugin destination directory based on name, and prepares it.
            </summary>
            <param name="fileName">Plugin filename only (no path).</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.ShowSuccessMessage(System.String)">
            <summary>
            Display a message box with successful installation message.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.buttonBrowse_Click(System.Object,System.EventArgs)">
            <summary>
            Browse for local file
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginListItem">
            <summary>
            Listview item in the plugin dialog.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginListItem.PluginInfo">
            <summary>
            Plugin information container.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginListItem.Name">
            <summary>
            Plugin name.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListItem.#ctor(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginListItem"/> class.
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginListView">
            <summary>
            The list view in the plugin dialog.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginListView"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Shows list of available plugins
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Interact with plugin loadind
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.OnDrawItem(System.Windows.Forms.DrawItemEventArgs,WorldWind.PluginEngine.PluginListItem)">
            <summary>
            Owner drawing listview item.
            </summary>
        </member>
        <member name="M:WorldWind.Program.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:WorldWind.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.back">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.forward">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.go">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.outline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:WorldWind.PropertyBrowserForm">
            <summary>
            Property browser/edit dialog for debugging.
            </summary>
        </member>
        <member name="F:WorldWind.PropertyBrowserForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.PropertyBrowserForm.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.RapidFireModisManager"/> class.
            </summary>
            <param name="selected">The object to display in the browser.</param>
            <param name="title">Dialog title.</param>
        </member>
        <member name="M:WorldWind.PropertyBrowserForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PropertyBrowserForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.RapidFireModisManager">
            <summary>
            Rapid Fire MODIS form.
            </summary>
        </member>
        <member name="M:WorldWind.RapidFireModisManager.#ctor(WorldWind.WorldWindow)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.RapidFireModisManager"/> class.
            </summary>
            <param name="ww"></param>
        </member>
        <member name="M:WorldWind.RapidFireModisManager.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.RapidFireModisManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.RapidFireModisManager.updateProgressBar(System.Int32,System.Int32)">
            <summary>
            Updates progress bar (thread safe)
            </summary>
        </member>
        <member name="T:WorldWind.Splash">
            <summary>
            The splash screen displayed while World Wind is loading.
            </summary>
        </member>
        <member name="F:WorldWind.Splash.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.Splash.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Splash"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.Splash.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:WorldWind.Splash.HasError">
            <summary>
            Set if an error is displayed.
            </summary>
        </member>
        <member name="M:WorldWind.Splash.SetText(System.String)">
            <summary>
            Display normal message on splash screen.
            </summary>
            <param name="message">Message to display on the splash screen</param>
        </member>
        <member name="M:WorldWind.Splash.SetError(System.String)">
            <summary>
            Display an error message on splash.  Splash will stay visible longer to alert the user.
            </summary>
            <param name="message">Message to display on the splash screen</param>
        </member>
        <member name="P:WorldWind.Splash.IsDone">
            <summary>
            True when splash is done displaying (timed out or user intervention)
            </summary>
        </member>
        <member name="M:WorldWind.Splash.GetStartupImage">
            <summary>
            Creates the splash/about box picture with version number.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Splash.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.TerrainManagerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="F:WorldWind.TerrainManagerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.TerrainManagerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.WavingFlags">
            <summary>
            Summary description for WavingFOTW.
            </summary>
        </member>
        <member name="M:WorldWind.WavingFlags.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:WorldWind.WavingFlags.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="T:WorldWind.WMSBrowser">
            <summary>
            WMS Browser dialog.
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowser.UpdateAnimationSpeed">
            <summary>
            Sets the animation speed to match the trackbar's setting.
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowser.updateCurrentProgressBar(System.Int32,System.Int32)">
            <summary>
            Updates progress bar (thread safe)
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowser.UpdateStatusBar(System.String)">
            <summary>
            Displays a message in the status bar (thread safe)
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowser.ProcessDownloadedImage(WorldWind.Net.WMSDownload,System.IO.Stream)">
            <summary>
            Convert if requested and prepare downloaded data for display
            </summary>
        </member>
        <member name="M:WorldWind.WMSList.GetDateTimeFromWMSDate(System.String)">
            <summary>
            Parses WMS string dates.
            </summary>
            <param name="wmsDate">Input WMS date string.</param>
            <returns>Time converted to DateTime or DateTime.MinValue if date string is incorrect format.</returns>
        </member>
        <member name="T:WorldWind.WMSBrowserNG">
            <summary>
            WMS Browser dialog.
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowserNG.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.WMSBrowserNG.treeOgcCaps_OperationDone(System.Object,System.EventArgs)">
            <summary>
            Call back after available layers returned from WMS url. 
            Populates the first node as the default selection in the 'specify layer title' text box. Enables 'Create Layer' group box (Save as XML) in the UI.
            If no layers are returned by URL, display message box error to the user.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:WorldWind.WplIndexEntry">
            <summary>
            Utility structure representing an index entry
            </summary>
        </member>
        <member name="T:WorldWind.IndexedTiledPlaceNameSet">
            <summary>
            utility class - combines TiledPlacenameSet with corresponding index
            </summary>
        </member>
        <member name="M:WorldWind.IndexedTiledPlaceNameSet.#ctor(LayerSet.Type_TiledPlacenameSet2,WorldWind.WplIndex)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.IndexedTiledPlaceNameSet"/> class. 
            Initializes placenameset and index.
            </summary>
            <param name="pns"></param>
            <param name="idx"></param>
        </member>
        <member name="T:WorldWind.PlaceItem">
            <summary>
            Utility class PlaceItem associates a WorldWindPlacename with its TiledPlacenameset aka "Layer"
            </summary>
        </member>
        <member name="F:WorldWind.PlaceItem.pn">
            <summary>
            Placename info from WorldWind 
            </summary>
        </member>
        <member name="F:WorldWind.PlaceItem.placeDescriptor">
            <summary>
            Associated TiledPlaceNameSe
            </summary>
        </member>
        <member name="P:WorldWind.PlaceItem.Altitude">
            <summary>
            Altitude accessor - either gets altitude from placeDescriptor
            or a default one (22500 currently)
            </summary>
        </member>
        <member name="M:WorldWind.PlaceItem.Goto(WorldWind.WorldWindow)">
            <summary>
            Goes to this place item at its lat/lon and altitude
            </summary>
            <param name="ww"></param>
        </member>
        <member name="M:WorldWind.PlaceItem.GotoURL(WorldWind.WorldWindow)">
            <summary>
            Computes a WorldWind URL (as string)
            </summary>
            <param name="ww"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.IndexedPlace">
            <summary>
            This class is for index generation only - associates an index entry with a placename
            for later sorting
            </summary>
        </member>
        <member name="F:WorldWind.IndexedPlace.indexEntry">
            <summary>
            Index entry for this PlaceItem
            </summary>
        </member>
        <member name="T:WorldWind.PlaceItemComparer">
            <summary>
            Utility class to compare place items for sorting
            </summary>
        </member>
        <member name="M:WorldWind.PlaceItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer.Compare. Will compare the names of
            two PlaceItems
            </summary>
            <param name="x">First PlaceItem to compare</param>
            <param name="y">Second PlaceItem to compare</param>
            <returns>Result of PlaceItem name string comparison</returns>
        </member>
        <member name="T:WorldWind.WplIndex">
            <summary>
            Represents an index for a .WPL file.
            </summary>
        </member>
        <member name="T:WorldWind.WplIndex.IndexEntryToStringComparer">
            <summary>
            Utility class to compare index entries for binary search
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.IndexEntryToStringComparer.#ctor(WorldWind.WplIndex,System.Boolean)">
            <summary>
            Creates a new IndexEntryToStringComparer
            </summary>
            <param name="theIndex">The index the comparer will work withz</param>
            <param name="bPartialAllowed">Set to true if partial matches are allowed.</param>
        </member>
        <member name="M:WorldWind.WplIndex.IndexEntryToStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer.Compare. Will compare either a WplIndexEntry or its numeric index (int)
            to a string (the name being searched for.
            </summary>
            <param name="x">The WplIndexEntry itself or its offset as an int</param>
            <param name="y">The name bein searched for as string</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WplIndex.ProgressReportDelegate">
            <summary>
            Delegate type to report progress. 
            percentComplete is the total progress in % (from 0 to 100),
            currentAction is what is currently being done, e.g. in a multi-phase operation.
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.#ctor(LayerSet.Type_TiledPlacenameSet2,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.WplIndex"/> class. 
            Gets the full path to the list file as parameter
            Note that the constructor will neiter load the index data, nor create it if
            not present - all it does is "get ready" by loading the list of WWP files
            </summary>
            <param name="tps">Placename set (layer) the index is associated with</param>
            <param name="strWplFilePath">The full list file path</param>
        </member>
        <member name="T:WorldWind.WplIndex.MetaDataAction">
            <summary>
            enum for ReadPlaceName: how to handle metadata
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.ReadPlaceName(System.IO.BinaryReader,WorldWind.Renderable.WorldWindPlacename@,WorldWind.WplIndex.MetaDataAction)">
            <summary>
            utility routine: read a place info record from a BinaryReader
            </summary>
            <param name="br">Binary reader to read data from</param>
            <param name="pn">Where to write data</param>
            <param name="metaDataAction">What to do with metadata, read, skip, omit. The difference between skip and omit is that
            the latter is faster, while the former correctly positions to the next record if needed</param>
        </member>
        <member name="P:WorldWind.WplIndex.PlaceCount">
            <summary>
            Gets the number of places currently in this index
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.IsValidIndex(System.Int32)">
            <summary>
            Checks if an int is a valid index
            </summary>
            <param name="n">The value to check for validity</param>
            <returns>True if this index is within the bounds</returns>
        </member>
        <member name="P:WorldWind.WplIndex.IsAvailable">
            <summary>
            True if this index is available (the index file exists)
            </summary>
        </member>
        <member name="P:WorldWind.WplIndex.IsLoaded">
            <summary>
            True if this index is loaded if the index entries are there 
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.CreateIndex(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Creates an index from placeitems
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Load(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Loads an index from file (implicitly known via the name of the wpl file)
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Lock(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Locks the index: makes sure it is loaded and referenced
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Release">
            <summary>
            Releases index entries to give GC a chance to free up memory
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.GetPlaceItem(System.Int32)">
            <summary>
            Given an index position, seeks to and returns place information
            </summary>
            <param name="nIndex">Index of desired place</param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.WplIndex.FindPlaceByName(System.String,System.Boolean)">
            <summary>
             Finds a place given its name.
            </summary>
            <param name="strPlaceName">The name to search for</param>
            <param name="bPartial">If true, will stop at first partial match</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WWListView">
            <summary>
            ListView-derived class that supports dynamically adding columns and sorting.
            </summary>
        </member>
        <member name="T:WorldWind.WWListView.ColumnDescriptor">
            <summary>
            Describes a WWListView column
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_columnName">
            <summary>
            Name of the column as the user will see it
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_attribName">
            <summary>
            Attribute name, used as key
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_width">
            <summary>
            Column width
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_isNumeric">
            <summary>
            Indicates a numeric column that has to be sorted accordingly
            </summary>
        </member>
        <member name="M:WorldWind.WWListView.ColumnDescriptor.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Construct a column descriptor
            </summary>
            <param name="colName">Name of the column</param>
            <param name="attribName">Attribute name, used as key</param>
            <param name="width">Column width</param>
            <param name="isNumeric">If true, column will be sorted numerically</param>
        </member>
        <member name="M:WorldWind.WWListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Handles column click for sorting
            </summary>
            <param name="e">Information about the column clicked</param>
        </member>
        <member name="M:WorldWind.WWListView.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.WWListView"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.WWListView.#ctor(WorldWind.WWListView.ColumnDescriptor[])">
            <summary>
            Initializes a new instance of the WWListView class, with predefined columns
            </summary>
            <param name="columnDescriptors">Array of column descriptors</param>
        </member>
        <member name="M:WorldWind.WWListView.AddKeysAndValues(System.Collections.Hashtable)">
            <summary>
            Add a a List view item via a hashtable with attribute names and values
            </summary>
            <param name="knv">A Hashtable with column attribute names and values</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WWPlaceListView">
            <summary>
            WWListView derived class that implements a listview for places.
            </summary>
        </member>
        <member name="T:WorldWind.WWPlaceListView.AddPlaceDelegate">
            <summary>
            Delegate type to add a place, to prevent multithreading problems
            </summary>
        </member>
        <member name="F:WorldWind.WWPlaceListView.addPlaceDelegate">
            <summary>
            Delegate to add a place, to prevent multithreading problems
            </summary>
        </member>
        <member name="T:WorldWind.WWPlaceListView.WWPlaceMenuItem">
            <summary>
            WWPlaceMenuItem extends MenuItem class with information about required context
            </summary>
        </member>
        <member name="T:WorldWind.WWPlaceListView.WWPlaceMenuItem.RequiredElement">
            <summary>
            Describes what this menu item requires:
            always valid even on empty list, items must be present, 
            single selection must be present, selection must be present
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.WWPlaceMenuItem.Requires">
            <summary>
            Gets/sets the menu item requirements
            </summary>
        </member>
        <member name="M:WorldWind.WWPlaceListView.WWPlaceMenuItem.#ctor(System.String,System.EventHandler,WorldWind.WWPlaceListView.WWPlaceMenuItem.RequiredElement)">
            <summary>
            Creates a new WWPlaceMenuItem given a name, handle, and requirements
            </summary>
            <param name="name">The name of the menu item</param>
            <param name="handler">The event handler that gets called when the item is clicked</param>
            <param name="requires">Elements that need to be present in the list for item to be enabled</param>
        </member>
        <member name="P:WorldWind.WWPlaceListView.SelectedPlaces">
            <summary>
            Returns an array of the place items that are selected in the list
            </summary>
        </member>
        <member name="M:WorldWind.WWPlaceListView.OnDoubleClick(System.EventArgs)">
            <summary>
            A doubleclick goes to the corresponding place and
            also adds it to the history list
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.#ctor">
            <summary>
            Creates a new WWPlaceListView object, initializing place-specific columns and menus
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.Favorites">
            <summary>
            Gets/sets the WWPlaceListView displaying the favorites
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.RecentFinds">
            <summary>
            Gets/sets the WWPlaceListView displaying the history aka Recent Finds
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.WorldWindow">
            <summary>
            Gets/sets the WorldWindow object this PlaceList is associated with (e.g. for Goto functionality)
            </summary>
        </member>
        <member name="M:WorldWind.WWPlaceListView.AddPlace(WorldWind.PlaceItem)">
            <summary>
            Adds a place given a PlaceItem
            </summary>
            <param name="pi">PlaceItem class describing the place</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.LoadFromGpx(System.String)">
            <summary>
            Loads places from a file in GPX format, given pathname
            </summary>
            <param name="strGpxPath">The file (with full path) in GPX format to load from</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.SaveToGpx(System.String)">
            <summary>
             Saves places to a file in GPX format, given pathname
            </summary>
            <param name="strGpxPath">The file (with full path) to save to</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.FillSettingsFromList(WorldWind.PlaceListSettings)">
            <summary>
            Fills a PlaceListSettings class (used to serialize places) with all the places in the list
            </summary>
            <param name="pls">The PlaceListSettings class that will receive the places</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.FillListFromSettings(WorldWind.PlaceListSettings)">
            <summary>
            Fills the list with all the places in a PlaceListSettings class (used to serialize places)
            </summary>
            <param name="pls">The PlaceListSettings class that contains all the places</param>
        </member>
        <member name="T:Atmosphere.Plugin.Atmosphere">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="F:Atmosphere.Plugin.Atmosphere.LayerName">
            <summary>
            Name displayed in layer manager
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.Atmosphere.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.Atmosphere.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="T:Atmosphere.Plugin.AtmosphereLayer">
            <summary>
            "Fake" atmosphere
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.#ctor(System.String,System.String,WorldWind.WorldWindow)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.ReadSettings">
            <summary>
            Read saved settings from ini file
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.SaveSettings">
            <summary>
            Save settings in ini file
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Gets called when user left clicks.
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Fills the context menu with menu items specific to the layer.
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.OnPropertiesClick(System.Object,System.EventArgs)">
            <summary>
            Properties context menu clicked.
            </summary>
        </member>
        <member name="T:Atmosphere.Plugin.AtmosphereLayer.propertiesDialog">
            <summary>
            Properties Dialog
            </summary>
        </member>
        <member name="M:Atmosphere.Plugin.AtmosphereLayer.propertiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NASA.Plugins.BMNG">
            <summary>
            Summary description for BMNG.
            </summary>
        </member>
        <member name="M:NASA.Plugins.BMNG.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NASA.Plugins.BMNG.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NASA.Plugins.BmngAboutDialog">
            <summary>
            Summary description for BmngAboutDialog.
            </summary>
        </member>
        <member name="F:NASA.Plugins.BmngAboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NASA.Plugins.BmngAboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NASA.Plugins.BmngAboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:NASA.Plugins.Compass3DWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:NASA.Plugins.Compass3DWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="P:NASA.Plugins.Compass3DWidget.Location">
            New IWidget properties
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:NASA.Plugins.Compass3DWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:NASA.Plugins.Compass3DWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:NASA.Plugins.Compass3DWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="T:NASA.Plugins.NrlMryAboutDialog">
            <summary>
            Summary description for NrlMryAboutDialog.
            </summary>
        </member>
        <member name="F:NASA.Plugins.NrlMryAboutDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NASA.Plugins.NrlMryAboutDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NASA.Plugins.NrlMryAboutDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:NASA.Plugins.NRLMontereyGlobal">
            <summary>
            Summary description for NRLMontereyGlobal.
            </summary>
        </member>
        <member name="M:NASA.Plugins.NRLMontereyGlobal.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NASA.Plugins.NRLMontereyGlobal.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NASA.Plugins.NRLWeatherLoader.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:NASA.Plugins.NRLWeatherLoader.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="F:NASA.Plugins.ScaleBarWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:NASA.Plugins.ScaleBarWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="P:NASA.Plugins.ScaleBarWidget.Location">
            New IWidget properties
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:NASA.Plugins.ScaleBarWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:NASA.Plugins.ScaleBarWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:NASA.Plugins.ScaleBarWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="T:Murris.Plugins.Compass">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="F:Murris.Plugins.Compass.LayerName">
            <summary>
            Name displayed in layer manager
            </summary>
        </member>
        <member name="M:Murris.Plugins.Compass.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Murris.Plugins.Compass.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="M:Murris.Plugins.Compass.control_VisibleChanged(System.Object,System.EventArgs)">
            <summary>
            Toggles visibility on the CompassLayer
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Murris.Plugins.CompassLayer">
            <summary>
            Compass
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.#ctor(System.String,System.String,WorldWind.WorldWindow)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.ReadSettings">
            <summary>
            Read saved settings from ini file
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.SaveSettings">
            <summary>
            Save settings in ini file
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Gets called when user left clicks.
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Fills the context menu with menu items specific to the layer.
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.OnPropertiesClick(System.Object,System.EventArgs)">
            <summary>
            Properties context menu clicked.
            </summary>
        </member>
        <member name="T:Murris.Plugins.CompassLayer.propertiesDialog">
            <summary>
            Properties Dialog
            </summary>
        </member>
        <member name="M:Murris.Plugins.CompassLayer.propertiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Murris.Plugins.LightController">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="M:Murris.Plugins.LightController.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Murris.Plugins.LightController.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="T:Murris.Plugins.LightController.LightDialog">
            <summary>
            Properties Dialog
            </summary>
        </member>
        <member name="M:Murris.Plugins.LightController.LightDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:YahooFlickr.Plugins.FlickrGUI.searchButton_Click(System.Object,System.EventArgs)">
            <summary>
            Button Press callback set the flickr plugin layer keyword
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:YahooFlickr.Plugins.FlickrPlugin">
            <summary>
            Main Plugin class - maintains a GUI and FlickrLayer
            </summary> 
        </member>
        <member name="T:YahooFlickr.Plugins.FlickrIconsLayer">
            <summary>
            Flickr Icons Display Layer. Shows Georeferenced Images
            </summary>
        </member>
        <member name="M:YahooFlickr.Plugins.FlickrIconsLayer.#ctor">
            <summary>
            Construct supporting Flickr objects
            </summary>
        </member>
        <member name="M:YahooFlickr.Plugins.FlickrIconsLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initialize graphics objects
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:YahooFlickr.Plugins.FlickrIconsLayer.Dispose">
            <summary>
            Dispose Graphics objects
            </summary>
        </member>
        <member name="M:YahooFlickr.Plugins.FlickrIconsLayer.Update(WorldWind.DrawArgs)">
            <summary>
            This method updates the Icons to reflect only those in view
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:YahooFlickr.Plugins.FlickrIconsLayer.GetPhotoCollection(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This method takes a bounding box and returns
            Photocollection covering the bounding box from
            cache or from downloaded data
            </summary>
            <param name="west"></param>
            <param name="south"></param>
            <param name="east"></param>
            <param name="north"></param>
            <returns></returns>
        </member>
        <member name="T:Withak.Plugin.FloodLevelPlugin">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="F:Withak.Plugin.FloodLevelPlugin.LayerName">
            <summary>
            Name displayed in layer manager
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevelPlugin.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevelPlugin.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="T:Withak.Plugin.FloodLevel">
            <summary>
            Sky dome
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.#ctor(System.String,WorldWind.WorldWindow)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Gets called when user left clicks.
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Fills the context menu with menu items specific to the layer.
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.OnPropertiesClick(System.Object,System.EventArgs)">
            <summary>
            Properties context menu clicked.
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevel.MakeFloodMesh(Microsoft.DirectX.Direct3D.Device,System.Single,System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            Creates a rectangular portion of a spherical mesh
            </summary>
            <param name="device">The current direct3D drawing device.</param>
            <param name="radius">The sphere's radius</param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:Withak.Plugin.FloodLevelForm">
            <summary>
            Properties form
            </summary>
        </member>
        <member name="F:Withak.Plugin.FloodLevelForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Withak.Plugin.FloodLevelForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Withak.Plugin.FloodLevelForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:jhuapl.sample.GeoRSSLoader">
            <summary>
            
            </summary>
        </member>
        <member name="P:jhuapl.sample.GeoRSSLoader.FeedLayer">
            <summary>
            This is the layer holding all geoRSS feeds
            </summary>
        </member>
        <member name="P:jhuapl.sample.GeoRSSLoader.WWCLayer">
            <summary>
            This is the test layer holding the WorldWindCentral feed
            </summary>
        </member>
        <member name="P:jhuapl.sample.GeoRSSLoader.GeoRSSMenu">
            <summary>
            The whiteboard menu item
            </summary>
        </member>
        <member name="T:jhuapl.sample.GeoRSSMenuButton">
            <summary>
            
            </summary>
        </member>
        <member name="T:jhuapl.sample.WhiteboardPlugin">
            <summary>
            
            </summary>
        </member>
        <member name="P:jhuapl.sample.WhiteboardPlugin.WbForm">
            <summary>
            This is the whiteboard form widget displayed on the worldwind window
            </summary>
        </member>
        <member name="P:jhuapl.sample.WhiteboardPlugin.WbLayer">
            <summary>
            This is the layer holding all whiteboard drawing elements
            </summary>
        </member>
        <member name="P:jhuapl.sample.WhiteboardPlugin.WbMenu">
            <summary>
            The whiteboard menu item
            </summary>
        </member>
        <member name="T:jhuapl.sample.WhiteboardMenuButton">
            <summary>
            
            </summary>
        </member>
        <member name="T:jhuapl.util.WiimoteHeadtracker">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="M:jhuapl.util.WiimoteHeadtracker.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:jhuapl.util.WiimoteHeadtracker.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="M:bNb.Plugins.GoogleMapsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:bNb.Plugins.GoogleMapsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:bNb.Plugins.VeReprojectTilesLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            Layer initialization code
            </summary>
        </member>
        <member name="M:bNb.Plugins.VeReprojectTilesLayer.Update(WorldWind.DrawArgs)">
            <summary>
            Update layer (called from worker thread)
            </summary>
        </member>
        <member name="M:bNb.Plugins.VeReprojectTilesLayer.Render(WorldWind.DrawArgs)">
            <summary>
            Draws the layer
            </summary>
        </member>
        <member name="M:bNb.Plugins.VeReprojectTilesLayer.Dispose">
            <summary>
            Cleanup when layer is disabled
            </summary>
        </member>
        <member name="M:bNb.Plugins.VeReprojectTilesLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Handle mouse click
            </summary>
            <returns>true if click was handled.</returns>
        </member>
        <member name="T:bNb.Plugins.VESettings">
            <summary>
            This class stores virtual earth settings
            </summary>
        </member>
        <member name="F:bNb.Plugins.VESettings.zoomlevel">
            <summary>
            Layer Zoom Level
            </summary>
        </member>
        <member name="F:bNb.Plugins.VESettings.layeron">
            <summary>
            Turn layer on
            </summary>
        </member>
        <member name="F:bNb.Plugins.VESettings.terrain">
            <summary>
            Turn terrain on
            </summary>
        </member>
        <member name="F:bNb.Plugins.VESettings.road">
            <summary>
            Layer types
            </summary>
        </member>
        <member name="M:bNb.Plugins.VESettings.LoadSettingsFromFile(System.String)">
            <summary>
            Loads a serialized instance of the settings from the specified file
            returns default values if the file doesn't exist or an error occurs
            </summary>
            <returns>The persisted settings from the file</returns>
        </member>
        <member name="M:bNb.Plugins.VESettings.SaveSettingsToFile(System.String,bNb.Plugins.VESettings)">
            <summary>
            Persists the settings to the specified filename
            </summary>
            <param name="file">The filename to use for saving</param>
            <param name="settings">The instance of the Settings class to persist</param>
        </member>
        <member name="P:bNb.Plugins.VeTile.UL">
            <summary>
            Coordinates at upper left edge of image
            </summary>
        </member>
        <member name="P:bNb.Plugins.VeTile.UR">
            <summary>
            Coordinates at upper right edge of image
            </summary>
        </member>
        <member name="P:bNb.Plugins.VeTile.LL">
            <summary>
            Coordinates at lower left edge of image
            </summary>
        </member>
        <member name="P:bNb.Plugins.VeTile.LR">
            <summary>
            Coordinates at lower right edge of image
            </summary>
        </member>
        <member name="T:bNb.Plugins.UV">
            <summary>
            Sorry for lack of description, but this struct is kinda difficult 
            to describe since it supports so many coordinate systems.
            </summary>
        </member>
        <member name="T:bNb.Plugins.Projection">
            <summary>
            C# wrapper for proj.4 projection filter
            http://proj.maptools.org/
            </summary>
        </member>
        <member name="M:bNb.Plugins.Projection.pj_inv(bNb.Plugins.UV,System.IntPtr)">
            <summary>
            XY -> Lat/lon
            </summary>
            <param name="uv"></param>
            <param name="projPJ"></param>
            <returns></returns>
        </member>
        <member name="M:bNb.Plugins.Projection.#ctor(System.String[])">
            <summary>
            Constructor.
            </summary>
            <param name="initParameters">Proj.4 style list of options.
            <sample>new string[]{ "proj=utm", "ellps=WGS84", "no.defs", "zone=32" }</sample>
            </param>
        </member>
        <member name="M:bNb.Plugins.Projection.Forward(bNb.Plugins.UV)">
            <summary>
            Forward (Go from specified projection to lat/lon)
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="M:bNb.Plugins.Projection.Inverse(bNb.Plugins.UV)">
            <summary>
            Inverse (Go from lat/lon to specified projection)
            </summary>
            <param name="uv"></param>
            <returns></returns>
        </member>
        <member name="T:GpsTracker.CSVReader">
            <summary>
            A data-reader style interface for reading CSV files.
            </summary>
        </member>
        <member name="M:GpsTracker.CSVReader.#ctor">
            <summary>
            Create a new reader
            </summary>
        </member>
        <member name="M:GpsTracker.CSVReader.#ctor(System.IO.Stream)">
            <summary>
            Create a new reader for the given stream.
            </summary>
            <param name="s">The stream to read the CSV from.</param>
        </member>
        <member name="M:GpsTracker.CSVReader.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Create a new reader for the given stream and encoding.
            </summary>
            <param name="s">The stream to read the CSV from.</param>
            <param name="enc">The encoding used.</param>
        </member>
        <member name="M:GpsTracker.CSVReader.#ctor(System.String)">
            <summary>
            Creates a new reader for the given text file path.
            </summary>
            <param name="filename">The name of the file to be read.</param>
        </member>
        <member name="M:GpsTracker.CSVReader.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Creates a new reader for the given text file path and encoding.
            </summary>
            <param name="filename">The name of the file to be read.</param>
            <param name="enc">The encoding used.</param>
        </member>
        <member name="M:GpsTracker.CSVReader.GetCSVLine">
            <summary>
            Returns the fields for the next row of CSV data (or null if at eof)
            </summary>
            <returns>A string array of fields or null if at the end of file.</returns>
        </member>
        <member name="M:GpsTracker.CSVReader.GetCSVLine(System.String)">
            <summary>
            Returns the fields for sLine
            </summary>
            <returns>A string array of fields or null if sLine is null.</returns>
        </member>
        <member name="M:GpsTracker.CSVReader.Dispose">
            <summary>
            Disposes the CSVReader. The underlying stream is closed.
            </summary>
        </member>
        <member name="T:GpsTracker.CSVReaderException">
            <summary>
            Exception class for CSVReader exceptions.
            </summary>
        </member>
        <member name="M:GpsTracker.CSVReaderException.#ctor(System.String)">
            <summary>
            Constructs a new exception object with the given message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:GpsTracker.GpsTracker.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GpsTracker.GpsTracker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:GpsTracker.PlaybackControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GpsTracker.PlaybackControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GpsTracker.PlaybackControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:GpsTracker.GpsSetup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GpsTracker.GpsSetup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:GpsTracker.GpsSetup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerOverlay.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerOverlay.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerOverlay.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Handle mouse click
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerOverlay.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerFixInfo.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerFixInfo.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerFixInfo.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerFixInfo.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:GpsTracker.GPSTrackerFixInfo.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="T:GpsTracker.MessageMonitor">
            <summary>
            Summary description for MessageMonitor.
            </summary>
        </member>
        <member name="M:GpsTracker.MessageMonitor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GpsTracker.MessageMonitor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:GpsTracker.POIName">
            <summary>
            Summary description for POIName.
            </summary>
        </member>
        <member name="F:GpsTracker.POIName.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:GpsTracker.POIName.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:GpsTracker.POIName.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.MeasureWinResult">
            <summary>
            Winforms class to show measurement results till
            the Worldwind Widgets mature
            </summary>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.MeasureToolNG">
            <summary>
            Planimetric Measure Tool plug-in
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.ClearLines">
            <summary>
            Remove all the line segments
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.menuItemClicked(System.Object,System.EventArgs)">
            <summary>
            Measuretool is enabled via the menu
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Measure tool is activated via the M key
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.PlotTerrain">
            <summary>
            Plot Terrrain Cross Section graph
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolNG.ChangePluginStatus">
            <summary>
            Turn plugin on and off
            </summary>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.LineAddHandler">
            <summary>
            Updates GUI with new length in line mode
            </summary>
            <param name="LengthText"></param>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.PolyAddHandler">
            <summary>
            Update GUI with new area in polygon mode 
            </summary>
            <param name="AreaText"></param>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.MeasureToolLayer">
            <summary>
            This class is a Mouse gesture sensitive
            Line Drawing class.
            The mouse gestures should function as follows
            in 
            1: Single Line mode
                * Left Click begins a single measurement line
                * Mouse move dynamically updates line
                * Second left click confirms the position of the line
                * Right Click clears points and restarts measurements
            2: Multiline Mode
                * Left Click begins Multilne
                * Mouse move as above
                * Each subsequent left click adds a segment to the line
                * Right Click completes the measurement
                * Second right click clears points and restarts measurements
            </summary>
        </member>
        <member name="P:MeasureToolNewgen.Plugins.MeasureToolLayer.GCLength">
            <summary>
            Get and sets length based on great circle calculation
            </summary>
        </member>
        <member name="P:MeasureToolNewgen.Plugins.MeasureToolLayer.TerrainLength">
            <summary>
            Gets and sets length based on following terrain
            </summary>
        </member>
        <member name="P:MeasureToolNewgen.Plugins.MeasureToolLayer.Nodes">
            <summary>
            Gets the Point3d array of nodes for the linefeature
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolLayer.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Respond to mouse movements with dynamic line
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolLayer.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Store position of mouse click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolLayer.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Add point or deactivate tool
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolLayer.MouseDragged">
            <summary>
            Detect drag to allow globe movements
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolLayer.MouseRightClick">
            <summary>
            Deactivate tool on right click
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureToolLayer.CalcLength">
            <summary>
            This Method calculates total length of the linefeature
            </summary>
            <returns>Length of the line</returns>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.MeasureAreaLayer">
            <summary>
            This class is used for area measurements
            extends polygon feature to be sensitive to
            mousemovements
            </summary>
        </member>
        <member name="P:MeasureToolNewgen.Plugins.MeasureAreaLayer.Nodes">
            <summary>
            Access measurement polygon nodes
            </summary>
        </member>
        <member name="P:MeasureToolNewgen.Plugins.MeasureAreaLayer.IsOn">
            <summary>
            Overridden ison method to disable point to go
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.#ctor(WorldWind.World,WorldWind.DrawArgs,WorldWind.LinearRing)">
            <summary>
            Constructor presets polygonfeature properties
            </summary>
            <param name="world"></param>
            <param name="drawArgs"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.Render(WorldWind.DrawArgs)">
            <summary>
            Allow changing of mouse cursor during rendering
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.MouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Respond to Mousemovements with dynamic polygon
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.MouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Store last mousedown point to detect dragging
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Complete click response, add point or deactivate tool
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.MouseDragged">
            <summary>
            Allow movement of globe while measuring
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.MouseRightClick">
            <summary>
            Deactivate tool on right click
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.CalcArea">
            <summary>
            Perform area calculations using planet model
            1.Basic calculation using sphere model
            2.Refinements using ellipsoid and terrain
            </summary>
            <returns></returns>
        </member>
        <member name="F:MeasureToolNewgen.Plugins.MeasureAreaLayer.QA">
            <summary>
            Calculate the polygon area using a spherical earth model
            </summary>
            <returns></returns>
        </member>
        <member name="F:MeasureToolNewgen.Plugins.MeasureAreaLayer.QB">
            <summary>
            Calculate the polygon area using a spherical earth model
            </summary>
            <returns></returns>
        </member>
        <member name="F:MeasureToolNewgen.Plugins.MeasureAreaLayer.QC">
            <summary>
            Calculate the polygon area using a spherical earth model
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.Q(System.Double)">
            <summary>
            Ellipsoid helper method
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.Qbar(System.Double)">
            <summary>
            Ellipsoid helper method
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.G_begin_ellipsoid_polygon_area(System.Double,System.Double)">
            <summary>
            Initialize ellipsoid with axis length and eccentricity
            </summary>
            <param name="a">Semi-Major axis in Meters</param>
            <param name="e2">Ellipsoid eccentricity squared </param>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.G_ellipsoid_polygon_area(WorldWind.Point3d[])">
            <summary>
            Calculate area from a set of lat-lon points
            </summary>
            <param name="points">List of points</param>
            <returns></returns>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.MeasureAreaLayer.CalcEllipsoidArea">
            <summary>
            Calculate area of polygon based on ellipsoid
            </summary>
            <returns></returns>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.MeasureResult">
            <summary>
            This class displays measurement results in a Worldwind Style widget
            </summary>
        </member>
        <member name="T:MeasureToolNewgen.Plugins.TerrainGraphForm">
            <summary>
            Form to display the terrain profile plot
            </summary>
        </member>
        <member name="F:MeasureToolNewgen.Plugins.TerrainGraphForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.TerrainGraphForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MeasureToolNewgen.Plugins.TerrainGraphForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:gpxType">
            <remarks/>
        </member>
        <member name="F:gpxType.metadata">
            <remarks/>
        </member>
        <member name="F:gpxType.wpt">
            <remarks/>
        </member>
        <member name="F:gpxType.rte">
            <remarks/>
        </member>
        <member name="F:gpxType.trk">
            <remarks/>
        </member>
        <member name="F:gpxType.extensions">
            <remarks/>
        </member>
        <member name="F:gpxType.version">
            <remarks/>
        </member>
        <member name="F:gpxType.creator">
            <remarks/>
        </member>
        <member name="T:metadataType">
            <remarks/>
        </member>
        <member name="F:metadataType.name">
            <remarks/>
        </member>
        <member name="F:metadataType.desc">
            <remarks/>
        </member>
        <member name="F:metadataType.author">
            <remarks/>
        </member>
        <member name="F:metadataType.copyright">
            <remarks/>
        </member>
        <member name="F:metadataType.link">
            <remarks/>
        </member>
        <member name="F:metadataType.time">
            <remarks/>
        </member>
        <member name="F:metadataType.timeSpecified">
            <remarks/>
        </member>
        <member name="F:metadataType.keywords">
            <remarks/>
        </member>
        <member name="F:metadataType.bounds">
            <remarks/>
        </member>
        <member name="F:metadataType.extensions">
            <remarks/>
        </member>
        <member name="T:personType">
            <remarks/>
        </member>
        <member name="F:personType.name">
            <remarks/>
        </member>
        <member name="F:personType.email">
            <remarks/>
        </member>
        <member name="F:personType.link">
            <remarks/>
        </member>
        <member name="T:emailType">
            <remarks/>
        </member>
        <member name="F:emailType.id">
            <remarks/>
        </member>
        <member name="F:emailType.domain">
            <remarks/>
        </member>
        <member name="T:trksegType">
            <remarks/>
        </member>
        <member name="F:trksegType.trkpt">
            <remarks/>
        </member>
        <member name="F:trksegType.extensions">
            <remarks/>
        </member>
        <member name="T:wptType">
            <remarks/>
        </member>
        <member name="F:wptType.ele">
            <remarks/>
        </member>
        <member name="F:wptType.eleSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.time">
            <remarks/>
        </member>
        <member name="F:wptType.timeSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.magvar">
            <remarks/>
        </member>
        <member name="F:wptType.magvarSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.geoidheight">
            <remarks/>
        </member>
        <member name="F:wptType.geoidheightSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.name">
            <remarks/>
        </member>
        <member name="F:wptType.cmt">
            <remarks/>
        </member>
        <member name="F:wptType.desc">
            <remarks/>
        </member>
        <member name="F:wptType.src">
            <remarks/>
        </member>
        <member name="F:wptType.link">
            <remarks/>
        </member>
        <member name="F:wptType.sym">
            <remarks/>
        </member>
        <member name="F:wptType.type">
            <remarks/>
        </member>
        <member name="F:wptType.fix">
            <remarks/>
        </member>
        <member name="F:wptType.fixSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.sat">
            <remarks/>
        </member>
        <member name="F:wptType.hdop">
            <remarks/>
        </member>
        <member name="F:wptType.hdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.vdop">
            <remarks/>
        </member>
        <member name="F:wptType.vdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.pdop">
            <remarks/>
        </member>
        <member name="F:wptType.pdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.ageofdgpsdata">
            <remarks/>
        </member>
        <member name="F:wptType.ageofdgpsdataSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.dgpsid">
            <remarks/>
        </member>
        <member name="F:wptType.extensions">
            <remarks/>
        </member>
        <member name="F:wptType.lat">
            <remarks/>
        </member>
        <member name="F:wptType.lon">
            <remarks/>
        </member>
        <member name="T:linkType">
            <remarks/>
        </member>
        <member name="F:linkType.text">
            <remarks/>
        </member>
        <member name="F:linkType.type">
            <remarks/>
        </member>
        <member name="F:linkType.href">
            <remarks/>
        </member>
        <member name="T:fixType">
            <remarks/>
        </member>
        <member name="F:fixType.none">
            <remarks/>
        </member>
        <member name="F:fixType.Item2d">
            <remarks/>
        </member>
        <member name="F:fixType.Item3d">
            <remarks/>
        </member>
        <member name="F:fixType.dgps">
            <remarks/>
        </member>
        <member name="F:fixType.pps">
            <remarks/>
        </member>
        <member name="T:extensionsType">
            <remarks/>
        </member>
        <member name="F:extensionsType.Any">
            <remarks/>
        </member>
        <member name="T:trkType">
            <remarks/>
        </member>
        <member name="F:trkType.name">
            <remarks/>
        </member>
        <member name="F:trkType.cmt">
            <remarks/>
        </member>
        <member name="F:trkType.desc">
            <remarks/>
        </member>
        <member name="F:trkType.src">
            <remarks/>
        </member>
        <member name="F:trkType.link">
            <remarks/>
        </member>
        <member name="F:trkType.number">
            <remarks/>
        </member>
        <member name="F:trkType.type">
            <remarks/>
        </member>
        <member name="F:trkType.extensions">
            <remarks/>
        </member>
        <member name="F:trkType.trkseg">
            <remarks/>
        </member>
        <member name="T:rteType">
            <remarks/>
        </member>
        <member name="F:rteType.name">
            <remarks/>
        </member>
        <member name="F:rteType.cmt">
            <remarks/>
        </member>
        <member name="F:rteType.desc">
            <remarks/>
        </member>
        <member name="F:rteType.src">
            <remarks/>
        </member>
        <member name="F:rteType.link">
            <remarks/>
        </member>
        <member name="F:rteType.number">
            <remarks/>
        </member>
        <member name="F:rteType.type">
            <remarks/>
        </member>
        <member name="F:rteType.extensions">
            <remarks/>
        </member>
        <member name="F:rteType.rtept">
            <remarks/>
        </member>
        <member name="T:boundsType">
            <remarks/>
        </member>
        <member name="F:boundsType.minlat">
            <remarks/>
        </member>
        <member name="F:boundsType.minlon">
            <remarks/>
        </member>
        <member name="F:boundsType.maxlat">
            <remarks/>
        </member>
        <member name="F:boundsType.maxlon">
            <remarks/>
        </member>
        <member name="T:copyrightType">
            <remarks/>
        </member>
        <member name="F:copyrightType.year">
            <remarks/>
        </member>
        <member name="F:copyrightType.license">
            <remarks/>
        </member>
        <member name="F:copyrightType.author">
            <remarks/>
        </member>
        <member name="T:Mashiharu.Sample.Joystick">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="M:Mashiharu.Sample.Joystick.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:Mashiharu.Sample.Joystick.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="M:Mashiharu.Sample.Joystick.JoystickLoop">
            <summary>
            Background thread runs this function in a loop reading joystick state.
            </summary>
        </member>
        <member name="M:Mashiharu.Sample.Joystick.HandleJoystick">
            <summary>
            Time to update things again.
            </summary>
        </member>
        <member name="T:KMLPlugin.KMLImporter">
            <summary>
            Main plugin class
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.Load">
            <summary>
            Loads this plugin. Initializes variables and adds layers and menu items
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.Unload">
            <summary>
            Unloads this plugin. Removes layers and menu items
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.LoadDiskKM(System.String)">
            <summary>
            Loads either a KML or KMZ file from disk
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:KMLPlugin.KMLImporter.Spawn_LoadKML(System.String)">
            <summary>
            Loads a KML file in a new thread
            </summary>
            <param name="path">The path to the KML file to load</param>
        </member>
        <member name="M:KMLPlugin.KMLImporter.LoadKMLFile">
            <summary>
            Loads a KML file
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.WorldWindow_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Checks if the object being dropped is a kml or kmz file
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.WorldWindow_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Handles dropping of a kml/kmz file (by loading that file)
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.DragDropIsValid(System.Windows.Forms.DragEventArgs)">
            <summary>
            Determines if this plugin can handle the dropped item
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.loadMenu_Click(System.Object,System.EventArgs)">
            <summary>
            Handles selecting and loading the selected KML/KMZ file
            </summary>
        </member>
        <member name="M:KMLPlugin.KMLImporter.Cleanup">
            <summary>
            Cleans up used resources
            </summary>
        </member>
        <member name="T:KMLPlugin.Napalm">
            <summary>
            Napalm autoupdater code
            </summary>
        </member>
        <member name="M:KMLPlugin.Napalm.#ctor">
            <summary>
            Empty private constructor, because this class only contains static methods
            </summary>
        </member>
        <member name="M:KMLPlugin.Napalm.Update(System.String,System.String)">
            <summary>
            Starts an async update
            </summary>
            <param name="PluginDirectory"></param>
            <param name="version"></param>
        </member>
        <member name="M:KMLPlugin.Napalm.WebUpdate(System.String,System.String)">
            <summary>
            Updates this plugin (and supporting files) from the internet
            </summary>
        </member>
        <member name="M:KMLPlugin.Napalm.GetHashBytes(System.String)">
            <summary>
            Gets a byte array representing the hash of a given string
            </summary>
            <param name="s">The string to hash</param>
            <returns>A byte array containing the hash</returns>
        </member>
        <member name="M:KMLPlugin.Napalm.NapalmIsEnabled(System.String)">
            <summary>
            Checks whether Napalm is enabled
            </summary>
            <param name="PluginDirectory">The directory that contains the key file</param>
            <returns>true if Napalm is enabled, false if Napalm is not enabled</returns>
        </member>
        <member name="M:KMLPlugin.Napalm.NapalmChangeStatus(System.String,System.Boolean)">
            <summary>
            Sets Napalm's enabled state
            </summary>
            <param name="PluginDirectory">The directory that contains the key file</param>
            <param name="bEnabled">Whether to enable Napalm</param>
            <returns>Whether Napalm was enabled</returns>
        </member>
        <member name="T:KMLPlugin.Settings">
            <summary>
            Stores settings and has methods to save/load these settings to/from a file
            </summary>
        </member>
        <member name="M:KMLPlugin.Settings.#ctor">
            <summary>
            Empty private constructor, because this class only contains static methods
            </summary>
        </member>
        <member name="M:KMLPlugin.Settings.LoadSettings(System.String)">
            <summary>
            Loads settings from an XML file
            </summary>
            <param name="file">The file to load from</param>
        </member>
        <member name="M:KMLPlugin.Settings.SaveSettings(System.String)">
            <summary>
            Saves settings to an XML file
            </summary>
            <param name="file">The file to save to</param>
        </member>
        <member name="T:KMLPlugin.WaitMessage">
            <summary>
            Renders a message to the lower right corner
            </summary>
        </member>
        <member name="M:KMLPlugin.WaitMessage.#ctor">
            <summary>
            Creates a new WaitMessage
            </summary>
        </member>
        <member name="M:KMLPlugin.WaitMessage.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:KMLPlugin.WaitMessage.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:KMLPlugin.WaitMessage.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:KMLPlugin.WaitMessage.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:KMLPlugin.WaitMessage.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="T:KMLPlugin.AboutForm">
            <summary>
            A Form with information about KMLImporter
            </summary>
        </member>
        <member name="M:KMLPlugin.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:KMLPlugin.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MeasureTool.Plugins.MeasureTool">
            <summary>
            Planimetric Measure Tool plug-in
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureTool.Load">
            <summary>
            Plugin entry point 
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureTool.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.TexturePath">
            <summary>
            Tool texture path
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.StartLatitude">
            <summary>
            Latitude of measure start position
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.StartLongitude">
            <summary>
            Longitude of measure start position
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.EndLatitude">
            <summary>
            Latitude of measure end position
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.EndLongitude">
            <summary>
            Longitude of measure end position
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.Azimuth">
            <summary>
            Heading to go from start to end position. (0 = north)
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.Distance">
            <summary>
            Distance (meters) from start to end position
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.State">
            <summary>
            Current state of measuring operation
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.m_drawArgs">
            <summary>
            Multi line object; contains series of points.
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.#ctor(MeasureTool.Plugins.MeasureTool,WorldWind.DrawArgs)">
            <summary>
            Class to render measurement lines
            </summary>
            <param name="srcPlugin"></param>
            <param name="drawArgs"></param>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Fills the context menu with menu items specific to the layer.
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.OnPropertiesClick(System.Object,System.EventArgs)">
            <summary>
            Properties context menu clicked.
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.BuildMeasureLine(WorldWind.Angle)">
            <summary>
            Calculates the segments of the measure curve
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.IsMeasureLinePointVisible(System.Int32)">
            <summary>
            Checks if a point on the measure line is visible
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.FindAnchorPoint">
            <summary>
            Find the best visible point to "attach" the labelText to.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.CalcAngle(System.Int32,Microsoft.DirectX.Vector3)">
            <summary>
            Calculates the average angle in screen coordinates of the line segment before and after
            linePointNumber.
            </summary>
            <param name="linePointNumber">Index into the measureLine array.</param>
            <returns></returns>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.LoadTextures(System.String)">
            <summary>
            Loads or downloads the bitmaps
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.updateTextures(System.Object,System.EventArgs)">
            <summary>
            Load Result box texture
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.saveLine(System.Object,System.EventArgs)">
            <summary>
            Method to save a multi-point line. Will open up a dialog box.
            </summary>
            <param name="sender">The multi-point line to be saved.</param>
            <param name="e"></param>
        </member>
        <member name="T:MeasureTool.Plugins.MeasureToolLayer.MeasureLine">
            <summary>
            MeasureLine class: line object.
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.StartLatitude">
            <summary>
            Segment starting latitude
            </summary>
        </member>
        <member name="P:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.StartLongitude">
            <summary>
            Segment starting longitude
            </summary>
        </member>
        <member name="P:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.EndLatitude">
            <summary>
            Segment ending latitude
            </summary>
        </member>
        <member name="P:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.EndLongitude">
            <summary>
            Segment ending longitude
            </summary>
        </member>
        <member name="P:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.Linear">
            <summary>
            Measured linearDistance distance (as the crow flies)
            </summary>
        </member>
        <member name="P:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.GroundTrack">
            <summary>
            Measured ground track length
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.Render(WorldWind.DrawArgs)">
            <summary>
            Render the line segment
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.Calculate(WorldWind.World,System.Boolean)">
            <summary>
            Calculates the segments of the measure curve
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.CalculateElevatedPath(WorldWind.World)">
            <summary>
            Calculate this segment's ground track distance (meters)
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.UpdateCoordinates">
            <summary>
            Update the lat/lon column
            </summary>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.MeasureLine.FormatDistance(System.Double)">
            <summary>
            Converts numeric distance (meters) to string of selected unit.
            </summary>
        </member>
        <member name="T:MeasureTool.Plugins.MeasureToolLayer.SaveMultiLine">
            <summary>
            Class to create save dialog for a multi-point line
            </summary>
        </member>
        <member name="F:MeasureTool.Plugins.MeasureToolLayer.SaveMultiLine.m_multiline">
            Multiline Object to be serialized
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.SaveMultiLine.writeShape(System.String)">
            <summary>
            Utility method to write shapefiles
            </summary>
            <param name="filename">Output Shapefile name</param>
        </member>
        <member name="M:MeasureTool.Plugins.MeasureToolLayer.SaveMultiLine.writeKML">
            <summary>
            Utility function to write KML strings for PolyLines/Polygons
            </summary>
            <returns></returns>
        </member>
        <member name="T:Apogee.MovieCreator.MovieRecorderDialog">
            <summary>
            Movie Recorder dialog
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.MovieRecorderDialog.frameHeight">
            <summary>
            Height of rendered images (pixels).
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.MovieRecorderDialog.frameWidth">
            <summary>
            Width of rendered images (pixels).
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.MovieRecorderDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.MovieRecorderDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.MovieRecorderDialog.buttonEdit_Click(System.Object,System.EventArgs)">
            <summary>
            Launch notepad with script for edit
            </summary>
        </member>
        <member name="T:Apogee.MovieCreator.MovieRecorder">
            <summary>
            Movie recording script.  Plays back a script file with camera positions 
            and records each frame to sequentially numbered Portable Network Graphics
            files on disk. Adds itself to the World Wind main menu's 
            Plugins menu -> Movie Recorder
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.MovieRecorder.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.MovieRecorder.Unload">
            <summary>
            Close down
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.MovieRecorder.menuItemRecorder_Click(System.Object,System.EventArgs)">
            <summary>
            User selected the recorder from the main menu.
            </summary>
        </member>
        <member name="T:Apogee.MovieCreator.PathCamera">
            <summary>
            Camera that follows a path between a list of 
            key frames and triggers a save of each frame.
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.PathCamera.IsRecording">
            <summary>
            Set to true to enable recording of frames to disk.
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.PathCamera.PreRollTime">
            <summary>
            How long to wait after moving camera to allow imagery to load
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.PathCamera.StartFrame">
            <summary>
            Frame to start recording from.
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.PathCamera.EndFrame">
            <summary>
            Frame to end recording on.
            </summary>
        </member>
        <member name="F:Apogee.MovieCreator.PathCamera.OutputFilePattern">
            <summary>
            Saved filename pattern. "{0}" will 
            be replaced with the frame number
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.PathCamera.#ctor(WorldWind.WorldWindow,Apogee.MovieCreator.MovieRecorderDialog)">
            <summary>
            Our camera constructor
            </summary>
            <param name="worldWindow"></param>
        </member>
        <member name="M:Apogee.MovieCreator.PathCamera.Update(Microsoft.DirectX.Direct3D.Device)">
            <summary>
            Override the camera update position code with our own.
            </summary>
            <param name="device">The Direct3D device.</param>
        </member>
        <member name="M:Apogee.MovieCreator.PathCamera.LoadScript(System.String)">
            <summary>
            Loads the script file.
            </summary>
            <param name="scriptFile">Path and filename of the script 
            file containing the list of key frames.
            Format: FrameNumber;World Wind uri 
            The file must be sorted (frame number ascending)
            </param>
        </member>
        <member name="M:Apogee.MovieCreator.PathCamera.InterpolateLog(System.Single,System.Double,System.Double)">
            <summary>
            Find the interpolated value between start and end.
            </summary>
            <param name="t">0..1 (0=start, 1=end, anything between = interpolate)</param>
            <param name="start">Starting value</param>
            <param name="end">Ending value</param>
            <returns></returns>
        </member>
        <member name="M:Apogee.MovieCreator.PathCamera.InstallDefaultCamera">
            <summary>
            Restores the original camera for normal operation.
            </summary>
        </member>
        <member name="T:Apogee.MovieCreator.KeyFrame">
            <summary>
            Contains one key frame (line from script file)
            </summary>
        </member>
        <member name="M:Apogee.MovieCreator.KeyFrame.FromString(System.String)">
            <summary>
            Constructs a key frame from a script line.
            </summary>
        </member>
        <member name="P:Apogee.MovieCreator.KeyFrame.Orientation">
            <summary>
            The key frame rotation quaternion
            </summary>
        </member>
        <member name="P:Apogee.MovieCreator.KeyFrame.CameraOrientation">
            <summary>
            The key frame rotation quaternion
            </summary>
        </member>
        <member name="T:NLT.Plugins.ShapeFileInfoTool">
            <summary>
            retrieves information from shapefiles
            </summary>
        </member>
        <member name="M:NLT.Plugins.ShapeFileInfoTool.Load">
            <summary>
            Load the plugin
            </summary>
        </member>
        <member name="M:NLT.Plugins.ShapeFileInfoTool.Unload">
            <summary>
            Unload our plugin
            </summary>
        </member>
        <member name="T:NLT.Plugins.ShapeFileLoader">
            <summary>
            Summary description for ShapeFileLoader.
            </summary>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.UpdateXMLAndFiles(System.String,System.String)">
            <summary>
            Update XML and relative files
            </summary>
            <param name="shapeConfigFilePath"></param>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.loadZipFileFromURL(System.String)">
            <summary>
            Method to load Shape files from shape+xml zip packs supplied in URL
            </summary>
            <param name="zipURL"></param>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.loadShpFileFromURL(System.String)">
            <summary>
            Method to load Shape files from shp+dbf supplied in URL
            </summary>
            <param name="shpURL"></param>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.loadXMLFileFromURL(System.String)">
            <summary>
            Method to load Shape files from shp+shx+dbf supplied in URL
            </summary>
            <param name="xmlURL"></param>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.ShpDownloadComplete(WorldWind.Net.WebDownload)">
            <summary>
            Web download callback for shp+shx+dbf
            </summary>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.ZipDownloadComplete(WorldWind.Net.WebDownload)">
            <summary>
            Web download callback for Zips
            </summary>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.xmlRelatedFileDownloadComplete(WorldWind.Net.WebDownload)">
            <summary>
            Web download callback for Files relative to a xml
            used by loadXMLFileFromURL
            </summary>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.createXmlLoadShape(System.String)">
            <summary>
            This method generated a default configuration for a ShapeFile and loads it
            </summary>
            <param name="shapepath">Full Path to Shapefile being loaded</param>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.loadShapeFileWithAlreadyExistingXML(System.String,System.Boolean)">
            <summary>
            This method Loads a shapefile 
            </summary>
            <param name="shapeConfigFilePath">Full Path to the Shapefiles XML configuration file</param>
            <param name="checkForUpdate">true if it should check for a newer version of the shapefile</param>
        </member>
        <member name="M:NLT.Plugins.ShapeFileLoader.checkIfUpdateNeeded(System.String,System.String)">
            <summary>
            Method to check if the timestamp have a newer dateTime than the existing xml
            </summary>
            <param name="xmlPath"></param>
            <param name="oldXmlPath"></param>
        </member>
        <member name="T:MapTools.ShapeLib.ShapeType">
            <summary>
            Shape type enumeration
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.NullShape">
            <summary>Shape with no geometric data</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.Point">
            <summary>2D point</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLine">
            <summary>2D polyline</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.Polygon">
            <summary>2D polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPoint">
            <summary>Set of 2D points</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PointZ">
            <summary>3D point</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLineZ">
            <summary>3D polyline</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolygonZ">
            <summary>3D polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPointZ">
            <summary>Set of 3D points</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PointM">
            <summary>3D point with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLineM">
            <summary>3D polyline with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolygonM">
            <summary>3D polygon with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPointM">
            <summary>Set of 3d points with measures</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPatch">
            <summary>Collection of surface patches</summary>
        </member>
        <member name="T:MapTools.ShapeLib.PartType">
            <summary>
            Part type enumeration - everything but ShapeType.MultiPatch just uses PartType.Ring.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.TriangleStrip">
            <summary>
            Linked strip of triangles, where every vertex (after the first two) completes a new triangle.
            A new triangle is always formed by connecting the new vertex with its two immediate predecessors.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.TriangleFan">
            <summary>
            A linked fan of triangles, where every vertex (after the first two) completes a new triangle.
            A new triangle is always formed by connecting the new vertex with its immediate predecessor 
            and the first vertex of the part.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.OuterRing">
            <summary>The outer ring of a polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.InnerRing">
            <summary>The first ring of a polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.FirstRing">
            <summary>The outer ring of a polygon of an unspecified type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.Ring">
            <summary>A ring of a polygon of an unspecified type</summary>
        </member>
        <member name="T:MapTools.ShapeLib.SHPObject">
            <summary>
            SHPObject - represents on shape (without attributes) read from the .shp file.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.shpType">
            <summary>Shape type as a ShapeType enum</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nShapeId">
            <summary>Shape number (-1 is unknown/unassigned)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nParts">
            <summary>Number of parts (0 implies single part with no info)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.paPartStart">
            <summary>Pointer to int array of part start offsets, of size nParts</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.paPartType">
            <summary>Pointer to PartType array (PartType.Ring if not ShapeType.MultiPatch) of size nParts</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nVertices">
            <summary>Number of vertices</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfX">
            <summary>Pointer to double array containing X coordinates</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfY">
            <summary>Pointer to double array containing Y coordinates</summary>		
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfZ">
            <summary>Pointer to double array containing Z coordinates (all zero if not provided)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfM">
            <summary>Pointer to double array containing Measure coordinates(all zero if not provided)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfXMin">
            <summary>Bounding rectangle's min X</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfYMin">
            <summary>Bounding rectangle's min Y</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfZMin">
            <summary>Bounding rectangle's min Z</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfMMin">
            <summary>Bounding rectangle's min M</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfXMax">
            <summary>Bounding rectangle's max X</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfYMax">
            <summary>Bounding rectangle's max Y</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfZMax">
            <summary>Bounding rectangle's max Z</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfMMax">
            <summary>Bounding rectangle's max M</summary>	
        </member>
        <member name="M:MapTools.ShapeLib.SHPOpen(System.String,System.String)">
            <summary>
            The SHPOpen() function should be used to establish access to the two files for 
            accessing vertices (.shp and .shx). Note that both files have to be in the indicated 
            directory, and must have the expected extensions in lower case. The returned SHPHandle 
            is passed to other access functions, and SHPClose() should be invoked to recover 
            resources, and flush changes to disk when complete.
            </summary>
            <param name="szShapeFile">The name of the layer to access.  This can be the name of either 
            the .shp or the .shx file or can just be the path plus the basename of the pair.</param>
            <param name="szAccess">The fopen() style access string. At this time only "rb" (read-only binary) 
            and "rb+" (read/write binary) should be used.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreate(System.String,MapTools.ShapeLib.ShapeType)">
            <summary>
            The SHPCreate() function will create a new .shp and .shx file of the desired type.
            </summary>
            <param name="szShapeFile">The name of the layer to access. This can be the name of either 
            the .shp or the .shx file or can just be the path plus the basename of the pair.</param>
            <param name="shpType">The type of shapes to be stored in the newly created file. 
            It may be either ShapeType.Point, ShapeType.PolyLine, ShapeType.Polygon or ShapeType.MultiPoint.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPGetInfo(System.IntPtr,System.Int32@,MapTools.ShapeLib.ShapeType@,System.Double[],System.Double[])">
            <summary>
            The SHPGetInfo() function retrieves various information about shapefile as a whole. 
            The bounds are read from the file header, and may be inaccurate if the file was 
            improperly generated.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate()</param>
            <param name="pnEntities">A pointer to an integer into which the number of 
            entities/structures should be placed. May be NULL.</param>
            <param name="pshpType">A pointer to an integer into which the ShapeType of this file 
            should be placed. Shapefiles may contain either ShapeType.Point, ShapeType.PolyLine, ShapeType.Polygon or 
            ShapeType.MultiPoint entities. This may be NULL.</param>
            <param name="adfMinBound">The X, Y, Z and M minimum values will be placed into this 
            four entry array. This may be NULL. </param>
            <param name="adfMaxBound">The X, Y, Z and M maximum values will be placed into this 
            four entry array. This may be NULL.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPReadObject(System.IntPtr,System.Int32)">
            <summary>
            The SHPReadObject() call is used to read a single structure, or entity from the shapefile. 
            See the definition of the SHPObject structure for detailed information on fields of a SHPObject. 
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate().</param>
            <param name="iShape">The entity number of the shape to read. Entity numbers are between 0 
            and nEntities-1 (as returned by SHPGetInfo()).</param>
            <returns>SHPObject</returns>
            <remarks>
            SHPObject's returned from SHPReadObject() should be deallocated with SHPDestroyShape(). 
            SHPReadObject() will return NULL if an illegal iShape value is requested. 
            Note that the bounds placed into the SHPObject are those read from the file, and may not be correct. 
            For points the bounds are generated from the single point since bounds aren't normally provided 
            for point types. Generally the shapes returned will be of the type of the file as a whole. 
            However, any file may also contain type ShapeType.NullShape shapes which will have no geometry. 
            Generally speaking applications should skip rather than preserve them, as they usually 
            represented interactively deleted shapes.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPWriteObject(System.IntPtr,System.Int32,MapTools.ShapeLib.SHPObject)">
            <summary>
            The SHPWriteObject() call is used to write a single structure, or entity to the shapefile. 
            See the definition of the SHPObject structure for detailed information on fields of a SHPObject.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen("r+") or SHPCreate().</param>
            <param name="iShape">The entity number of the shape to write. 
            A value of -1 should be used for new shapes. </param>
            <param name="psObject">The shape to write to the file. This should have been created with SHPCreateObject(), 
            or SHPCreateSimpleObject().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPDestroyObject(MapTools.ShapeLib.SHPObject)">
            <summary>
            This function should be used to deallocate the resources associated with a SHPObject 
            when it is no longer needed, including those created with SHPCreateSimpleObject(), 
            SHPCreateObject() and returned from SHPReadObject().
            </summary>
            <param name="psObject">The object to deallocate.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPComputeExtents(MapTools.ShapeLib.SHPObject)">
            <summary>
            This function will recompute the extents of this shape, replacing the existing values 
            of the dfXMin, dfYMin, dfZMin, dfMMin, dfXMax, dfYMax, dfZMax, and dfMMax values based 
            on the current set of vertices for the shape. This function is automatically called by 
            SHPCreateObject() but if the vertices of an existing object are altered it should be 
            called again to fix up the extents.
            </summary>
            <param name="psObject">An existing shape object to be updated in place.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateObject(MapTools.ShapeLib.ShapeType,System.Int32,System.Int32,System.Int32[],MapTools.ShapeLib.PartType[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            The SHPCreateObject() function allows for the creation of objects (shapes). 
            This is normally used so that the SHPObject can be passed to SHPWriteObject() 
            to write it to the file.
            </summary>
            <param name="shpType">The ShapeType of the object to be created, such as ShapeType.Point, or ShapeType.Polygon.</param>
            <param name="nShapeId">The shapeid to be recorded with this shape.</param>
            <param name="nParts">The number of parts for this object. If this is zero for PolyLine, 
            or Polygon type objects, a single zero valued part will be created internally.</param>
            <param name="panPartStart">The list of zero based start vertices for the rings 
            (parts) in this object. The first should always be zero. This may be NULL if nParts is 0.</param>
            <param name="paPartType">The type of each of the parts. This is only meaningful for MultiPatch files. 
            For all other cases this may be NULL, and will be assumed to be PartType.Ring.</param>
            <param name="nVertices">The number of vertices being passed in padfX, padfY, and padfZ. </param>
            <param name="adfX">An array of nVertices X coordinates of the vertices for this object.</param>
            <param name="adfY">An array of nVertices Y coordinates of the vertices for this object.</param>
            <param name="adfZ">An array of nVertices Z coordinates of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <param name="adfM">An array of nVertices M (measure values) of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <returns>SHPObject</returns>
            <remarks>
            The SHPDestroyObject() function should be used to free 
            resources associated with an object allocated with SHPCreateObject(). This function 
            computes a bounding box for the SHPObject from the given vertices.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateSimpleObject(MapTools.ShapeLib.ShapeType,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            The SHPCreateSimpleObject() function allows for the convenient creation of simple objects. 
            This is normally used so that the SHPObject can be passed to SHPWriteObject() to write it 
            to the file. The simple object creation API assumes an M (measure) value of zero for each vertex. 
            For complex objects (such as polygons) it is assumed that there is only one part, and that it 
            is of the default type (PartType.Ring). Use the SHPCreateObject() function for more sophisticated 
            objects. 
            </summary>
            <param name="shpType">The ShapeType of the object to be created, such as ShapeType.Point, or ShapeType.Polygon.</param>
            <param name="nVertices">The number of vertices being passed in padfX, padfY, and padfZ.</param>
            <param name="adfX">An array of nVertices X coordinates of the vertices for this object.</param>
            <param name="adfY">An array of nVertices Y coordinates of the vertices for this object.</param>
            <param name="adfZ">An array of nVertices Z coordinates of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <returns>SHPObject</returns>
            <remarks>
            The SHPDestroyObject() function should be used to free resources associated with an 
            object allocated with SHPCreateSimpleObject().
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPClose(System.IntPtr)">
            <summary>
            The SHPClose() function will close the .shp and .shx files, and flush all outstanding header 
            information to the files. It will also recover resources associated with the handle. 
            After this call the hSHP handle cannot be used again.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate().</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTypeName(MapTools.ShapeLib.ShapeType)">
            <summary>
            Translates a ShapeType.* constant into a named shape type (Point, PointZ, Polygon, etc.)
            </summary>
            <param name="shpType">ShapeType enum</param>
            <returns>string</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPPartTypeName(MapTools.ShapeLib.PartType)">
            <summary>
            Translates a PartType enum into a named part type (Ring, Inner Ring, etc.)
            </summary>
            <param name="partType">PartType enum</param>
            <returns>string</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateTree(System.IntPtr,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Creates a quadtree index
            </summary>
            <param name="hSHP"></param>
            <param name="nDimension"></param>
            <param name="nMaxDepth"></param>
            <param name="adfBoundsMin"></param>
            <param name="adfBoundsMax"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPDestroyTree(System.IntPtr)">
            <summary>
            Releases resources associated with quadtree
            </summary>
            <param name="hTree"></param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeAddShapeId(System.IntPtr,MapTools.ShapeLib.SHPObject)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <param name="psObject"></param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeTrimExtraNodes(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeFindLikelyShapes(System.IntPtr,System.Double[],System.Double[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <param name="adfBoundsMin"></param>
            <param name="adfBoundsMax"></param>
            <param name="pnShapeCount"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCheckBoundsOverlap(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="adfBox1Min"></param>
            <param name="adfBox1Max"></param>
            <param name="adfBox2Min"></param>
            <param name="adfBox2Max"></param>
            <param name="nDimension"></param>
            <returns>int</returns>
        </member>
        <member name="T:MapTools.ShapeLib.DBFFieldType">
            <summary>
            xBase field type enumeration
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTString">
            <summary>String data type</summary> 
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTInteger">
            <summary>Integer data type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTDouble">
            <summary>Double data type</summary> 
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTLogical">
            <summary>Logical data type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTInvalid">
            <summary>Invalid data type</summary>
        </member>
        <member name="M:MapTools.ShapeLib.DBFOpen(System.String,System.String)">
            <summary>
            The DBFOpen() function should be used to establish access to an existing xBase format table file. 
            The returned DBFHandle is passed to other access functions, and DBFClose() should be invoked 
            to recover resources, and flush changes to disk when complete. The DBFCreate() function should 
            called to create new xBase files. As a convenience, DBFOpen() can be called with the name of a 
            .shp or .shx file, and it will figure out the name of the related .dbf file.
            </summary>
            <param name="szDBFFile">The name of the xBase (.dbf) file to access.</param>
            <param name="szAccess">The fopen() style access string. At this time only "rb" (read-only binary) 
            and "rb+" (read/write binary) should be used.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFCreate(System.String)">
            <summary>
            The DBFCreate() function creates a new xBase format file with the given name, 
            and returns an access handle that can be used with other DBF functions. 
            The newly created file will have no fields, and no records. 
            Fields should be added with DBFAddField() before any records add written. 
            </summary>
            <param name="szDBFFile">The name of the xBase (.dbf) file to create.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldCount(System.IntPtr)">
            <summary>
            The DBFGetFieldCount() function returns the number of fields currently defined 
            for the indicated xBase file. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetRecordCount(System.IntPtr)">
            <summary>
            The DBFGetRecordCount() function returns the number of records that exist on the xBase 
            file currently. Note that with shape files one xBase record exists for each shape in the 
            .shp/.shx files.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFAddField(System.IntPtr,System.String,MapTools.ShapeLib.DBFFieldType,System.Int32,System.Int32)">
            <summary>
            The DBFAddField() function is used to add new fields to an existing xBase file opened with DBFOpen(), 
            or created with DBFCreate(). Note that fields can only be added to xBase files with no records, 
            though this is limitation of this API, not of the file format. Returns the field number of the 
            new field, or -1 if the addition of the field failed
            </summary>
            <param name="hDBF">The access handle for the file to be updated, as returned by DBFOpen(), 
            or DBFCreate().</param>
            <param name="szFieldName">The name of the new field. At most 11 character will be used. 
            In order to use the xBase file in some packages it may be necessary to avoid some special 
            characters in the field names such as spaces, or arithmetic operators.</param>
            <param name="eType">One of FTString, FTInteger, FTLogical, or FTDouble in order to establish the 
            type of the new field. Note that some valid xBase field types cannot be created such as date fields.</param>
            <param name="nWidth">The width of the field to be created. For FTString fields this establishes 
            the maximum length of string that can be stored. For FTInteger this establishes the number of 
            digits of the largest number that can be represented. For FTDouble fields this in combination 
            with the nDecimals value establish the size, and precision of the created field.</param>
            <param name="nDecimals">The number of decimal places to reserve for FTDouble fields. 
            For all other field types this should be zero. For instance with nWidth=7, and nDecimals=3 
            numbers would be formatted similarly to `123.456'.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldInfo(System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
            The DBFGetFieldInfo() returns the type of the requested field, which is one of the DBFFieldType 
            enumerated values. As well, the field name, and field width information can optionally be returned. 
            The field type returned does not correspond one to one with the xBase field types. 
            For instance the xBase field type for Date will just be returned as being FTInteger. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by DBFOpen(), 
            or DBFCreate().</param>
            <param name="iField">The field to be queried. This should be a number between 0 and n-1, 
            where n is the number fields on the file, as returned by DBFGetFieldCount().</param>
            <param name="szFieldName">If this pointer is not NULL the name of the requested field 
            will be written to this location. The pszFieldName buffer should be at least 12 character 
            is size in order to hold the longest possible field name of 11 characters plus a terminating 
            zero character.</param>
            <param name="pnWidth">If this pointer is not NULL, the width of the requested field will be 
            returned in the int pointed to by pnWidth. This is the width in characters. </param>
            <param name="pnDecimals">If this pointer is not NULL, the number of decimal places precision 
            defined for the field will be returned. This is zero for integer fields, or non-numeric fields.</param>
            <returns>DBFFieldType</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldIndex(System.IntPtr,System.String)">
            <summary>
            Returns the index of the field matching this name, or -1 on failure. 
            The comparison is case insensitive. However, lengths must match exactly.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned 
            by DBFOpen(), or DBFCreate().</param>
            <param name="szFieldName">Name of the field to search for.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadIntegerAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadIntegerAttribute() will read the value of one field and return it as an integer. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>int</returns>
            <remarks>
            This can be used even with FTString fields, though the returned value will be zero if not 
            interpretable as a number.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadDoubleAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadDoubleAttribute() will read the value of one field and return it as a double. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>double</returns>
            <remarks>
            This can be used even with FTString fields, though the returned value will be zero if not 
            interpretable as a number.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadStringAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadStringAttribute() will read the value of one field and return it as a string. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>string</returns>
            <remarks>
            This function may be used on any field type (including FTInteger and FTDouble) and will 
            return the string representation stored in the .dbf file. The returned pointer is to an 
            internal buffer which is only valid untill the next DBF function call. It's contents may 
            be copied with normal string functions such as strcpy(), or strdup(). If the 
            TRIM_DBF_WHITESPACE macro is defined in shapefil.h (it is by default) then all leading and 
            trailing space (ASCII 32) characters will be stripped before the string is returned.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadLogicalAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadLogicalAttribute() will read the value of one field and return it as a boolean. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>bool</returns>
            <remarks>
            This can be used with FTString fields, in which case it returns TRUE if the string="T";
            otherwise it returns FALSE.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFIsAttributeNULL(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            This function will return TRUE if the indicated field is NULL valued otherwise FALSE. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>int</returns>
            <remarks>
            Note that NULL fields are represented in the .dbf file as having all spaces in the field. 
            Reading NULL fields will result in a value of 0.0 or an empty string with the other 
            DBFRead*Attribute() functions.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteIntegerAttribute(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The DBFWriteIntegerAttribute() function is used to write a value to a numeric field 
            (FTInteger, or FTDouble). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned. If the value is too large to fit in the field, 
            it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="nFieldValue">The integer value that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteDoubleAttribute(System.IntPtr,System.Int32,System.Int32,System.Double)">
            <summary>
            The DBFWriteDoubleAttribute() function is used to write a value to a numeric field 
            (FTInteger, or FTDouble). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned. If the value is too large to fit in the field, 
            it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="dFieldValue">The floating point value that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteStringAttribute(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            The DBFWriteStringAttribute() function is used to write a value to a string field (FString). 
            If the write succeeds the value TRUE willbe returned, otherwise FALSE will be returned. 
            If the value is too large to fit in the field, it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="szFieldValue">The string to be written to the field.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteNULLAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFWriteNULLAttribute() function is used to clear the indicated field to a NULL value. 
            In the .dbf file this is represented by setting the entire field to spaces. If the write 
            succeeds the value TRUE will be returned, otherwise FALSE will be returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteLogicalAttribute(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The DBFWriteLogicalAttribute() function is used to write a boolean value to a logical field 
            (FTLogical). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="bFieldValue">The boolean value to be written to the field.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadTuple(System.IntPtr,System.Int32)">
            <summary>
            Reads the attribute fields of a record.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="hEntity">The entity (record) number to be read</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteTuple(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes an attribute record to the file.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="hEntity">The zero-based entity (record) number to be written.  If hEntity equals 
            the number of records a new record is appended.</param>
            <param name="pRawTuple">Pointer to the tuple to be written</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFCloneEmpty(System.IntPtr,System.String)">
            <summary>
            Copies the data structure of an xBase file to another xBase file.  
            Data are not copied.  Use Read/WriteTuple functions to selectively copy data.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="szFilename">The name of the xBase (.dbf) file to create.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFClose(System.IntPtr)">
            <summary>
            The DBFClose() function will close the indicated xBase file (opened with DBFOpen(), 
            or DBFCreate()), flushing out all information to the file on disk, and recovering 
            any resources associated with having the file open. The file handle (hDBF) should not 
            be used again with the DBF API after calling DBFClose().
            </summary>
            <param name="hDBF">The access handle for the file to be closed.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetNativeFieldType(System.IntPtr,System.Int32)">
            <summary>
            This function returns the DBF type code of the indicated field.
            </summary>
            <param name="hDBF">The access handle for the file.</param>
            <param name="iField">The field index to query.</param>
            <returns>sbyte</returns>
            <remarks>
            Return value will be one of:
            <list type="bullet">
            <item><term>C</term><description>String</description></item>
            <item><term>D</term><description>Date</description></item>
            <item><term>F</term><description>Float</description></item>
            <item><term>N</term><description>Numeric, with or without decimal</description></item>
            <item><term>L</term><description>Logical</description></item>
            <item><term>M</term><description>Memo: 10 digits .DBT block ptr</description></item>
            <item><term> </term><description>field out of range</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.#ctor">
            <summary>
            private constructor:  no instantiation needed or permitted
            </summary>
        </member>
        <member name="T:Stars3D.Plugin.Stars3D">
            <summary>
            The plugin (main class)
            </summary>
        </member>
        <member name="F:Stars3D.Plugin.Stars3D.LayerName">
            <summary>
            Name displayed in layer manager
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3D.Load">
            <summary>
            Plugin entry point - All plugins must implement this function
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3D.Unload">
            <summary>
            Unloads our plugin
            </summary>
        </member>
        <member name="T:Stars3D.Plugin.Stars3DLayer">
            <summary>
            Sky dome
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.#ctor(System.String,System.String,WorldWind.WorldWindow)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.ReadSettings">
            <summary>
            Read saved settings from ini file
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.SaveSettings">
            <summary>
            Save settings in ini file
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.Render(WorldWind.DrawArgs)">
            <summary>
            This is where we do our rendering 
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Gets called when user left clicks.
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Fills the context menu with menu items specific to the layer.
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.OnPropertiesClick(System.Object,System.EventArgs)">
            <summary>
            Properties context menu clicked.
            </summary>
        </member>
        <member name="T:Stars3D.Plugin.Stars3DLayer.propertiesDialog">
            <summary>
            Properties Dialog
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.propertiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Stars3D.Plugin.Stars3DLayer.ColoredSphere(Microsoft.DirectX.Direct3D.Device,System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a PositionColored sphere centered on zero
            </summary>
            <param name="device">The current direct3D drawing device.</param>
            <param name="radius">The sphere's radius</param>
            <param name="slices">Number of slices (Horizontal resolution).</param>
            <param name="stacks">Number of stacks. (Vertical resolution)</param>
            <returns></returns>
            <remarks>
            Number of vertices in the sphere will be (slices+1)*(stacks+1)<br/>
            Number of faces	:slices*stacks*2
            Number of Indexes	: Number of faces * 3;
            </remarks>
        </member>
    </members>
</doc>
