//
// OnlineResourceType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_1_1
{
	public class OnlineResourceType : Altova.Xml.Node
	{
		#region Forward constructors
		public OnlineResourceType() : base() { SetCollectionParents(); }
		public OnlineResourceType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public OnlineResourceType(XmlNode node) : base(node) { SetCollectionParents(); }
		public OnlineResourceType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xmlns:xlink"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xmlns:xlink", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xlink:type"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xlink:type", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "xlink:href"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "xlink:href", i);
				InternalAdjustPrefix(DOMNode, false);
			}
		}


		#region xmlns_xlink accessor methods
		public int Getxmlns_xlinkMinCount()
		{
			return 0;
		}

		public int xmlns_xlinkMinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getxmlns_xlinkMaxCount()
		{
			return 1;
		}

		public int xmlns_xlinkMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxmlns_xlinkCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xmlns:xlink");
		}

		public int xmlns_xlinkCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xmlns:xlink");
			}
		}

		public bool Hasxmlns_xlink()
		{
			return HasDomChild(NodeType.Attribute, "", "xmlns:xlink");
		}

		public SchemaString Getxmlns_xlinkAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xmlns:xlink", index)));
		}

		public SchemaString Getxmlns_xlink()
		{
			return Getxmlns_xlinkAt(0);
		}

		public SchemaString xmlns_xlink
		{
			get
			{
				return Getxmlns_xlinkAt(0);
			}
		}

		public void Removexmlns_xlinkAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xmlns:xlink", index);
		}

		public void Removexmlns_xlink()
		{
			while (Hasxmlns_xlink())
				Removexmlns_xlinkAt(0);
		}

		public void Addxmlns_xlink(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xmlns:xlink", newValue.ToString());
		}

		public void Insertxmlns_xlinkAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xmlns:xlink", index, newValue.ToString());
		}

		public void Replacexmlns_xlinkAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xmlns:xlink", index, newValue.ToString());
		}
		#endregion // xmlns_xlink accessor methods

		#region xmlns_xlink collection
        public xmlns_xlinkCollection	Myxmlns_xlinks = new xmlns_xlinkCollection( );

        public class xmlns_xlinkCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xmlns_xlinkEnumerator GetEnumerator() 
			{
				return new xmlns_xlinkEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xmlns_xlinkEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public xmlns_xlinkEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xmlns_xlinkCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxmlns_xlinkAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xmlns_xlink collection

		#region xlink_type accessor methods
		public int Getxlink_typeMinCount()
		{
			return 0;
		}

		public int xlink_typeMinCount
		{
			get
			{
				return 0;
			}
		}

		public int Getxlink_typeMaxCount()
		{
			return 1;
		}

		public int xlink_typeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxlink_typeCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xlink:type");
		}

		public int xlink_typeCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xlink:type");
			}
		}

		public bool Hasxlink_type()
		{
			return HasDomChild(NodeType.Attribute, "", "xlink:type");
		}

		public SchemaString Getxlink_typeAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xlink:type", index)));
		}

		public SchemaString Getxlink_type()
		{
			return Getxlink_typeAt(0);
		}

		public SchemaString xlink_type
		{
			get
			{
				return Getxlink_typeAt(0);
			}
		}

		public void Removexlink_typeAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xlink:type", index);
		}

		public void Removexlink_type()
		{
			while (Hasxlink_type())
				Removexlink_typeAt(0);
		}

		public void Addxlink_type(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xlink:type", newValue.ToString());
		}

		public void Insertxlink_typeAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xlink:type", index, newValue.ToString());
		}

		public void Replacexlink_typeAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xlink:type", index, newValue.ToString());
		}
		#endregion // xlink_type accessor methods

		#region xlink_type collection
        public xlink_typeCollection	Myxlink_types = new xlink_typeCollection( );

        public class xlink_typeCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xlink_typeEnumerator GetEnumerator() 
			{
				return new xlink_typeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xlink_typeEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public xlink_typeEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xlink_typeCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxlink_typeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xlink_type collection

		#region xlink_href accessor methods
		public int Getxlink_hrefMinCount()
		{
			return 1;
		}

		public int xlink_hrefMinCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxlink_hrefMaxCount()
		{
			return 1;
		}

		public int xlink_hrefMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int Getxlink_hrefCount()
		{
			return DomChildCount(NodeType.Attribute, "", "xlink:href");
		}

		public int xlink_hrefCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "xlink:href");
			}
		}

		public bool Hasxlink_href()
		{
			return HasDomChild(NodeType.Attribute, "", "xlink:href");
		}

		public SchemaString Getxlink_hrefAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "xlink:href", index)));
		}

		public SchemaString Getxlink_href()
		{
			return Getxlink_hrefAt(0);
		}

		public SchemaString xlink_href
		{
			get
			{
				return Getxlink_hrefAt(0);
			}
		}

		public void Removexlink_hrefAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "xlink:href", index);
		}

		public void Removexlink_href()
		{
			while (Hasxlink_href())
				Removexlink_hrefAt(0);
		}

		public void Addxlink_href(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "xlink:href", newValue.ToString());
		}

		public void Insertxlink_hrefAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "xlink:href", index, newValue.ToString());
		}

		public void Replacexlink_hrefAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "xlink:href", index, newValue.ToString());
		}
		#endregion // xlink_href accessor methods

		#region xlink_href collection
        public xlink_hrefCollection	Myxlink_hrefs = new xlink_hrefCollection( );

        public class xlink_hrefCollection: IEnumerable
        {
            OnlineResourceType parent;
            public OnlineResourceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public xlink_hrefEnumerator GetEnumerator() 
			{
				return new xlink_hrefEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class xlink_hrefEnumerator: IEnumerator 
        {
			int nIndex;
			OnlineResourceType parent;
			public xlink_hrefEnumerator(OnlineResourceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.xlink_hrefCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.Getxlink_hrefAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // xlink_href collection

        private void SetCollectionParents()
        {
            Myxmlns_xlinks.Parent = this; 
            Myxlink_types.Parent = this; 
            Myxlink_hrefs.Parent = this; 
	}
}
}
