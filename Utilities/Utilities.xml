<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Utilities</name>
    </assembly>
    <members>
        <member name="T:Utility.BindingsCheck">
            <summary>
            BindingsCheck contains utility functions to determine whether the user is
            likely to encounter the "50 bindings problem" - a limitation in the 
            pre-SP1 .NET runtime 1.1 that makes downloads impossible if more than
            50 protocol bindings exist. 
            The only public routine here is "FiftyBindingsWarning" - Checks if the 
            user has more than 50 protocol bindings and a CLR version that has the corresponding
            problem. If yes, a message is displayed to the user and (s)he is asked whether the .NET runtime
            service pack 1 download page should be opened.
            </summary>
        </member>
        <member name="M:Utility.BindingsCheck.#ctor">
            <summary>
            Constructor, only static methods in this class
            </summary>
        </member>
        <member name="M:Utility.BindingsCheck.FiftyBindingsWarning">
            <summary>
            Checks if the user has more than 50 protocol bindings and a CLR version that has the corresponding
            problem. If yes, a message is displayed to the user and (s)he is asked whether the .NET runtime
            service pack 1 download page should be opened.
            </summary>
            <returns>true if the user opted to go to the SP1 download page - this means that World Wind should
            NOT continue launching</returns>
        </member>
        <member name="T:Utility.DataProtector">
            <summary>
            Utility class to provide secure storage of data
            </summary>
        </member>
        <member name="T:Utility.DataProtector.Store">
            <summary>
            this enum is used to control whether a user-specific or machine-specific
            location is used to store sensitive data.
            </summary>
        </member>
        <member name="M:Utility.DataProtector.#ctor(Utility.DataProtector.Store)">
            <summary>
            Initializes a new instance of the <see cref= "T:Utility.DataProtector"/> class. 
            </summary>
            <param name="tempStore">Store type - see enum Store for valid values</param>
        </member>
        <member name="M:Utility.DataProtector.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            Encrypt byte data
            </summary>
            <param name="plainText">The byte data to be encoded</param>
            <param name="optionalEntropy">Additional entropy, recommended for machine-specific case</param>
            <returns>Returns a byte array with the encoded data</returns>
        </member>
        <member name="M:Utility.DataProtector.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            Decrypt byte data
            </summary>
            <param name="cipherText">Data to be decoded</param>
            <param name="optionalEntropy">Additional entropy, recommended for machine-specific case</param>
            <returns>Returns a byte array with the encoded data</returns>
        </member>
        <member name="M:Utility.DataProtector.EncryptStringToBase64(System.String)">
            <summary>
            Encode data given as string, return as Base64d byte array
            </summary>
            <param name="plainText">The string to be encoded</param>
            <returns>The resulting encoded string</returns>
        </member>
        <member name="M:Utility.DataProtector.DecryptBase64AsString(System.String)">
            <summary>
            Decode encrypted data provided as Base64 string
            </summary>
            <param name="cypherText">The encoded data</param>
            <returns>The original string</returns>
        </member>
        <member name="M:Utility.DataProtector.TransparentDecrypt(System.String)">
            <summary>
            Transparently decrypts data - if prefix "crypt:" is not present,
            data will be returned verbatim. This is also done if encryption fails, e.g.
            because the operating system does not support it.
            </summary>
            <param name="cypherText">The (potentially) encrypted string</param>
            <returns>Decrypted string or unchanged input</returns>
        </member>
        <member name="M:Utility.DataProtector.TransparentEncrypt(System.String)">
            <summary>
            Encrypts data, adding a "crypt:" prefix to identify it as such.
            Should encryption fail e.g. because the operating system does not support it,
            the plaintext is returned verbatim.
            </summary>
            <param name="plainText">Plain text to be encrypted</param>
            <returns>Encrypted plaintext with "crypt:" prefix, or unchanged input</returns>
        </member>
        <member name="T:Utility.ErrorDisplay">
            <summary>
            Summary description for ErrorDisplay.
            </summary>
        </member>
        <member name="F:Utility.ErrorDisplay.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Utility.ErrorDisplay.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:Utility.ErrorDisplay"/> class 
            with default data.
            </summary>
        </member>
        <member name="M:Utility.ErrorDisplay.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Utility.ErrorDisplay.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Utility.Log">
            <summary>
            Debug log functionality
            </summary>
        </member>
        <member name="M:Utility.Log.#ctor">
            <summary>
            Static class (Only static members)
            </summary>
        </member>
        <member name="M:Utility.Log.Write(System.Int32,System.String,System.String)">
            <summary>
            Logs a message to the system log. All messages trigger LogEvents, but only messages with level $lt;= Log.Level are recorded to the log file.
            </summary>
            <param name="level">Log level. 0 (highest) .. 9 (lowest). See Log.Level for filtering</param>
            <param name="category">1 to 4 character long tag for categorizing the log entries.
            If the category is longer than 4 characters it will be clipped.</param>
            <param name="message">The actual log messages to be written.</param>
        </member>
        <member name="M:Utility.Log.DebugWrite(System.String,System.String)">
            <summary>
            Logs a message to the system log only in debug builds.
            </summary>
            <param name="category">1 to 4 character long tag for categorizing the log entries.
            If the category is longer than 4 characters it will be clipped.</param>
            <param name="message">The actual log messages to be written.</param>
        </member>
        <member name="M:Utility.Log.Write(System.Int32,System.String)">
            <summary>
            Logs a message to the system log
            </summary>
        </member>
        <member name="M:Utility.Log.DebugWrite(System.Int32,System.String)">
            <summary>
            Logs a message to the system log only in debug builds.
            </summary>
        </member>
        <member name="M:Utility.Log.Write(System.Exception)">
            <summary>
            Writes a log of an exception.
            </summary>
            <param name="caught"></param>
        </member>
        <member name="M:Utility.Log.DebugWrite(System.Exception)">
            <summary>
            Writes a debug log of an exception.
            Only executed in debug builds.
            </summary>
        </member>
        <member name="T:Utility.Win32Message">
            <summary>
            Utility class to retrieve Win32 Error message text.
            This class also provides a mechanism to specify
            additional Win32 DLLs (e.g. winhttp.dll, netmsg.dll) and
            their associated error ranges - messages will automatically
            be pulled from these DLLs when the number is in the 
            corresponding range. 
            </summary>
        </member>
        <member name="M:Utility.Win32Message.#ctor">
            <summary>
            Constructor, static class (only static methods)
            </summary>
        </member>
        <member name="F:Utility.Win32Message.DllDescriptor.firstMessage">
            <summary>
            First message in the range reserved for this DLL
            </summary>
        </member>
        <member name="F:Utility.Win32Message.DllDescriptor.lastMessage">
            <summary>
            Last message in the range reserved for this DLL
            </summary>
        </member>
        <member name="F:Utility.Win32Message.DllDescriptor.dllName">
            <summary>
            The name of the DLL, e.g. "WINHTTP.DLL"
            </summary>
        </member>
        <member name="M:Utility.Win32Message.DllDescriptor.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Describes a DLL that can be searched for error messages
            </summary>
            <param name="first">First error number in the range</param>
            <param name="last">Last error number in the range</param>
            <param name="dll">File name of the associated dll, e.g. WINHTTP.DLL</param>
        </member>
        <member name="M:Utility.Win32Message.GetMessage(System.Int32)">
            <summary>
            Get message string given error number
            </summary>
            <param name="lastError">The error number</param>
            <returns>Associated error message</returns>
        </member>
    </members>
</doc>
