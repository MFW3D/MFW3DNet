//
// ServiceType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class ServiceType : Altova.Xml.Node
	{
		#region Forward constructors
		public ServiceType() : base() { SetCollectionParents(); }
		public ServiceType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ServiceType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ServiceType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Name"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Abstract"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "KeywordList"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "KeywordList", i);
				InternalAdjustPrefix(DOMNode, true);
				new KeywordListType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", i);
				InternalAdjustPrefix(DOMNode, true);
				new OnlineResourceType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation", i);
				InternalAdjustPrefix(DOMNode, true);
				new ContactInformationType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Fees"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Fees", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Name");
		}

		public NameType GetNameAt(int index)
		{
			return new NameType(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index)));
		}

		public NameType GetName()
		{
			return GetNameAt(0);
		}

		public NameType Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(NameType newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Name", newValue.ToString());
		}

		public void InsertNameAt(NameType newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(NameType newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public NameEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public NameType  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Name collection

		#region Title accessor methods
		public int GetTitleMinCount()
		{
			return 1;
		}

		public int TitleMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTitleMaxCount()
		{
			return 1;
		}

		public int TitleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetTitleCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title");
		}

		public int TitleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Title");
			}
		}

		public bool HasTitle()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Title");
		}

		public SchemaString GetTitleAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index)));
		}

		public SchemaString GetTitle()
		{
			return GetTitleAt(0);
		}

		public SchemaString Title
		{
			get
			{
				return GetTitleAt(0);
			}
		}

		public void RemoveTitleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index);
		}

		public void RemoveTitle()
		{
			while (HasTitle())
				RemoveTitleAt(0);
		}

		public void AddTitle(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Title", newValue.ToString());
		}

		public void InsertTitleAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index, newValue.ToString());
		}

		public void ReplaceTitleAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Title", index, newValue.ToString());
		}
		#endregion // Title accessor methods

		#region Title collection
        public TitleCollection	MyTitles = new TitleCollection( );

        public class TitleCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public TitleEnumerator GetEnumerator() 
			{
				return new TitleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class TitleEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public TitleEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.TitleCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetTitleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Title collection

		#region Abstract2 accessor methods
		public int GetAbstract2MinCount()
		{
			return 0;
		}

		public int Abstract2MinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetAbstract2MaxCount()
		{
			return 1;
		}

		public int Abstract2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAbstract2Count()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Abstract");
		}

		public int Abstract2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Abstract");
			}
		}

		public bool HasAbstract2()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Abstract");
		}

		public SchemaString GetAbstract2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index)));
		}

		public SchemaString GetAbstract2()
		{
			return GetAbstract2At(0);
		}

		public SchemaString Abstract2
		{
			get
			{
				return GetAbstract2At(0);
			}
		}

		public void RemoveAbstract2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index);
		}

		public void RemoveAbstract2()
		{
			while (HasAbstract2())
				RemoveAbstract2At(0);
		}

		public void AddAbstract2(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Abstract", newValue.ToString());
		}

		public void InsertAbstract2At(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index, newValue.ToString());
		}

		public void ReplaceAbstract2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Abstract", index, newValue.ToString());
		}
		#endregion // Abstract2 accessor methods

		#region Abstract2 collection
        public Abstract2Collection	MyAbstract2s = new Abstract2Collection( );

        public class Abstract2Collection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Abstract2Enumerator GetEnumerator() 
			{
				return new Abstract2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Abstract2Enumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public Abstract2Enumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Abstract2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetAbstract2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Abstract2 collection

		#region KeywordList accessor methods
		public int GetKeywordListMinCount()
		{
			return 0;
		}

		public int KeywordListMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetKeywordListMaxCount()
		{
			return 1;
		}

		public int KeywordListMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetKeywordListCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "KeywordList");
		}

		public int KeywordListCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "KeywordList");
			}
		}

		public bool HasKeywordList()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "KeywordList");
		}

		public KeywordListType GetKeywordListAt(int index)
		{
			return new KeywordListType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "KeywordList", index));
		}

		public KeywordListType GetKeywordList()
		{
			return GetKeywordListAt(0);
		}

		public KeywordListType KeywordList
		{
			get
			{
				return GetKeywordListAt(0);
			}
		}

		public void RemoveKeywordListAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "KeywordList", index);
		}

		public void RemoveKeywordList()
		{
			while (HasKeywordList())
				RemoveKeywordListAt(0);
		}

		public void AddKeywordList(KeywordListType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "KeywordList", newValue);
		}

		public void InsertKeywordListAt(KeywordListType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "KeywordList", index, newValue);
		}

		public void ReplaceKeywordListAt(KeywordListType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "KeywordList", index, newValue);
		}
		#endregion // KeywordList accessor methods

		#region KeywordList collection
        public KeywordListCollection	MyKeywordLists = new KeywordListCollection( );

        public class KeywordListCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public KeywordListEnumerator GetEnumerator() 
			{
				return new KeywordListEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class KeywordListEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public KeywordListEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.KeywordListCount );
			}
			public KeywordListType  Current 
			{
				get 
				{
					return(parent.GetKeywordListAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // KeywordList collection

		#region OnlineResource accessor methods
		public int GetOnlineResourceMinCount()
		{
			return 1;
		}

		public int OnlineResourceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOnlineResourceMaxCount()
		{
			return 1;
		}

		public int OnlineResourceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetOnlineResourceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource");
		}

		public int OnlineResourceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource");
			}
		}

		public bool HasOnlineResource()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource");
		}

		public OnlineResourceType GetOnlineResourceAt(int index)
		{
			return new OnlineResourceType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", index));
		}

		public OnlineResourceType GetOnlineResource()
		{
			return GetOnlineResourceAt(0);
		}

		public OnlineResourceType OnlineResource
		{
			get
			{
				return GetOnlineResourceAt(0);
			}
		}

		public void RemoveOnlineResourceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "OnlineResource", index);
		}

		public void RemoveOnlineResource()
		{
			while (HasOnlineResource())
				RemoveOnlineResourceAt(0);
		}

		public void AddOnlineResource(OnlineResourceType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "OnlineResource", newValue);
		}

		public void InsertOnlineResourceAt(OnlineResourceType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "OnlineResource", index, newValue);
		}

		public void ReplaceOnlineResourceAt(OnlineResourceType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "OnlineResource", index, newValue);
		}
		#endregion // OnlineResource accessor methods

		#region OnlineResource collection
        public OnlineResourceCollection	MyOnlineResources = new OnlineResourceCollection( );

        public class OnlineResourceCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public OnlineResourceEnumerator GetEnumerator() 
			{
				return new OnlineResourceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class OnlineResourceEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public OnlineResourceEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.OnlineResourceCount );
			}
			public OnlineResourceType  Current 
			{
				get 
				{
					return(parent.GetOnlineResourceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // OnlineResource collection

		#region ContactInformation accessor methods
		public int GetContactInformationMinCount()
		{
			return 0;
		}

		public int ContactInformationMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetContactInformationMaxCount()
		{
			return 1;
		}

		public int ContactInformationMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetContactInformationCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation");
		}

		public int ContactInformationCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation");
			}
		}

		public bool HasContactInformation()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation");
		}

		public ContactInformationType GetContactInformationAt(int index)
		{
			return new ContactInformationType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation", index));
		}

		public ContactInformationType GetContactInformation()
		{
			return GetContactInformationAt(0);
		}

		public ContactInformationType ContactInformation
		{
			get
			{
				return GetContactInformationAt(0);
			}
		}

		public void RemoveContactInformationAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "ContactInformation", index);
		}

		public void RemoveContactInformation()
		{
			while (HasContactInformation())
				RemoveContactInformationAt(0);
		}

		public void AddContactInformation(ContactInformationType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "ContactInformation", newValue);
		}

		public void InsertContactInformationAt(ContactInformationType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "ContactInformation", index, newValue);
		}

		public void ReplaceContactInformationAt(ContactInformationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "ContactInformation", index, newValue);
		}
		#endregion // ContactInformation accessor methods

		#region ContactInformation collection
        public ContactInformationCollection	MyContactInformations = new ContactInformationCollection( );

        public class ContactInformationCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ContactInformationEnumerator GetEnumerator() 
			{
				return new ContactInformationEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ContactInformationEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public ContactInformationEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ContactInformationCount );
			}
			public ContactInformationType  Current 
			{
				get 
				{
					return(parent.GetContactInformationAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // ContactInformation collection

		#region Fees accessor methods
		public int GetFeesMinCount()
		{
			return 0;
		}

		public int FeesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetFeesMaxCount()
		{
			return 1;
		}

		public int FeesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFeesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Fees");
		}

		public int FeesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Fees");
			}
		}

		public bool HasFees()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Fees");
		}

		public SchemaString GetFeesAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Fees", index)));
		}

		public SchemaString GetFees()
		{
			return GetFeesAt(0);
		}

		public SchemaString Fees
		{
			get
			{
				return GetFeesAt(0);
			}
		}

		public void RemoveFeesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Fees", index);
		}

		public void RemoveFees()
		{
			while (HasFees())
				RemoveFeesAt(0);
		}

		public void AddFees(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "Fees", newValue.ToString());
		}

		public void InsertFeesAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Fees", index, newValue.ToString());
		}

		public void ReplaceFeesAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Fees", index, newValue.ToString());
		}
		#endregion // Fees accessor methods

		#region Fees collection
        public FeesCollection	MyFeess = new FeesCollection( );

        public class FeesCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public FeesEnumerator GetEnumerator() 
			{
				return new FeesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FeesEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public FeesEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FeesCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetFeesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Fees collection

		#region AccessConstraints accessor methods
		public int GetAccessConstraintsMinCount()
		{
			return 0;
		}

		public int AccessConstraintsMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetAccessConstraintsMaxCount()
		{
			return 1;
		}

		public int AccessConstraintsMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetAccessConstraintsCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints");
		}

		public int AccessConstraintsCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints");
			}
		}

		public bool HasAccessConstraints()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints");
		}

		public SchemaString GetAccessConstraintsAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints", index)));
		}

		public SchemaString GetAccessConstraints()
		{
			return GetAccessConstraintsAt(0);
		}

		public SchemaString AccessConstraints
		{
			get
			{
				return GetAccessConstraintsAt(0);
			}
		}

		public void RemoveAccessConstraintsAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints", index);
		}

		public void RemoveAccessConstraints()
		{
			while (HasAccessConstraints())
				RemoveAccessConstraintsAt(0);
		}

		public void AddAccessConstraints(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints", newValue.ToString());
		}

		public void InsertAccessConstraintsAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints", index, newValue.ToString());
		}

		public void ReplaceAccessConstraintsAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "AccessConstraints", index, newValue.ToString());
		}
		#endregion // AccessConstraints accessor methods

		#region AccessConstraints collection
        public AccessConstraintsCollection	MyAccessConstraintss = new AccessConstraintsCollection( );

        public class AccessConstraintsCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public AccessConstraintsEnumerator GetEnumerator() 
			{
				return new AccessConstraintsEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class AccessConstraintsEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public AccessConstraintsEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.AccessConstraintsCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetAccessConstraintsAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // AccessConstraints collection

		#region LayerLimit accessor methods
		public int GetLayerLimitMinCount()
		{
			return 0;
		}

		public int LayerLimitMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetLayerLimitMaxCount()
		{
			return 1;
		}

		public int LayerLimitMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLayerLimitCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit");
		}

		public int LayerLimitCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit");
			}
		}

		public bool HasLayerLimit()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit");
		}

		public SchemaLong GetLayerLimitAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit", index)));
		}

		public SchemaLong GetLayerLimit()
		{
			return GetLayerLimitAt(0);
		}

		public SchemaLong LayerLimit
		{
			get
			{
				return GetLayerLimitAt(0);
			}
		}

		public void RemoveLayerLimitAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit", index);
		}

		public void RemoveLayerLimit()
		{
			while (HasLayerLimit())
				RemoveLayerLimitAt(0);
		}

		public void AddLayerLimit(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit", newValue.ToString());
		}

		public void InsertLayerLimitAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit", index, newValue.ToString());
		}

		public void ReplaceLayerLimitAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "LayerLimit", index, newValue.ToString());
		}
		#endregion // LayerLimit accessor methods

		#region LayerLimit collection
        public LayerLimitCollection	MyLayerLimits = new LayerLimitCollection( );

        public class LayerLimitCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LayerLimitEnumerator GetEnumerator() 
			{
				return new LayerLimitEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LayerLimitEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public LayerLimitEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LayerLimitCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetLayerLimitAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // LayerLimit collection

		#region MaxWidth accessor methods
		public int GetMaxWidthMinCount()
		{
			return 0;
		}

		public int MaxWidthMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMaxWidthMaxCount()
		{
			return 1;
		}

		public int MaxWidthMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaxWidthCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth");
		}

		public int MaxWidthCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth");
			}
		}

		public bool HasMaxWidth()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth");
		}

		public SchemaLong GetMaxWidthAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth", index)));
		}

		public SchemaLong GetMaxWidth()
		{
			return GetMaxWidthAt(0);
		}

		public SchemaLong MaxWidth
		{
			get
			{
				return GetMaxWidthAt(0);
			}
		}

		public void RemoveMaxWidthAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth", index);
		}

		public void RemoveMaxWidth()
		{
			while (HasMaxWidth())
				RemoveMaxWidthAt(0);
		}

		public void AddMaxWidth(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth", newValue.ToString());
		}

		public void InsertMaxWidthAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth", index, newValue.ToString());
		}

		public void ReplaceMaxWidthAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxWidth", index, newValue.ToString());
		}
		#endregion // MaxWidth accessor methods

		#region MaxWidth collection
        public MaxWidthCollection	MyMaxWidths = new MaxWidthCollection( );

        public class MaxWidthCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MaxWidthEnumerator GetEnumerator() 
			{
				return new MaxWidthEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MaxWidthEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public MaxWidthEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MaxWidthCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetMaxWidthAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MaxWidth collection

		#region MaxHeight accessor methods
		public int GetMaxHeightMinCount()
		{
			return 0;
		}

		public int MaxHeightMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetMaxHeightMaxCount()
		{
			return 1;
		}

		public int MaxHeightMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetMaxHeightCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight");
		}

		public int MaxHeightCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight");
			}
		}

		public bool HasMaxHeight()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight");
		}

		public SchemaLong GetMaxHeightAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight", index)));
		}

		public SchemaLong GetMaxHeight()
		{
			return GetMaxHeightAt(0);
		}

		public SchemaLong MaxHeight
		{
			get
			{
				return GetMaxHeightAt(0);
			}
		}

		public void RemoveMaxHeightAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight", index);
		}

		public void RemoveMaxHeight()
		{
			while (HasMaxHeight())
				RemoveMaxHeightAt(0);
		}

		public void AddMaxHeight(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight", newValue.ToString());
		}

		public void InsertMaxHeightAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight", index, newValue.ToString());
		}

		public void ReplaceMaxHeightAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "MaxHeight", index, newValue.ToString());
		}
		#endregion // MaxHeight accessor methods

		#region MaxHeight collection
        public MaxHeightCollection	MyMaxHeights = new MaxHeightCollection( );

        public class MaxHeightCollection: IEnumerable
        {
            ServiceType parent;
            public ServiceType Parent
			{
				set
				{
					parent = value;
				}
			}
			public MaxHeightEnumerator GetEnumerator() 
			{
				return new MaxHeightEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class MaxHeightEnumerator: IEnumerator 
        {
			int nIndex;
			ServiceType parent;
			public MaxHeightEnumerator(ServiceType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.MaxHeightCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetMaxHeightAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // MaxHeight collection

        private void SetCollectionParents()
        {
            MyNames.Parent = this; 
            MyTitles.Parent = this; 
            MyAbstract2s.Parent = this; 
            MyKeywordLists.Parent = this; 
            MyOnlineResources.Parent = this; 
            MyContactInformations.Parent = this; 
            MyFeess.Parent = this; 
            MyAccessConstraintss.Parent = this; 
            MyLayerLimits.Parent = this; 
            MyMaxWidths.Parent = this; 
            MyMaxHeights.Parent = this; 
	}
}
}
