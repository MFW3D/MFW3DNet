//
// DCPTypeType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class DCPTypeType : Altova.Xml.Node
	{
		#region Forward constructors
		public DCPTypeType() : base() { SetCollectionParents(); }
		public DCPTypeType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public DCPTypeType(XmlNode node) : base(node) { SetCollectionParents(); }
		public DCPTypeType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "HTTP"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "HTTP", i);
				InternalAdjustPrefix(DOMNode, true);
				new HTTPType(DOMNode).AdjustPrefix();
			}
		}


		#region HTTP accessor methods
		public int GetHTTPMinCount()
		{
			return 1;
		}

		public int HTTPMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHTTPMaxCount()
		{
			return 1;
		}

		public int HTTPMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetHTTPCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "HTTP");
		}

		public int HTTPCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "HTTP");
			}
		}

		public bool HasHTTP()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "HTTP");
		}

		public HTTPType GetHTTPAt(int index)
		{
			return new HTTPType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "HTTP", index));
		}

		public HTTPType GetHTTP()
		{
			return GetHTTPAt(0);
		}

		public HTTPType HTTP
		{
			get
			{
				return GetHTTPAt(0);
			}
		}

		public void RemoveHTTPAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "HTTP", index);
		}

		public void RemoveHTTP()
		{
			while (HasHTTP())
				RemoveHTTPAt(0);
		}

		public void AddHTTP(HTTPType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "HTTP", newValue);
		}

		public void InsertHTTPAt(HTTPType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "HTTP", index, newValue);
		}

		public void ReplaceHTTPAt(HTTPType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "HTTP", index, newValue);
		}
		#endregion // HTTP accessor methods

		#region HTTP collection
        public HTTPCollection	MyHTTPs = new HTTPCollection( );

        public class HTTPCollection: IEnumerable
        {
            DCPTypeType parent;
            public DCPTypeType Parent
			{
				set
				{
					parent = value;
				}
			}
			public HTTPEnumerator GetEnumerator() 
			{
				return new HTTPEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class HTTPEnumerator: IEnumerator 
        {
			int nIndex;
			DCPTypeType parent;
			public HTTPEnumerator(DCPTypeType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.HTTPCount );
			}
			public HTTPType  Current 
			{
				get 
				{
					return(parent.GetHTTPAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // HTTP collection

        private void SetCollectionParents()
        {
            MyHTTPs.Parent = this; 
	}
}
}
