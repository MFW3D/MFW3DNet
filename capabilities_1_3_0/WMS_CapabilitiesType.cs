//
// WMS_CapabilitiesType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class WMS_CapabilitiesType : Altova.Xml.Node
	{
		#region Forward constructors
		public WMS_CapabilitiesType() : base() { SetCollectionParents(); }
		public WMS_CapabilitiesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public WMS_CapabilitiesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public WMS_CapabilitiesType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "version"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "version", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Attribute, "", "updateSequence"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Attribute, "", "updateSequence", i);
				InternalAdjustPrefix(DOMNode, false);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Service"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Service", i);
				InternalAdjustPrefix(DOMNode, true);
				new ServiceType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Capability"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Capability", i);
				InternalAdjustPrefix(DOMNode, true);
				new CapabilityType(DOMNode).AdjustPrefix();
			}
		}


		#region version accessor methods
		public int GetversionMinCount()
		{
			return 0;
		}

		public int versionMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetversionMaxCount()
		{
			return 1;
		}

		public int versionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetversionCount()
		{
			return DomChildCount(NodeType.Attribute, "", "version");
		}

		public int versionCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "version");
			}
		}

		public bool Hasversion()
		{
			return HasDomChild(NodeType.Attribute, "", "version");
		}

		public SchemaString GetversionAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "version", index)));
		}

		public SchemaString Getversion()
		{
			return GetversionAt(0);
		}

		public SchemaString version
		{
			get
			{
				return GetversionAt(0);
			}
		}

		public void RemoveversionAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "version", index);
		}

		public void Removeversion()
		{
			while (Hasversion())
				RemoveversionAt(0);
		}

		public void Addversion(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "version", newValue.ToString());
		}

		public void InsertversionAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "version", index, newValue.ToString());
		}

		public void ReplaceversionAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "version", index, newValue.ToString());
		}
		#endregion // version accessor methods

		#region version collection
        public versionCollection	Myversions = new versionCollection( );

        public class versionCollection: IEnumerable
        {
            WMS_CapabilitiesType parent;
            public WMS_CapabilitiesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public versionEnumerator GetEnumerator() 
			{
				return new versionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class versionEnumerator: IEnumerator 
        {
			int nIndex;
			WMS_CapabilitiesType parent;
			public versionEnumerator(WMS_CapabilitiesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.versionCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetversionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // version collection

		#region updateSequence accessor methods
		public int GetupdateSequenceMinCount()
		{
			return 0;
		}

		public int updateSequenceMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetupdateSequenceMaxCount()
		{
			return 1;
		}

		public int updateSequenceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetupdateSequenceCount()
		{
			return DomChildCount(NodeType.Attribute, "", "updateSequence");
		}

		public int updateSequenceCount
		{
			get
			{
				return DomChildCount(NodeType.Attribute, "", "updateSequence");
			}
		}

		public bool HasupdateSequence()
		{
			return HasDomChild(NodeType.Attribute, "", "updateSequence");
		}

		public SchemaString GetupdateSequenceAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Attribute, "", "updateSequence", index)));
		}

		public SchemaString GetupdateSequence()
		{
			return GetupdateSequenceAt(0);
		}

		public SchemaString updateSequence
		{
			get
			{
				return GetupdateSequenceAt(0);
			}
		}

		public void RemoveupdateSequenceAt(int index)
		{
			RemoveDomChildAt(NodeType.Attribute, "", "updateSequence", index);
		}

		public void RemoveupdateSequence()
		{
			while (HasupdateSequence())
				RemoveupdateSequenceAt(0);
		}

		public void AddupdateSequence(SchemaString newValue)
		{
			AppendDomChild(NodeType.Attribute, "", "updateSequence", newValue.ToString());
		}

		public void InsertupdateSequenceAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Attribute, "", "updateSequence", index, newValue.ToString());
		}

		public void ReplaceupdateSequenceAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Attribute, "", "updateSequence", index, newValue.ToString());
		}
		#endregion // updateSequence accessor methods

		#region updateSequence collection
        public updateSequenceCollection	MyupdateSequences = new updateSequenceCollection( );

        public class updateSequenceCollection: IEnumerable
        {
            WMS_CapabilitiesType parent;
            public WMS_CapabilitiesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public updateSequenceEnumerator GetEnumerator() 
			{
				return new updateSequenceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class updateSequenceEnumerator: IEnumerator 
        {
			int nIndex;
			WMS_CapabilitiesType parent;
			public updateSequenceEnumerator(WMS_CapabilitiesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.updateSequenceCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetupdateSequenceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // updateSequence collection

		#region Service accessor methods
		public int GetServiceMinCount()
		{
			return 1;
		}

		public int ServiceMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetServiceMaxCount()
		{
			return 1;
		}

		public int ServiceMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetServiceCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Service");
		}

		public int ServiceCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Service");
			}
		}

		public bool HasService()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Service");
		}

		public ServiceType GetServiceAt(int index)
		{
			return new ServiceType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Service", index));
		}

		public ServiceType GetService()
		{
			return GetServiceAt(0);
		}

		public ServiceType Service
		{
			get
			{
				return GetServiceAt(0);
			}
		}

		public void RemoveServiceAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Service", index);
		}

		public void RemoveService()
		{
			while (HasService())
				RemoveServiceAt(0);
		}

		public void AddService(ServiceType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "Service", newValue);
		}

		public void InsertServiceAt(ServiceType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Service", index, newValue);
		}

		public void ReplaceServiceAt(ServiceType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Service", index, newValue);
		}
		#endregion // Service accessor methods

		#region Service collection
        public ServiceCollection	MyServices = new ServiceCollection( );

        public class ServiceCollection: IEnumerable
        {
            WMS_CapabilitiesType parent;
            public WMS_CapabilitiesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ServiceEnumerator GetEnumerator() 
			{
				return new ServiceEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ServiceEnumerator: IEnumerator 
        {
			int nIndex;
			WMS_CapabilitiesType parent;
			public ServiceEnumerator(WMS_CapabilitiesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ServiceCount );
			}
			public ServiceType  Current 
			{
				get 
				{
					return(parent.GetServiceAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Service collection

		#region Capability accessor methods
		public int GetCapabilityMinCount()
		{
			return 1;
		}

		public int CapabilityMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCapabilityMaxCount()
		{
			return 1;
		}

		public int CapabilityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCapabilityCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Capability");
		}

		public int CapabilityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "Capability");
			}
		}

		public bool HasCapability()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "Capability");
		}

		public CapabilityType GetCapabilityAt(int index)
		{
			return new CapabilityType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Capability", index));
		}

		public CapabilityType GetCapability()
		{
			return GetCapabilityAt(0);
		}

		public CapabilityType Capability
		{
			get
			{
				return GetCapabilityAt(0);
			}
		}

		public void RemoveCapabilityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "Capability", index);
		}

		public void RemoveCapability()
		{
			while (HasCapability())
				RemoveCapabilityAt(0);
		}

		public void AddCapability(CapabilityType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "Capability", newValue);
		}

		public void InsertCapabilityAt(CapabilityType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "Capability", index, newValue);
		}

		public void ReplaceCapabilityAt(CapabilityType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "Capability", index, newValue);
		}
		#endregion // Capability accessor methods

		#region Capability collection
        public CapabilityCollection	MyCapabilitys = new CapabilityCollection( );

        public class CapabilityCollection: IEnumerable
        {
            WMS_CapabilitiesType parent;
            public WMS_CapabilitiesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CapabilityEnumerator GetEnumerator() 
			{
				return new CapabilityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CapabilityEnumerator: IEnumerator 
        {
			int nIndex;
			WMS_CapabilitiesType parent;
			public CapabilityEnumerator(WMS_CapabilitiesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CapabilityCount );
			}
			public CapabilityType  Current 
			{
				get 
				{
					return(parent.GetCapabilityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Capability collection

        private void SetCollectionParents()
        {
            Myversions.Parent = this; 
            MyupdateSequences.Parent = this; 
            MyServices.Parent = this; 
            MyCapabilitys.Parent = this; 
	}
}
}
