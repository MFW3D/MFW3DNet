//
// RequestType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace capabilities_1_3_0.wms
{
	public class RequestType : Altova.Xml.Node
	{
		#region Forward constructors
		public RequestType() : base() { SetCollectionParents(); }
		public RequestType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public RequestType(XmlNode node) : base(node) { SetCollectionParents(); }
		public RequestType(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities", i);
				InternalAdjustPrefix(DOMNode, true);
				new OperationType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetMap"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetMap", i);
				InternalAdjustPrefix(DOMNode, true);
				new OperationType(DOMNode).AdjustPrefix();
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo", i);
				InternalAdjustPrefix(DOMNode, true);
				new OperationType(DOMNode).AdjustPrefix();
			}
		}


		#region GetCapabilities accessor methods
		public int GetGetCapabilitiesMinCount()
		{
			return 1;
		}

		public int GetCapabilitiesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetCapabilitiesMaxCount()
		{
			return 1;
		}

		public int GetCapabilitiesMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetCapabilitiesCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities");
		}

		public int GetCapabilitiesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities");
			}
		}

		public bool HasGetCapabilities()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities");
		}

		public OperationType GetGetCapabilitiesAt(int index)
		{
			return new OperationType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities", index));
		}

		public OperationType GetGetCapabilities()
		{
			return GetGetCapabilitiesAt(0);
		}

		public OperationType GetCapabilities
		{
			get
			{
				return GetGetCapabilitiesAt(0);
			}
		}

		public void RemoveGetCapabilitiesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetCapabilities", index);
		}

		public void RemoveGetCapabilities()
		{
			while (HasGetCapabilities())
				RemoveGetCapabilitiesAt(0);
		}

		public void AddGetCapabilities(OperationType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "GetCapabilities", newValue);
		}

		public void InsertGetCapabilitiesAt(OperationType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "GetCapabilities", index, newValue);
		}

		public void ReplaceGetCapabilitiesAt(OperationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "GetCapabilities", index, newValue);
		}
		#endregion // GetCapabilities accessor methods

		#region GetCapabilities collection
        public GetCapabilitiesCollection	MyGetCapabilitiess = new GetCapabilitiesCollection( );

        public class GetCapabilitiesCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetCapabilitiesEnumerator GetEnumerator() 
			{
				return new GetCapabilitiesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetCapabilitiesEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetCapabilitiesEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetCapabilitiesCount );
			}
			public OperationType  Current 
			{
				get 
				{
					return(parent.GetGetCapabilitiesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetCapabilities collection

		#region GetMap accessor methods
		public int GetGetMapMinCount()
		{
			return 1;
		}

		public int GetMapMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetMapMaxCount()
		{
			return 1;
		}

		public int GetMapMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetMapCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetMap");
		}

		public int GetMapCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetMap");
			}
		}

		public bool HasGetMap()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "GetMap");
		}

		public OperationType GetGetMapAt(int index)
		{
			return new OperationType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetMap", index));
		}

		public OperationType GetGetMap()
		{
			return GetGetMapAt(0);
		}

		public OperationType GetMap
		{
			get
			{
				return GetGetMapAt(0);
			}
		}

		public void RemoveGetMapAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetMap", index);
		}

		public void RemoveGetMap()
		{
			while (HasGetMap())
				RemoveGetMapAt(0);
		}

		public void AddGetMap(OperationType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "GetMap", newValue);
		}

		public void InsertGetMapAt(OperationType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "GetMap", index, newValue);
		}

		public void ReplaceGetMapAt(OperationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "GetMap", index, newValue);
		}
		#endregion // GetMap accessor methods

		#region GetMap collection
        public GetMapCollection	MyGetMaps = new GetMapCollection( );

        public class GetMapCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetMapEnumerator GetEnumerator() 
			{
				return new GetMapEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetMapEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetMapEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetMapCount );
			}
			public OperationType  Current 
			{
				get 
				{
					return(parent.GetGetMapAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetMap collection

		#region GetFeatureInfo accessor methods
		public int GetGetFeatureInfoMinCount()
		{
			return 0;
		}

		public int GetFeatureInfoMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetGetFeatureInfoMaxCount()
		{
			return 1;
		}

		public int GetFeatureInfoMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetGetFeatureInfoCount()
		{
			return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo");
		}

		public int GetFeatureInfoCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo");
			}
		}

		public bool HasGetFeatureInfo()
		{
			return HasDomChild(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo");
		}

		public OperationType GetGetFeatureInfoAt(int index)
		{
			return new OperationType(GetDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo", index));
		}

		public OperationType GetGetFeatureInfo()
		{
			return GetGetFeatureInfoAt(0);
		}

		public OperationType GetFeatureInfo
		{
			get
			{
				return GetGetFeatureInfoAt(0);
			}
		}

		public void RemoveGetFeatureInfoAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "http://www.opengis.net/wms", "GetFeatureInfo", index);
		}

		public void RemoveGetFeatureInfo()
		{
			while (HasGetFeatureInfo())
				RemoveGetFeatureInfoAt(0);
		}

		public void AddGetFeatureInfo(OperationType newValue)
		{
			AppendDomElement("http://www.opengis.net/wms", "GetFeatureInfo", newValue);
		}

		public void InsertGetFeatureInfoAt(OperationType newValue, int index)
		{
			InsertDomElementAt("http://www.opengis.net/wms", "GetFeatureInfo", index, newValue);
		}

		public void ReplaceGetFeatureInfoAt(OperationType newValue, int index)
		{
			ReplaceDomElementAt("http://www.opengis.net/wms", "GetFeatureInfo", index, newValue);
		}
		#endregion // GetFeatureInfo accessor methods

		#region GetFeatureInfo collection
        public GetFeatureInfoCollection	MyGetFeatureInfos = new GetFeatureInfoCollection( );

        public class GetFeatureInfoCollection: IEnumerable
        {
            RequestType parent;
            public RequestType Parent
			{
				set
				{
					parent = value;
				}
			}
			public GetFeatureInfoEnumerator GetEnumerator() 
			{
				return new GetFeatureInfoEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class GetFeatureInfoEnumerator: IEnumerator 
        {
			int nIndex;
			RequestType parent;
			public GetFeatureInfoEnumerator(RequestType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.GetFeatureInfoCount );
			}
			public OperationType  Current 
			{
				get 
				{
					return(parent.GetGetFeatureInfoAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // GetFeatureInfo collection

        private void SetCollectionParents()
        {
            MyGetCapabilitiess.Parent = this; 
            MyGetMaps.Parent = this; 
            MyGetFeatureInfos.Parent = this; 
	}
}
}
