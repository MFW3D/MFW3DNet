<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorldWind</name>
    </assembly>
    <members>
        <member name="T:WorldWind.NativeMethods">
            <summary>
             Interop functionality for WorldWind namespace
            </summary>
        </member>
        <member name="M:WorldWind.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
            API function to find window based on WindowName and class.
            </summary>
        </member>
        <member name="M:WorldWind.NativeMethods.SendArgs(System.IntPtr,System.String)">
            <summary>
            Sends string arguments to running instance of World Wind.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.PlaceListSettings">
            <summary>
            Implements persistent XML storage of place data
            (Used as a base class to save favorites and history)
            </summary>
        </member>
        <member name="T:WorldWind.PlaceListSettings.MetaDataEntry">
            <summary>
            This class represents one metadatum name/value pair
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.MetaDataEntry.name">
            <summary>
            Meta-datum name
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.MetaDataEntry.value">
            <summary>
            Meta-datum value
            </summary>
        </member>
        <member name="T:WorldWind.PlaceListSettings.PlaceData">
            <summary>
            This class stores fixed place attributes
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.Name">
            <summary>
            The name of the place
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.Lat">
            <summary>
            Latitude in decimal degrees
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.Lon">
            <summary>
            Longitude in decimal degrees
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.PlaceData.metadata">
            <summary>
            A place can have an arbitrary number of associated metadata
            </summary>
        </member>
        <member name="F:WorldWind.PlaceListSettings.places">
            <summary>
            All the places in one array
            </summary>
        </member>
        <member name="T:WorldWind.FavoritesSettings">
            <summary>
            This class is used for persistent XML storage of the users favorites
            </summary>
        </member>
        <member name="M:WorldWind.FavoritesSettings.ToString">
            <summary>
            Override ToString to use "Favorites.xml" as default filename
            </summary>
            <returns></returns>
        </member>
        <member name="T:WorldWind.HistorySettings">
            <summary>
            This class is used for persistent XML storage of the users place visit history
            </summary>
        </member>
        <member name="M:WorldWind.HistorySettings.ToString">
            <summary>
            Override ToString to use "History.xml" as default filename
            </summary>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WplIndexEntry">
            <summary>
            Utility structure representing an index entry
            </summary>
        </member>
        <member name="T:WorldWind.IndexedTiledPlaceNameSet">
            <summary>
            utility class - combines TiledPlacenameSet with corresponding index
            </summary>
        </member>
        <member name="M:WorldWind.IndexedTiledPlaceNameSet.#ctor(LayerSet.Type_TiledPlacenameSet2,WorldWind.WplIndex)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.IndexedTiledPlaceNameSet"/> class. 
            Initializes placenameset and index.
            </summary>
            <param name="pns"></param>
            <param name="idx"></param>
        </member>
        <member name="T:WorldWind.PlaceItem">
            <summary>
            Utility class PlaceItem associates a WorldWindPlacename with its TiledPlacenameset aka "Layer"
            </summary>
        </member>
        <member name="F:WorldWind.PlaceItem.pn">
            <summary>
            Placename info from WorldWind 
            </summary>
        </member>
        <member name="F:WorldWind.PlaceItem.placeDescriptor">
            <summary>
            Associated TiledPlaceNameSe
            </summary>
        </member>
        <member name="P:WorldWind.PlaceItem.Altitude">
            <summary>
            Altitude accessor - either gets altitude from placeDescriptor
            or a default one (22500 currently)
            </summary>
        </member>
        <member name="M:WorldWind.PlaceItem.Goto(WorldWind.WorldWindow)">
            <summary>
            Goes to this place item at its lat/lon and altitude
            </summary>
            <param name="ww"></param>
        </member>
        <member name="M:WorldWind.PlaceItem.GotoURL(WorldWind.WorldWindow)">
            <summary>
            Computes a WorldWind URL (as string)
            </summary>
            <param name="ww"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.IndexedPlace">
            <summary>
            This class is for index generation only - associates an index entry with a placename
            for later sorting
            </summary>
        </member>
        <member name="F:WorldWind.IndexedPlace.indexEntry">
            <summary>
            Index entry for this PlaceItem
            </summary>
        </member>
        <member name="T:WorldWind.PlaceItemComparer">
            <summary>
            Utility class to compare place items for sorting
            </summary>
        </member>
        <member name="M:WorldWind.PlaceItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer.Compare. Will compare the names of
            two PlaceItems
            </summary>
            <param name="x">First PlaceItem to compare</param>
            <param name="y">Second PlaceItem to compare</param>
            <returns>Result of PlaceItem name string comparison</returns>
        </member>
        <member name="T:WorldWind.WplIndex">
            <summary>
            Represents an index for a .WPL file.
            </summary>
        </member>
        <member name="T:WorldWind.WplIndex.IndexEntryToStringComparer">
            <summary>
            Utility class to compare index entries for binary search
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.IndexEntryToStringComparer.#ctor(WorldWind.WplIndex,System.Boolean)">
            <summary>
            Creates a new IndexEntryToStringComparer
            </summary>
            <param name="theIndex">The index the comparer will work withz</param>
            <param name="bPartialAllowed">Set to true if partial matches are allowed.</param>
        </member>
        <member name="M:WorldWind.WplIndex.IndexEntryToStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer.Compare. Will compare either a WplIndexEntry or its numeric index (int)
            to a string (the name being searched for.
            </summary>
            <param name="x">The WplIndexEntry itself or its offset as an int</param>
            <param name="y">The name bein searched for as string</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WplIndex.ProgressReportDelegate">
            <summary>
            Delegate type to report progress. 
            percentComplete is the total progress in % (from 0 to 100),
            currentAction is what is currently being done, e.g. in a multi-phase operation.
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.#ctor(LayerSet.Type_TiledPlacenameSet2,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.WplIndex"/> class. 
            Gets the full path to the list file as parameter
            Note that the constructor will neiter load the index data, nor create it if
            not present - all it does is "get ready" by loading the list of WWP files
            </summary>
            <param name="tps">Placename set (layer) the index is associated with</param>
            <param name="strWplFilePath">The full list file path</param>
        </member>
        <member name="T:WorldWind.WplIndex.MetaDataAction">
            <summary>
            enum for ReadPlaceName: how to handle metadata
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.ReadPlaceName(System.IO.BinaryReader,WorldWind.Renderable.WorldWindPlacename@,WorldWind.WplIndex.MetaDataAction)">
            <summary>
            utility routine: read a place info record from a BinaryReader
            </summary>
            <param name="br">Binary reader to read data from</param>
            <param name="pn">Where to write data</param>
            <param name="metaDataAction">What to do with metadata, read, skip, omit. The difference between skip and omit is that
            the latter is faster, while the former correctly positions to the next record if needed</param>
        </member>
        <member name="P:WorldWind.WplIndex.PlaceCount">
            <summary>
            Gets the number of places currently in this index
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.IsValidIndex(System.Int32)">
            <summary>
            Checks if an int is a valid index
            </summary>
            <param name="n">The value to check for validity</param>
            <returns>True if this index is within the bounds</returns>
        </member>
        <member name="P:WorldWind.WplIndex.IsAvailable">
            <summary>
            True if this index is available (the index file exists)
            </summary>
        </member>
        <member name="P:WorldWind.WplIndex.IsLoaded">
            <summary>
            True if this index is loaded if the index entries are there 
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.CreateIndex(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Creates an index from placeitems
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Load(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Loads an index from file (implicitly known via the name of the wpl file)
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Lock(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Locks the index: makes sure it is loaded and referenced
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Release">
            <summary>
            Releases index entries to give GC a chance to free up memory
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.GetPlaceItem(System.Int32)">
            <summary>
            Given an index position, seeks to and returns place information
            </summary>
            <param name="nIndex">Index of desired place</param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.WplIndex.FindPlaceByName(System.String,System.Boolean)">
            <summary>
             Finds a place given its name.
            </summary>
            <param name="strPlaceName">The name to search for</param>
            <param name="bPartial">If true, will stop at first partial match</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WWListView">
            <summary>
            ListView-derived class that supports dynamically adding columns and sorting.
            </summary>
        </member>
        <member name="T:WorldWind.WWListView.ColumnDescriptor">
            <summary>
            Describes a WWListView column
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_columnName">
            <summary>
            Name of the column as the user will see it
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_attribName">
            <summary>
            Attribute name, used as key
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_width">
            <summary>
            Column width
            </summary>
        </member>
        <member name="F:WorldWind.WWListView.ColumnDescriptor.m_isNumeric">
            <summary>
            Indicates a numeric column that has to be sorted accordingly
            </summary>
        </member>
        <member name="M:WorldWind.WWListView.ColumnDescriptor.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Construct a column descriptor
            </summary>
            <param name="colName">Name of the column</param>
            <param name="attribName">Attribute name, used as key</param>
            <param name="width">Column width</param>
            <param name="isNumeric">If true, column will be sorted numerically</param>
        </member>
        <member name="M:WorldWind.WWListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Handles column click for sorting
            </summary>
            <param name="e">Information about the column clicked</param>
        </member>
        <member name="M:WorldWind.WWListView.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.WWListView"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.WWListView.#ctor(WorldWind.WWListView.ColumnDescriptor[])">
            <summary>
            Initializes a new instance of the WWListView class, with predefined columns
            </summary>
            <param name="columnDescriptors">Array of column descriptors</param>
        </member>
        <member name="M:WorldWind.WWListView.AddKeysAndValues(System.Collections.Hashtable)">
            <summary>
            Add a a List view item via a hashtable with attribute names and values
            </summary>
            <param name="knv">A Hashtable with column attribute names and values</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WWPlaceListView">
            <summary>
            WWListView derived class that implements a listview for places.
            </summary>
        </member>
        <member name="T:WorldWind.WWPlaceListView.AddPlaceDelegate">
            <summary>
            Delegate type to add a place, to prevent multithreading problems
            </summary>
        </member>
        <member name="F:WorldWind.WWPlaceListView.addPlaceDelegate">
            <summary>
            Delegate to add a place, to prevent multithreading problems
            </summary>
        </member>
        <member name="T:WorldWind.WWPlaceListView.WWPlaceMenuItem">
            <summary>
            WWPlaceMenuItem extends MenuItem class with information about required context
            </summary>
        </member>
        <member name="T:WorldWind.WWPlaceListView.WWPlaceMenuItem.RequiredElement">
            <summary>
            Describes what this menu item requires:
            always valid even on empty list, items must be present, 
            single selection must be present, selection must be present
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.WWPlaceMenuItem.Requires">
            <summary>
            Gets/sets the menu item requirements
            </summary>
        </member>
        <member name="M:WorldWind.WWPlaceListView.WWPlaceMenuItem.#ctor(System.String,System.EventHandler,WorldWind.WWPlaceListView.WWPlaceMenuItem.RequiredElement)">
            <summary>
            Creates a new WWPlaceMenuItem given a name, handle, and requirements
            </summary>
            <param name="name">The name of the menu item</param>
            <param name="handler">The event handler that gets called when the item is clicked</param>
            <param name="requires">Elements that need to be present in the list for item to be enabled</param>
        </member>
        <member name="P:WorldWind.WWPlaceListView.SelectedPlaces">
            <summary>
            Returns an array of the place items that are selected in the list
            </summary>
        </member>
        <member name="M:WorldWind.WWPlaceListView.OnDoubleClick(System.EventArgs)">
            <summary>
            A doubleclick goes to the corresponding place and
            also adds it to the history list
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.#ctor">
            <summary>
            Creates a new WWPlaceListView object, initializing place-specific columns and menus
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.Favorites">
            <summary>
            Gets/sets the WWPlaceListView displaying the favorites
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.RecentFinds">
            <summary>
            Gets/sets the WWPlaceListView displaying the history aka Recent Finds
            </summary>
        </member>
        <member name="P:WorldWind.WWPlaceListView.WorldWindow">
            <summary>
            Gets/sets the WorldWindow object this PlaceList is associated with (e.g. for Goto functionality)
            </summary>
        </member>
        <member name="M:WorldWind.WWPlaceListView.AddPlace(WorldWind.PlaceItem)">
            <summary>
            Adds a place given a PlaceItem
            </summary>
            <param name="pi">PlaceItem class describing the place</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.LoadFromGpx(System.String)">
            <summary>
            Loads places from a file in GPX format, given pathname
            </summary>
            <param name="strGpxPath">The file (with full path) in GPX format to load from</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.SaveToGpx(System.String)">
            <summary>
             Saves places to a file in GPX format, given pathname
            </summary>
            <param name="strGpxPath">The file (with full path) to save to</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.FillSettingsFromList(WorldWind.PlaceListSettings)">
            <summary>
            Fills a PlaceListSettings class (used to serialize places) with all the places in the list
            </summary>
            <param name="pls">The PlaceListSettings class that will receive the places</param>
        </member>
        <member name="M:WorldWind.WWPlaceListView.FillListFromSettings(WorldWind.PlaceListSettings)">
            <summary>
            Fills the list with all the places in a PlaceListSettings class (used to serialize places)
            </summary>
            <param name="pls">The PlaceListSettings class that contains all the places</param>
        </member>
        <member name="T:WorldWind.Angle">
            <summary>
            A geometric angle
            </summary>
        </member>
        <member name="M:WorldWind.Angle.FromRadians(System.Double)">
            <summary>
            Creates a new angle from angle in radians.
            </summary>
        </member>
        <member name="M:WorldWind.Angle.FromDegrees(System.Double)">
            <summary>
            Creates a new angle from angle in degrees.
            </summary>
        </member>
        <member name="F:WorldWind.Angle.Zero">
            <summary>
            A zeroed angle
            </summary>
        </member>
        <member name="F:WorldWind.Angle.MinValue">
            <summary>
            Minimum value for angle
            </summary>
        </member>
        <member name="F:WorldWind.Angle.MaxValue">
            <summary>
            Maximum value for angle
            </summary>
        </member>
        <member name="F:WorldWind.Angle.NaN">
            <summary>
            Angle containing Not a Number
            </summary>
        </member>
        <member name="M:WorldWind.Angle.Abs(WorldWind.Angle)">
            <summary>
            Returns the absolute value of the specified angle
            </summary>
        </member>
        <member name="M:WorldWind.Angle.IsNaN(WorldWind.Angle)">
            <summary>
            Checks for angle containing "Not a Number"
            </summary>
        </member>
        <member name="M:WorldWind.Angle.Normalize">
            <summary>
            Normalizes the angle so it is between 0?and 360?
            </summary>
        </member>
        <member name="M:WorldWind.Angle.ToStringDms">
            <summary>
            Converts degrees to degrees/minutes/seconds
            </summary>
            <returns>String on format dd癿m'ss.sss"</returns>
        </member>
        <member name="T:WorldWind.PluginEngine.Plugin">
             <summary>
            插件基础类
             </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginCompiler.Plugins">
            <summary>
            The list of discovered plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginCompiler"/> class.
            </summary>
            <param name="worldWind"></param>
            <param name="pluginDirectory"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.AddCodeProvider(System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Adds a compiler to the list of available codeDomProviders
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.FindPlugins(System.Reflection.Assembly)">
            <summary>
            Scan for plugins inside an assembly.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.FindPlugins">
            <summary>
            Build/update the list of available plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.AddPlugin(System.String)">
            <summary>
            Adds plugin from one of the plugins
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.LoadStartupPlugins">
            <summary>
            Loads the plugins that are set for load on world wind startup.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.HasCompiler(System.String)">
            <summary>
            Determine if a file extension is that of a compilable plugin.
            </summary>
            <param name="fileExtension">File extension to check.</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.IsPreCompiled(System.String)">
            <summary>
            Determine if a file extension is that of a pre-compiled plugin.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Load(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Load a plugin
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Unload(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Unload a plugin if it's loaded.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Uninstall(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Uninstall/delete a plugin.
            </summary>
            <param name="pi"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Dispose">
            <summary>
            Shut down plugins
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.Compile(WorldWind.PluginEngine.PluginInfo,System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Compiles a file to an assembly using specified compiler.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.AddCompilerReference(System.String,System.String)">
            <summary>
            Adds reference to a local assembly or an assembly in the global cache.
            </summary>
            <param name="pluginDirectory">Local directory to search.</param>
            <param name="assemblyName">Partial name of the assembly.</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginCompiler.GetPluginInterface(System.Reflection.Assembly)">
            <summary>
            Looks for class derived from Plugin and returns an instance of this class.
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginDialog">
            <summary>
            Plugin manager dialog.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginDialog.ImageList">
            <summary>
            On/Off images for items.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.#ctor(WorldWind.PluginEngine.PluginCompiler)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginDialog"/> class.
            </summary>
            <param name="compiler"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.AddPluginList">
            <summary>
            Fill the list view with currently installed plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.buttonUnload_Click(System.Object,System.EventArgs)">
            <summary>
            Unload selected plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.buttonLoad_Click(System.Object,System.EventArgs)">
            <summary>
            Load selected plugins.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.PluginLoad(WorldWind.PluginEngine.PluginListItem)">
            <summary>
            Load plugin and display message on failure.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.PluginUnload(WorldWind.PluginEngine.PluginListItem)">
            <summary>
            Unload plugin and display message on failure.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.UpdateUIStates">
            <summary>
            Updates enabled states of controls to reflect selection.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.buttonUninstall_Click(System.Object,System.EventArgs)">
            <summary>
            Uninstall/remove plugins
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginDialog.listView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Invert state of double clicked item (load/unload)
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInfo.ReadMetaData">
            <summary>
            Reads strings from the source file header tags
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInfo.FindTagInLine(System.String,System.String,System.String@)">
            <summary>
            Extract tag value from input source line.
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginInstallDialog">
            <summary>
            Ask user for plugin file path/url, then download and install.
            </summary>
        </member>
        <member name="F:WorldWind.PluginEngine.PluginInstallDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.#ctor(WorldWind.PluginEngine.PluginCompiler)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginInstallDialog"/> class.
            </summary>
            <param name="compiler"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.buttonInstall_Click(System.Object,System.EventArgs)">
            <summary>
            Install plugin
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginInstallDialog.IsFile">
            <summary>
            Determine if user points to a file.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginInstallDialog.IsWeb">
            <summary>
            Determine if user points to a web URL.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.InstallFromFile(System.String)">
            <summary>
            Install plugin from local file.
            </summary>
            <param name="pluginPath">Plugin path/filename.</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.InstallFromUrl(System.Uri)">
            <summary>
            Install plugin from web (url).
            </summary>
            <param name="uri">http:// URL</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.GetDestinationPath(System.String)">
            <summary>
            Calculates plugin destination directory based on name, and prepares it.
            </summary>
            <param name="fileName">Plugin filename only (no path).</param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.ShowSuccessMessage(System.String)">
            <summary>
            Display a message box with successful installation message.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginInstallDialog.buttonBrowse_Click(System.Object,System.EventArgs)">
            <summary>
            Browse for local file
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginListItem">
            <summary>
            Listview item in the plugin dialog.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginListItem.PluginInfo">
            <summary>
            Plugin information container.
            </summary>
        </member>
        <member name="P:WorldWind.PluginEngine.PluginListItem.Name">
            <summary>
            Plugin name.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListItem.#ctor(WorldWind.PluginEngine.PluginInfo)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginListItem"/> class.
            </summary>
        </member>
        <member name="T:WorldWind.PluginEngine.PluginListView">
            <summary>
            The list view in the plugin dialog.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.PluginEngine.PluginListView"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Shows list of available plugins
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Interact with plugin loadind
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.PluginEngine.PluginListView.OnDrawItem(System.Windows.Forms.DrawItemEventArgs,WorldWind.PluginEngine.PluginListItem)">
            <summary>
            Owner drawing listview item.
            </summary>
        </member>
        <member name="M:WorldWind.ConfigurationSaver.SaveAs(WorldWind.Renderable.RenderableObject,System.String)">
            <summary>
            存储一些列的对象
            </summary>
            <param name="ro">存储的对象</param>
            <param name="file">存储位置</param>
        </member>
        <member name="M:WorldWind.ConfigurationSaver.saveLayerSet(WorldWind.Renderable.RenderableObjectList,System.Xml.XmlDocument)">
            <summary>
            存储图层序列
            </summary>
            <param name="layerSet">图层集合</param>
            <param name="worldDoc">xml节点</param>
            <returns>根节点</returns>
        </member>
        <member name="M:WorldWind.ConfigurationSaver.saveLayer(WorldWind.Renderable.RenderableObjectList,System.Xml.XmlDocument)">
            <summary>
            Serializes Renderable Objects that aren't from the top level
            </summary>
            <param name="rol">RenderableObjectList to be serialized</param>
            <param name="worldDoc">World Document to which node is added</param>
            <returns>Node for Root Layerset</returns>
        </member>
        <member name="M:WorldWind.ConfigurationSaver.getRenderableObjectProperties(WorldWind.Renderable.RenderableObject,System.Xml.XmlNode)">
            <summary>
            Gets the xml for properties in the base RO class.
            </summary>
            <param name="ro">The RenderableObject to parse</param>
            <param name="roNode">the XmlNode for the object</param>
        </member>
        <member name="T:WorldWind.DataSource.CacheCallback">
            <summary>
            Callback function should return a valid stream if one could be opened for a cached version
            of the data request. Using a callback to achieve allows requests to be scheduled even if
            they result in a cache hit. Note that the callback will be called from the background worker
            thread!
            </summary>
            <param name="drd">The Data Request Descriptor that should be located in the cache</param>
            <returns>A stream prepared to read the cached data, or null if the request was not found
            in the cache (or was too old).</returns>
        </member>
        <member name="T:WorldWind.DataSource.CompletionCallback">
            <summary>
            Callback function to be called upon completion of the data request - either from cache
            or external data source. Caution: This function will be called from the background worker
            thread!
            </summary>
            <param name="dr">The complete data request</param>
        </member>
        <member name="T:WorldWind.DataSource.PriorityCallback">
            <summary>
            Callback function to return current download priority of the request. Priority should be
            in the range of 0 (lowest) to 100 (highest) priority. Requests with negative priority 
            are removed from the download queue.
            </summary>
            <returns>Download priority. Negative = remove from queue; 0-100 = lowest to highest priority.</returns>
        </member>
        <member name="T:WorldWind.DataSource.DataRequestDescriptor">
            <summary>
            The descriptor for new data requests.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataRequestDescriptor.Source">
            <summary>
            The URL to load (in the future, this will also allow piping from external applications).
            Must not be null.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataRequestDescriptor.CacheLocation">
            <summary>
            Relative path to cache the data in (%WW_HOME/Cache/ will be automatically prefixed). Can be null
            if no caching should be performed (eg. for file access).
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataRequestDescriptor.MaxCacheAge">
            <summary>
            Maximum age of the cached file. Can be used to override the default for frequently updated data.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataRequestDescriptor.Description">
            <summary>
            A human readable description of what this data request is for.
            </summary>
        </member>
        <member name="T:WorldWind.DataSource.DataRequest">
            <summary>
            A 'handle' to the current state of a data request. May be polled from other threads.
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.DataRequest.TryCache">
            <summary>
            Try to fulfill the request from cache, if a cache directory has been set.
            If the request can be served from cache, the content stream is initialised for the cache source,
            and the state is set to finished.
            </summary>
            <returns>True if the request could be served from the cache.</returns>
        </member>
        <member name="T:WorldWind.DataSource.DataRequestHTTP">
            <summary>
            An implementation of the DataRequest class for HTTP style URLs. Data is read asynchronously
            into a local memory buffer, and the DataRequest's content stream is fed from memory (unless
            it could be fulfilled from Cache anyway).
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.DataRequestHTTP.Start">
            <summary>
            Initiate an asynchronous request
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.DataRequestHTTP.ResponseCallback(System.IAsyncResult)">
            <summary>
            Asynchronous response callback. Called upon completion of the WebRequest.
            </summary>
            <param name="asyncResult">Result state.</param>
        </member>
        <member name="M:WorldWind.DataSource.DataRequestHTTP.ReadCallback(System.IAsyncResult)">
            <summary>
            Asynchronous read callback. Called upon completion of stream reading.
            </summary>
            <param name="asyncResult">Result state.</param>
        </member>
        <member name="T:WorldWind.DataSource.DataStore">
            <summary>
            A generic class for asynchronous, caching local and remote file access.
            Replaces WebDownload etc.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataStore.m_pendingRequests">
            <summary>
            The currently pending request descriptors. Requests are kept sorted according to priority.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataStore.m_activeRequests">
            <summary>
            Currently active request descriptors.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataStore.m_finishedRequests">
            <summary>
            The finished requests. Designed as a hash table to allow fast check for finished requests.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataStore.m_maxActiveRequests">
            <summary>
            The maximum number of simultaneously active requests. This better not be zero.
            </summary>
        </member>
        <member name="F:WorldWind.DataSource.DataStore.m_lock">
            <summary>
            The thread safe locking object.
            </summary>
        </member>
        <member name="P:WorldWind.DataSource.DataStore.PendingRequestCount">
            <summary>
            The number of currently pending (inactive) requests
            </summary>
        </member>
        <member name="P:WorldWind.DataSource.DataStore.ActiveRequestCount">
            <summary>
            The number of currently active (downloading) requests
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.DataStore.Request(WorldWind.DataSource.DataRequestDescriptor)">
            <summary>
            Put a new request in the queue. Returns a DataRequestDescriptor matching the request. If there is
            already a request pending for the same source, the existing descriptor is returned.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.DataSource.DataStore.Update">
            <summary>
            Handle pending and active data requests. Call this function regularly from the background worker thread.
            </summary>
        </member>
        <member name="T:WorldWind.DataSource.QueueMonitor">
            <summary>
            Simple window showing all http downloads and progress.
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WorldWind.DataSource.QueueMonitor"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.InitializeComponentText">
            <summary>
            We use this to override any strings set in InitializeComponent()
            that need to be able to be translated, because the Visual Studio
            Designer will overwrite things like menu names if the Designer is
            used after changes are made in InitializeComponent().
            
            Any time this class is changed via the Designer, make sure that
            any translatable strings in InitializeComponent() are also
            represented in InitializeComponentText().
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.KeyUp"/> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.Dispose(System.Boolean)">
            <summary>
            Disposes of the resources (other than memory) used by
            the <see cref="T:System.Windows.Forms.Form"/>
            .
            </summary>
            <param name="disposing"><see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.listView_ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            Sorts ascending/descending on clicked column
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Forms.ColumnClickEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemClear_Click(System.Object,System.EventArgs)">
            <summary>
            Clears the download list
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemViewDir_Click(System.Object,System.EventArgs)">
            <summary>
            Opens a directory window containing selected item(s).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemOpenUrl_Click(System.Object,System.EventArgs)">
            <summary>
            Opens the selected items in web browser
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemCopy_Click(System.Object,System.EventArgs)">
            <summary>
            Copy download info to clipboard
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemHeaders_Click(System.Object,System.EventArgs)">
            <summary>
            Displays HTTP headers in a new window
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemSelectAll_Click(System.Object,System.EventArgs)">
            <summary>
            Selects all items
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemRun_Click(System.Object,System.EventArgs)">
            <summary>
            Enables debug monitor
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemEditDelete_Click(System.Object,System.EventArgs)">
            <summary>
            Delete selected items from list
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemWriteLog_Click(System.Object,System.EventArgs)">
            <summary>
            Enables writing to log file.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.contextMenu_Popup(System.Object,System.EventArgs)">
            <summary>
            Handles the Popup event of the contextMenu control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemFile_Popup(System.Object,System.EventArgs)">
            <summary>
            Handles the Popup event of the menuItemFile control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemEdit_Popup(System.Object,System.EventArgs)">
            <summary>
            Handles the Popup event of the menuItemEdit control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemTools_Popup(System.Object,System.EventArgs)">
            <summary>
            Handles the Popup event of the menuItemTools control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:WorldWind.DataSource.QueueMonitor.menuItemFileClose_Click(System.Object,System.EventArgs)">
            <summary>
            Handles the Click event of the menuItemFileClose control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:WorldWind.DirectXProfilerEvent">
            <summary>
            一个提高性能的事件探测工具集合
            </summary>
        </member>
        <member name="T:WorldWind.DirectXProfiler">
            <summary>
            静态方法类
            </summary>
        </member>
        <member name="P:WorldWind.DirectXProfiler.Enabled">
            <summary>
            Whether or not the profiler output is enabled. You should set this
            to false for release, since there's no point in draaing your app down
            with profiler info calls.
            </summary>
        </member>
        <member name="P:WorldWind.DirectXProfiler.AddLineInfo">
            <summary>
            Whether or not to add code-file line info to the events &amp; markers sent
            to the profiler. This can be useful for debugging large applications,
            but as it is very costly and may be a big hit on performance you may
            want to disable it.
            </summary>
        </member>
        <member name="T:WorldWind.GeoRSS.GeoRssDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:WorldWind.GeoRSS.GeoRssDataSet.FeedsDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:WorldWind.GeoRSS.GeoRssDataSet.FeedsRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:WorldWind.GeoRSS.GeoRssDataSet.FeedsRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.Name">
            <summary>
            The name of this feed
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.Feed">
            <summary>
            The RSS Feed object
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.Layer">
            <summary>
            The layer that all Geo objects appear on.
            If more than one channel then each channel is its own layer
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.HasChanges">
            <summary>
            Whether this feed had changes in the last update
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.LastUpdate">
            <summary>
            When the last update was
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.UpdateInterval">
            <summary>
            How often we update this feed
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.IconFileName">
            <summary>
            The filename of the icon for this feed
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeed.NeedsUpdate">
            <summary>
            Whether or not this feed needs an update based on the
            last update time.  Set to true by GroRssFeeds background worker
            </summary>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeed.#ctor(System.String,System.String,System.TimeSpan,WorldWind.Renderable.Icons)">
            <summary>
            Constructor
            </summary>
            <param name="url"></param>
            <param name="update"></param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeed.Dispose">
            <summary>
            Clean up
            </summary>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeed.StripTags(System.String)">
            <summary>
            Helper function that strips out HTML tags
            </summary>
            <param name="text">string to strip</param>
            <returns>stripped string</returns>
        </member>
        <member name="F:WorldWind.GeoRSS.GeoRSSFeedControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRSSFeedControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRSSFeedControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeeds.Feeds">
            <summary>
            All the GeoRssFeeds
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeeds.RootLayer">
            <summary>
            The root layer to add all these feeds to.  
            Each feed gets its own layer.  
            If there are more than one channel then each channel gets a layer.
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeeds.Done">
            <summary>
            Whether we should stop processing
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeeds.Idle">
            <summary>
            If we don't want to update a while but not quit completely
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeeds.NextUpdate">
            <summary>
            The next time the background worker thread wakes up to get feeds
            </summary>
        </member>
        <member name="P:WorldWind.GeoRSS.GeoRssFeeds.DefaultInterval">
            <summary>
            The default interval for all new feeds if no time is passed in.
            </summary>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.#ctor(WorldWind.Renderable.RenderableObjectList)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.Add(WorldWind.GeoRSS.GeoRssFeed,System.Boolean)">
            <summary>
            Adds a pre-constructed feed to the list and its layer to the root layer
            </summary>
            <param name="feed">feed to add</param>
            <param name="addToRoot">sets whether or not the layer gets added to this root layer</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.Add(System.String,System.String)">
            <summary>
            Add a new geo rss feed
            </summary>
            <param name="name">name of feed</param>
            <param name="url">url for feed</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.Add(System.String,System.String,System.TimeSpan)">
            <summary>
            Add a new geo rss feed
            </summary>
            <param name="name">name of feed</param>
            <param name="url">url for feed</param>
            <param name="update">update interval.  If 0 then only gets it once</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.Add(System.String,System.String,System.TimeSpan,WorldWind.Renderable.Icons)">
            <summary>
            Add a new geo rss feed
            </summary>
            <param name="name">name of feed</param>
            <param name="url">url for feed</param>
            <param name="update">update interval.  If 0 then only gets it once</param>
            <param name="layer">icon layer.  Added to rootlayer</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.RemoveByName(System.String)">
            <summary>
            Removes specified feed
            </summary>
            <param name="name">name of feed to remove</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssFeeds.RemoveByUrl(System.String)">
            <summary>
            Removed specified feed by URL.  Probably safer than removal by name
            </summary>
            <param name="url">url of feed to remove</param>
        </member>
        <member name="F:WorldWind.GeoRSS.GeoRssForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WorldWind.GeoRSS.GeoRssForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.DynamicCloudLayer">
            <summary>
            Summary description for DynamicCloudLayer.
            </summary>
        </member>
        <member name="F:WorldWind.DynamicCloudLayer.m_cloudBaseAltitude">
            <summary>
            These two values determine cloud altitude and how '3D' they look
            </summary>
        </member>
        <member name="P:WorldWind.DynamicCloudLayer.Playing">
            <summary>
            Toggles play/pause for the layer
            </summary>
        </member>
        <member name="P:WorldWind.DynamicCloudLayer.ExposureLevel">
            <summary>
            Gets/sets exposure level
            </summary>
        </member>
        <member name="P:WorldWind.DynamicCloudLayer.EnableHdrLighting">
            <summary>
            Turns Hdr Lighting on/off
            </summary>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.#ctor(System.String,WorldWind.World,System.String,System.String)">
            <summary>
            Creates Dynamic Cloud layer
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="remoteUrl"></param>
            <param name="imageDirectoryPath"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Builds context menu for renderable
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes renderable
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Update(WorldWind.DrawArgs)">
            <summary>
            Updates renderable
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Render(WorldWind.DrawArgs)">
            <summary>
            Renders object
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.Dispose">
            <summary>
            Disposes renderable
            </summary>
        </member>
        <member name="M:WorldWind.DynamicCloudLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Executes upon selection
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.Renderable.Icons">
            <summary>
            Holds a collection of icons
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icons.m_pointTexture">
            <summary>
            This is the texture for point sprites
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icons.m_sprite">
            <summary>
            Sprite for all icons in this layer
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icons.m_earlisettime">
            <summary>
            Earliest time an iconset is visible
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icons.m_latesttime">
            <summary>
            Latest time an iconset is visible
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icons.m_labelRectangles">
            <summary>
            This list holds all the rendered labels rectangles for declutter purposes
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icons.mouseOverIcon">
            <summary>
            The closest icon the mouse is currently over
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icons.EarliestTime">
            <summary>
            Accessor Method for eartliest time
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icons.LatestTime">
            <summary>
            Accessor method for latest time
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.Icons.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icons"/> class 
            </summary>
            <param name="name">The name of the icons layer</param>
        </member>
        <member name="M:WorldWind.Renderable.Icons.#ctor(System.String,System.String,System.TimeSpan,WorldWind.World,WorldWind.Cache)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icons"/> class 
            Sets up refresh of this layer from a data source.
            </summary>
            <param name="name"></param>
            <param name="dataSource"></param>
            <param name="refreshInterval"></param>
            <param name="parentWorld"></param>
            <param name="cache"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icons.AddIcon(WorldWind.Renderable.Icon)">
            <summary>
            Adds an icon to this layer.
            </summary>
            <param name="icon">The icon to add to this Icons layer.  Deprecateed.  Use Add(ro).</param>
        </member>
        <member name="M:WorldWind.Renderable.Icons.Add(WorldWind.Renderable.RenderableObject)">
            <summary>
            Add a child object to this layer.
            </summary>
            <param name="ro">The renderable object to add to this layer</param>
        </member>
        <member name="M:WorldWind.Renderable.Icons.RenderChildren(WorldWind.DrawArgs,WorldWind.Renderable.RenderPriority)">
            <summary>
            This used to be done in the World class but moved here so folks could override a ROL's behavior.
            
            NOTE:  Everything under an Icons is rendered using RenderPriority.Icons.  If you put any other kind of 
            ROL in here it (and it's children) probably wont render.
            </summary>
            <param name="drawArgs"></param>
            <param name="priority"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icons.GetTexture(WorldWind.Renderable.Icon)">
            <summary>
            Retrieve an icon's texture
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.IconTexture">
            <summary>
            Contains one texture for our icon texture cache
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.IconTexture.BaseSavePath">
            <summary>
            Base Save path for any downloaded images.  Set to CachePath\IconTextures by default.
            TODO: Need to get the real CachePath rather than faking it.
            TODO: Should make this directory settable.
            TODO: Should have some mechanism to clear the cache out.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.IconTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.IconTexture"/> class 
            from a texture file on disk.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.IconTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.IconTexture"/> class 
            from a bitmap.
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.KMLIcon">
            <summary>
            One icon in an icon layer
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.KMLIcon.#ctor(System.String,System.Double,System.Double,System.String,System.Double)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class  
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="normalicon"></param>
            <param name="heightAboveSurface">Altitude</param>
        </member>
        <member name="M:WorldWind.Renderable.KMLIcon.Dispose">
            <summary>
            Disposes the icon (when disabled)
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.ModelFeature">
            <summary>
            This class Loads and Renders at a specific lat,lon,alt a given
            Model(ie Textured Mesh) in Direct X or Other supported Format
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.Latitude">
            <summary>
            Gets/sets model latitude
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.Longitude">
            <summary>
            Gets/sets model longitude
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.Altitude">
            <summary>
            Gets/sets model altitude
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.Scale">
            <summary>
            Gets/sets model scale
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.RotX">
            <summary>
            Gets/sets X rotation
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.RotY">
            <summary>
            Gets/sets Y rotation
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.RotZ">
            <summary>
            Gets/sets Z rotation
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.IsVertExaggerable">
            <summary>
            Gets/sets whether altitude obeys vert. exaggeration value from settings
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.IsElevationRelativeToGround">
            <summary>
            Gets/sets whether model altitude is relative to ground
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.AltitudeMode">
            <summary>
            Gets/sets altitude mode
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ModelFeature.TintColor">
            <summary>
            Get sets the color to tint the model with.  Used by ambient lighting.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ModelFeature.IsVisible(WorldWind.Camera.CameraBase)">
            <summary>
            Determine if the object is visible
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ModelFeature.Initialize(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed) 
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ModelFeature.LoadDirectXMesh(WorldWind.DrawArgs)">
            <summary>
            Method to load Native Direct X Meshes
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ModelFeature.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (d
            on't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ModelFeature.Dispose">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ModelFeature.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Gets called when user left clicks.
            RenderableObject abstract member (needed)
            Called from UI thread = UI code safe in this function
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.PointIcons">
            <summary>
            Holds a collection of icons
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.PointIcons.PointIcon.PositionD">
            <summary>
            The cartesian coordinates of this icon.  
            Used to be settable but never actually updated the position of the icon.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.PointIcons.PointIcon.Position">
            <summary>
            Object position (XYZ world coordinates)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.PointIcon.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            If LMB pressed calls PerformLMBAction, if RMB pressed calls PerformRMBAction
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.PointIcon.PerformLMBAction(WorldWind.DrawArgs)">
            <summary>
            Goes to icon if camera positions set.  Also opens URL if it exists
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.PointIcon.PerformRMBAction(WorldWind.DrawArgs)">
            <summary>
            RMB Click Action
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="F:WorldWind.Renderable.PointIcons.m_pointTexture">
            <summary>
            This is the texture for point sprites
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.PointIcons.SelectionRectangle">
            <summary>
            Bounding box centered at (0,0) used to calculate whether mouse is over point
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icons"/> class 
            </summary>
            <param name="name">The name of the icons layer</param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.AddPoint(System.String,System.String,System.Double,System.Double,System.Double,System.Single,System.Drawing.Color,System.String)">
            <summary>
            Add a new fast icon point.  Overwrites any existing fast icon point with the same name. 
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="alt"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="url"></param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.AddPoint(WorldWind.Renderable.PointIcons.PointIcon)">
            <summary>
            Adds the provided point.  Overwrites any existing point with the same key.
            </summary>
            <param name="point">PointIcon to add.</param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.UpdatePoint(System.String,System.Double,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="alt"></param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.UpdatePoint(System.String,System.String,System.Double,System.Double,System.Double,System.Single,System.Drawing.Color,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="alt"></param>
            <param name="size"></param>
            <param name="color"></param>
            <param name="url"></param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.UpdatePointColor(System.String,System.Drawing.Color)">
            <summary>
            Changes the point color
            </summary>
            <param name="name">name of point</param>
            <param name="color">new color for this point</param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.UpdatePointSize(System.String,System.Single)">
            <summary>
            Changes the rendered scaling size for this point
            </summary>
            <param name="name">name of point</param>
            <param name="size">new scaling size</param>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.GetPoint(System.String)">
            <summary>
            Returns the point if it exists
            </summary>
            <param name="name">Name of point</param>
            <returns>Point found or null if not</returns>
        </member>
        <member name="M:WorldWind.Renderable.PointIcons.RemovePoint(System.String)">
            <summary>
            Removes point if it exists
            </summary>
            <param name="name">name of point to remove</param>
        </member>
        <member name="T:WorldWind.Renderable.TrackIcon">
            <summary>
            One icon in an icon layer
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Heading">
            <summary>
            The heading for this object (0-360) in degrees
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Speed">
            <summary>
            The speed of this object (knots)
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_speed">
            <summary>
            The speed of this object (knots)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.UpdateTime">
            <summary>
            The date time of the last update
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.SourceTime">
            <summary>
            The date time of the source for this update
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.IsSurfaceTrack">
            <summary>
            Whether this object is a surface track that should hug the ground.
            Default is false.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_iconTexture2Show">
            <summary>
            Flag that indicates if the secondary icon texture should be shown.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture2FileName">
            <summary>
            Secondary texture bitmap path. (Overrides Image)
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_iconTexture2">
            <summary>
            The secondary icon texture - typically a unit size
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture2Rotation">
            <summary>
            Texture 2 rotation angle relative to north
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture2IsRotatedDifferent">
            <summary>
            Whether or not to rotate texture 2 differently than main texture
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture2UseHeading">
            <summary>
            Whether or not to use the main rotation (aka heading) as the rotation angle.
            Set this (and Texture2IsRotated to true) if you are using it for a heading indicator
            This allows you to not to rotate the main icon while providing heading.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_iconTexture3Show">
            <summary>
            Flag that indicates if the tertiatary icon texture should be shown.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_iconTexture3Name">
            <summary>
            The name of the tertiary icon texture
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_iconTexture3">
            <summary>
            The secondary icon texture - typically a heading indicator or status
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture3Rotation">
            <summary>
            Texture 3 rotation angle relative to north
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture3IsRotatedDifferent">
            <summary>
            Whether or not to rotate texture 3 differently from main texture
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.Texture3UseHeading">
            <summary>
            Whether or not to use the main rotation (aka heading) as the rotation angle.
            Set this (and Texture3IsRotated to true) if you are using it for a heading indicator
            This allows you to not to rotate the main icon while providing heading.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.MaxPoints">
            <summary>
            Maximum number of history points
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.TrackIcon.PosData">
            <summary>
            History points data
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.RenderTrail">
            <summary>
            Whether or not to render the history trail
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.History">
            <summary>
            The history list
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_lineFeature">
            <summary>
            The linefeature that displays the track history
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.TrailShowDistance">
            <summary>
            Distance which to start showing the trail
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.RenderModel">
            <summary>
            Whether or not to render a 3-D model
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_modelFeatureError">
            <summary>
            Whether this model feature failed to load
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TrackIcon.m_modelFeature">
            <summary>
            The ModelFeature representing the detailed view of this icon
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.ModelFilePath">
            <summary>
            The file path to the model - default is a generic commercial airliner
            </summary>         
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.ModelShowDistance">
            <summary>
            Distance at which to start showing model
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.TrackIcon.ModelRotX">
            <summary>
            X Rotation for model.  Used when model is flipped on its side.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="heightAboveSurface">Icon height (meters) above sea level.</param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of a <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="heightAboveSurface"></param>
            <param name="TextureFileName"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="actionURL"></param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.Update(WorldWind.DrawArgs)">
            <summary>
            Updates where we are if the camera has changed position (and thereby might be using higher resolution terrain
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.RenderDescription(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32)">
            <summary>
            Helper function to render icon description.  Broken out so that child classes can override this behavior.
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Builds the context menu for this icon
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.PreRender(WorldWind.DrawArgs,System.Boolean)">
            <summary>
            Called before icon render.  If the user has clicked on one of the GoTos head there now.
            Renders 3-D model and history trails.  If you want to only show models or trails on
            mouseover set the TrailShowDistance or ModelShowDistance to 0.
            </summary>
            <param name="drawArgs"></param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.PostRender(WorldWind.DrawArgs,System.Boolean)">
            <summary>
            Called after icon render.  Always updates the hook form so the hook form still updates position even when the icon
            is out of view.
            </summary>
            <param name="drawArgs"></param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.RenderTexture(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32,System.Boolean)">
            <summary>
            Helper function to render icon texture.  Broken out so that child classes can override this behavior.
            </summary>
            <param name="drawArgs"></param>
            <param name="sprite"></param>
            <param name="projectedPoint"></param>
            <param name="color">the color to render the icon</param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.RenderLabel(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32,System.Collections.Generic.List{System.Drawing.Rectangle},System.Boolean)">
            <summary>
            Forces display of lable if we are hooked
            </summary>
            <param name="drawArgs"></param>
            <param name="sprite"></param>
            <param name="projectedPoint"></param>
            <param name="color"></param>
            <param name="labelRectangles"></param>
            <param name="isMouseOver"></param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.SetPosition(System.Double,System.Double,System.Double,System.Double,System.Double,System.DateTime)">
            <summary>
            
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="alt"></param>
            <param name="spd"></param>
            <param name="hdg"></param>
            <param name="time"></param>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.updateSubObjects">
            <summary>
            Helper class that updates history trail and model position
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.updateModel(System.Boolean)">
            <summary>
            updates the ModelFeature to the new mesh, position and color
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TrackIcon.DMS">
            <summary>
            Returns a string with this object's position in Degrees Minutes Seconds format
            </summary>
            <returns>Lat and Lon in DMS and Alt in meters</returns>
        </member>
        <member name="M:WorldWind.Renderable.BoundaryLayer.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.Double,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.BoundaryLayer"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="distanceAboveSurface"></param>
            <param name="minDisplayAltitude"></param>
            <param name="maxDisplayAltitude"></param>
            <param name="boundaryFilePath"></param>
            <param name="color"></param>
        </member>
        <member name="T:WorldWind.Renderable.DownloadableImageFromIconSet">
            <summary>
            在球上显示图片
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.DownloadableImageFromIconSet.#ctor(System.String,WorldWind.World,System.Single,WorldWind.DrawArgs,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.DownloadableImageFromIconSet"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="distanceAboveSurface"></param>
            <param name="drawArgs"></param>
            <param name="terrainAccessor"></param>
        </member>
        <member name="T:WorldWind.Renderable.DownloadableIcon">
            <summary>
            使用modis icon
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.Icon">
            <summary>
            One icon in an icon layer
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.m_isUpdated">
            <summary>
            Indicates if an update is required.  If isUpdated is false then the update will run.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.m_newTexture">
            <summary>
            Indicates if a new texture needs to be loaded
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.m_contextMenu">
            <summary>
            The context menu for this icon
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.DistanceToIcon">
            <summary>
            This value is computed by anyone that would try to render this icon.
            It isn't a parameter because it is often compared to in order to 
            see how this icon should be rendered (PointSprite, Sprite, Mesh).
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.NameAlwaysVisible">
            <summary>
            Whether the name of this icon should always be rendered
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.IsRotated">
            <summary>
            Whether or not this icon should be rotated.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Rotation">
            <summary>
            The angle of rotation to display the icon's texture in Degrees.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Latitude">
            <summary>
            Latitude (North/South) in decimal degrees
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Longitude">
            <summary>
            Longitude (East/West) in decimal degrees
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.LatitudeAngle">
            <summary>
            Latitude as an Angle class
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.LongitudeAngle">
            <summary>
            Longitude as an Angle class
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.LatitudeRadians">
            <summary>
            Latitude as a radian
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.LongitudeRadians">
            <summary>
            Longitude as a radian
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Altitude">
            <summary>
            The icon altitude above the surface 
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.PositionD">
            <summary>
            The cartesian coordinates of this icon.  
            Used to be settable but never actually updated the position of the icon.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.TextureFileName">
            <summary>
            Icon bitmap path. (Overrides Image)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.IconTexture">
            <summary>
            The icon's texture
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.ClickableActionURL">
            <summary>
            On-Click browse to location
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.DrawGroundStick">
            <summary>
            Whether or not a groundstick should be drawn
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.MaxGroundStickDistance">
            <summary>
            Maximum distance at which to render ground sticks.  Default = max.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Declutter">
            <summary>
            Whether or not the labels should be decluttered
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Id">
            <summary>
            An ID for this icon.  Depends on the plugin to assign but can be used to uniquely identify this icon
            without having an incomprehensible name.
            
            TODO: Name is not always unique...determine if this is a problem since it may be used as a key in things.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Tag">
            <summary>
            Any user defined icon related data to hang onto.
            
            TODO:  Should this be in RO?
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.AutoScaleIcon">
            <summary>
            If true the icon will autoscale based on altitude
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.MinIconZoomDistance">
            <summary>
            At what distance to start autoscaling
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.MinScaleFactor">
            <summary>
            The smallest to scale this icon based on zoom (default = 20%)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.IsAGL">
            <summary>
            True if altitude is in AGL, False if ASL.  Default is AGL.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.UseVE">
            <summary>
            True if Vertical Exaggeration should be used in computing altitude.  
            Default is true.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.UseZeroVE">
            <summary>
            True if a zero Vertical Exaggeration should be used in computing altitude.  
            If set then a VE of 0 forces altitude to 0 since its multiplied.  Ignored if UseVE is false.
            Default is true.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.AlwaysHighlight">
            <summary>
            Whether or not this will change color on mouseover (default = true)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.DisableMouseoverHighlight">
            <summary>
            Whether or not this will change color on mouseover (default = true)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.UsePointSprite">
            <summary>
            Whether or not we should render as a point sprite above a certain camera altitude.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.PointSpriteDistance">
            <summary>
            Distance at which to render as PointSprite rather than as a sprite.  Default = 15000000m
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.PointSpriteColor">
            <summary>
            Color to render the PointSprite.  Just sets lighting color.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.PointSpriteSize">
            <summary>
            The size to render this pointsprite
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.TextureRenderEnabled">
            <summary>
            Whether or not to render the texture.  Useful if you want to render groundstick with pointsprites 
            but not actually show this icon as a sprite when you do.  
            Set MaxGroundStickDistance to PointSpriteDistance, TrailShowDistance or ModelShowDistance 
            AlwaysRenderPointSprite to true and this to false.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.AlwaysRenderPointSprite">
            <summary>
            Whether to always render as a pointsprite even when we render as a sprite
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.IsHooked">
            <summary>
            Whether or not this icon has been "hooked" to show descrption all of the time.
            </summary>
            <remarks>
            Is never set to true for base Icon objects but only those the implement hooking (TrackIcon) but
            this is here to allow for use by Icons to behave differently (specifically PointSprite behaviors).
            </remarks>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Image">
            <summary>
            Icon image.  Leave TextureFileName=null if using Image.  
            Caller is responsible for disposing the Bitmap when the layer is removed, 
            either by calling Dispose on Icon or on the Image directly.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Width">
            <summary>
            Icon on-screen rendered width (pixels).  Defaults to icon image width.  
            If source image file is not a valid GDI+ image format, width may be increased to closest power of 2.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.Icon.Height">
            <summary>
            Icon on-screen rendered height (pixels).  Defaults to icon image height.  
            If source image file is not a valid GDI+ image format, height may be increased to closest power of 2.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.XScale">
            <summary>
             Icon X scaling computed by dividing icon width by texture width
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.YScale">
            <summary>
             Icon Y scaling computed by dividing icon height by texture height 
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.MaximumDisplayDistance">
            <summary>
            The maximum distance (meters) the icon will be visible from
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.MinimumDisplayDistance">
            <summary>
            The minimum distance (meters) the icon will be visible from
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.Icon.SelectionRectangle">
            <summary>
            Bounding box centered at (0,0) used to calculate whether mouse is over icon/label
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.Icon.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.#ctor(System.String,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="heightAboveSurface">Icon height (meters) above sea level.</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.#ctor(System.String,System.String,System.Double,System.Double,System.Double,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="heightAboveSurface"></param>
            <param name="TextureFileName"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="actionURL"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.#ctor(System.String,System.Double,System.Double,System.Double,WorldWind.World)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="heightAboveSurface">Icon height (meters) above sea level.</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.#ctor(System.String,System.String,System.Double,System.Double,System.Double,WorldWind.World,System.Drawing.Bitmap,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name">Name of the icon</param>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="heightAboveSurface">Icon height (meters) above sea level.</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.#ctor(System.String,System.String,System.Double,System.Double,System.Double,WorldWind.World,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.Icon"/> class 
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="heightAboveSurface"></param>
            <param name="parentWorld"></param>
            <param name="TextureFileName"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="actionURL"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.SetPosition(System.Double,System.Double)">
            <summary>
            Sets the geographic position of the icon.
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.SetPosition(System.Double,System.Double,System.Double)">
            <summary>
            Sets the geographic position of the icon.
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="altitude">The icon altitude above sea level.</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.Dispose">
            <summary>
            Disposes the icon (when disabled)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.Icon.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            If LMB pressed calls PerformLMBAction, if RMB pressed calls PerformRMBAction
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Renderable.Icon.PerformLMBAction(WorldWind.DrawArgs)">
            <summary>
            Goes to icon if camera positions set.  Also opens URL if it exists
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Renderable.Icon.PerformRMBAction(WorldWind.DrawArgs)">
            <summary>
            Does something with overlays...
            </summary>
            <param name="drawArgs"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Renderable.Icon.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Adds to the default context menu any screen overlays and user defined context menus
            </summary>
            <param name="menu"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.AddContextMenuItem(System.Windows.Forms.MenuItem)">
            <summary>
            Adds a new context menu item to this icon.
            </summary>
            <param name="newItem">The menu item to add</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.Update(WorldWind.DrawArgs)">
            <summary>
            Updates where we are if the camera has changed position (and thereby might be using higher resolution terrain
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.BuildIconTexture(WorldWind.DrawArgs)">
            <summary>
            Builds the icon texture based on the saved texturefile name
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.Render(WorldWind.DrawArgs)">
            <summary>
            Render the icon.  This can be pretty slow so you should only stick an Icon on an Icons layer.
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.FastRender(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Boolean,System.Collections.Generic.List{System.Drawing.Rectangle})">
            <summary>
            Fast render is used to batch the renders of all icons on a layer into a single Sprite.Begin and End block.
            </summary>
            <param name="drawArgs">The drawing arguments</param>
            <param name="sprite">The sprite to use for drawing</param>
            <param name="projectedPoint">Where we are</param>
            <param name="isMouseOver">Whether we should render as a mouseover icon</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.RenderOverlay(WorldWind.DrawArgs)">
            <summary>
            Renders the overlays for this icon
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.RenderLabel(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32,System.Collections.Generic.List{System.Drawing.Rectangle},System.Boolean)">
            <summary>
            Helper function to render icon label.  Broken out so that child classes can override this behavior.
            </summary>
            <param name="drawArgs"></param>
            <param name="sprite"></param>
            <param name="projectedPoint"></param>
            <param name="color"></param>
            <param name="labelRectangles"></param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.RenderTexture(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32,System.Boolean)">
            <summary>
            Helper function to render icon texture.  Broken out so that child classes can override this behavior.
            </summary>
            <param name="drawArgs"></param>
            <param name="sprite"></param>
            <param name="projectedPoint"></param>
            <param name="color">the color to render the icon</param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.RenderGroundStick(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32,System.Boolean)">
            <summary>
            Helper function to render the groundstick
            </summary>
            <param name="drawArgs"></param>
            <param name="sprite"></param>
            <param name="projectedPoint"></param>
            <param name="color"></param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.RenderDescription(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.Sprite,Microsoft.DirectX.Vector3,System.Int32)">
            <summary>
            Helper function to render icon description.  Broken out so that child classes can override this behavior.
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.PreRender(WorldWind.DrawArgs,System.Boolean)">
            <summary>
            Does whatever you need to do before you render the icon.  Occurs even if the icon isn't visible!
            Occurs OUTSIDE of Sprite.begin.  Other RO's can be rendered here.
            </summary>
            <param name="drawArgs"></param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.PostRender(WorldWind.DrawArgs,System.Boolean)">
            <summary>
            Does whatever you need to do after you render the icon.  Occurs even if the icon isn't visible!
            Occurs INSIDE of Sprite.begin.  Other RO's wont render here.
            </summary>
            <param name="drawArgs"></param>
            <param name="isMouseOver">Whether or not the mouse is over the icon</param>
        </member>
        <member name="M:WorldWind.Renderable.Icon.NoRender(WorldWind.DrawArgs)">
            <summary>
            Do this if we don't actually get rendered (not in view, too far, etc)
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="T:WorldWind.Renderable.ImageLayer">
            <summary>
            Use this class to map a single image to the planet at a desired altitude.
            Source image must be in Plate Carree (geographic) map projection:
            http://en.wikipedia.org/wiki/Plate_Carr%E9e_Projection
            TODO: Update this code to take advantage of the Texture Manager
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.TransparentColor">
            <summary>
            Gets or sets the color used for transparent areas.
            </summary>
            <value></value>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.ImageUrl">
            <summary>
            The url of the image (when image is on network)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.ImagePath">
            <summary>
            The Path of the image (local file)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.OpacityPercent">
            <summary>
            Opacity (0..1)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.MinLon">
            <summary>
            Longitude at left edge of image
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.MinLat">
            <summary>
            Latitude at lower edge of image
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.MaxLon">
            <summary>
            Longitude at upper edge of image
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.MaxLat">
            <summary>
            Latitude at upper edge of image
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.ImageLayer.LegendImagePath">
            <summary>
            Path or URL of layer legend image
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.ImageLayer"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.#ctor(System.String,WorldWind.World,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Byte,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.#ctor(System.String,WorldWind.World,System.Double,System.IO.Stream,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.#ctor(System.String,WorldWind.World,System.Double,System.String,System.Double,System.Double,System.Double,System.Double,System.Double,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.Initialize(WorldWind.DrawArgs)">
            <summary>
            Layer initialization code
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.DownloadImage">
            <summary>
            Downloads image from web
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.UpdateDownloadProgress(System.Int32,System.Int32)">
            <summary>
            Download progress callback 
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.Update(WorldWind.DrawArgs)">
            <summary>
            Update layer (called from worker thread)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            Handle mouse click
            </summary>
            <returns>true if click was handled.</returns>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.CreateMesh">
            <summary>
            Builds the image's mesh 
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.Render(WorldWind.DrawArgs)">
            <summary>
            Draws the layer
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.DrawProgressBar(WorldWind.DrawArgs,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Displays a progress bar
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.UpdateTexture(System.String)">
            <summary>
            Switch to a different image
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.UpdateTexture(System.IO.Stream)">
            <summary>
            Switch to a different image
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.UpdateTexture(System.IO.Stream,System.Int32)">
            <summary>
            Switch to a different image
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.Dispose">
            <summary>
            Cleanup when layer is disabled
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.UpdateOpacity(System.Single)">
            <summary>
            Change opacity
            </summary>
            <param name="percent">0=transparent, 1=opaque</param>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.UpdateLayerRadius(System.Single)">
            <summary>
            Change radius
            </summary>
            <param name="layerRadius">Sphere radius (meters)</param>
        </member>
        <member name="M:WorldWind.Renderable.ImageLayer.OnLegendClick(System.Object,System.EventArgs)">
            <summary>
            Called when user chooses to display legendControl
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.IRenderable">
            <summary>
            
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.LatLongGrid">
            <summary>
            Draws a latitude/longitude grid
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.WorldRadius">
            <summary>
            Planet radius (constant)
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.radius">
            <summary>
            Grid line radius (varies, >= world radius
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.IsEarth">
            <summary>
            Current planet == Earth?
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.MinVisibleLongitude">
            <summary>
            Lowest visible longitude
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.MaxVisibleLongitude">
            <summary>
            Highest visible longitude
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.MinVisibleLatitude">
            <summary>
            Lowest visible Latitude
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.MaxVisibleLatitude">
            <summary>
            Highest visible Latitude
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.LongitudeInterval">
            <summary>
            Interval in degrees between visible latitudes
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.LatitudeInterval">
            <summary>
            Interval in degrees between visible longitudes
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.LongitudePointCount">
            <summary>
            The number of visible longitude lines
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.LatitudePointCount">
            <summary>
            The number of visible latitude lines
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.lineVertices">
            <summary>
            Temporary buffer used for rendering  lines
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.LatLongGrid.useZBuffer">
            <summary>
            Z Buffer enabled (depending on distance)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.LatLongGrid.#ctor(WorldWind.World)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.LatLongGrid"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.LatLongGrid.Render(WorldWind.DrawArgs)">
            <summary>
            Render the grid lines
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.LatLongGrid.RenderTropicLines(WorldWind.DrawArgs)">
            <summary>
            Draw Tropic of Cancer, Tropic of Capricorn, Arctic and Antarctic lines
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.LatLongGrid.RenderTropicLine(WorldWind.DrawArgs,System.Single,System.String)">
            <summary>
            Draws a tropic line at specified latitude with specified label
            </summary>
            <param name="latitude">Latitude in degrees</param>
        </member>
        <member name="M:WorldWind.Renderable.LatLongGrid.ComputeGridValues(WorldWind.DrawArgs)">
            <summary>
            Recalculates the grid bounds + interval values
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.MeshLayer">
            <summary>
            Summary description for MeshLayer.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.MeshLayer.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.String,Microsoft.DirectX.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.MeshLayer"/> class.
            </summary>
            <param name="name"></param>
            <param name="latitude"></param>
            <param name="longitude"></param>
            <param name="layerRadius"></param>
            <param name="scaleFactor"></param>
            <param name="meshFilePath"></param>
            <param name="orientation"></param>
        </member>
        <member name="T:WorldWind.Renderable.PathLine">
            <summary>
            Summary description for PathLine.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.PathLine.#ctor(System.String,WorldWind.World,System.String,System.Single,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.PathLine"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="terrainfileName"></param>
            <param name="heightAboveSurface"></param>
            <param name="lineColor"></param>
        </member>
        <member name="T:WorldWind.Renderable.PathList">
            <summary>
            Summary description for PathList.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.PathList.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.String,System.Double,System.Drawing.Color,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.PathList"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="minDisplayAltitude"></param>
            <param name="maxDisplayAltitude"></param>
            <param name="pathsDirectoryPath"></param>
            <param name="altitude"></param>
            <param name="color"></param>
            <param name="terrainAccessor"></param>
        </member>
        <member name="T:WorldWind.Renderable.PolygonLayer">
            <summary>
            Summary description for PolygonLayer.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.PolygonLayer.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.Double,System.String,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.PolygonLayer"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="minDisplayAltitude"></param>
            <param name="maxDisplayAltitude"></param>
            <param name="distanceAboveSurface"></param>
            <param name="polygonFilePath"></param>
            <param name="color"></param>
        </member>
        <member name="T:WorldWind.Renderable.QuadTile.ChildLocation">
            <summary>
            Child tile location
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTile.vertexCount">
            <summary>
            Number of points in child flat mesh grid (times 2)
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTile.vertexCountElevated">
            <summary>
            Number of points in child terrain mesh grid (times 2)
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTile.verticalExaggeration">
            <summary>
            The vertical exaggeration the tile mesh was computed for
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTile.VerticeCache">
            New Cache idea
            
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32,WorldWind.Renderable.QuadTileSet)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.QuadTile"/> class.
            </summary>
            <param name="south"></param>
            <param name="north"></param>
            <param name="west"></param>
            <param name="east"></param>
            <param name="level"></param>
            <param name="quadTileSet"></param>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.ComputeChild(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the QuadTile for specified location if available.
            Tries to queue a download if not available.
            </summary>
            <returns>Initialized QuadTile if available locally, else null.</returns>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.Update(WorldWind.DrawArgs)">
            <summary>
            Updates this layer (background)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.CreateTileMesh">
            <summary>
            Builds flat or terrain mesh for current tile
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.CreateFlatMesh">
            <summary>
            Builds a flat mesh (no terrain)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.CreateElevatedMesh">
            <summary>
            Build the elevated terrain mesh
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.CreateElevatedMesh(WorldWind.Renderable.QuadTile.ChildLocation,Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured[],System.Double,System.Single[0:,0:])">
            <summary>
            Create child tile terrain mesh
            Build the mesh with one extra vertice all around for proper normals calculations later on.
            Use the struts vertices to that effect. Struts are properly folded after normals calculations.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.RenderDownloadRectangle(WorldWind.DrawArgs,System.Int32,Microsoft.DirectX.Vector3)">
            <summary>
            Render a rectangle around an image tile in the specified color
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTile.Render(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured[],WorldWind.Renderable.QuadTile)">
            <summary>
            Render one of the 4 quadrants with optional download indicator
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.QuadTileSet">
            <summary>
            Main class for image tile rendering.  Uses the Terrain Manager to query height values for 3D
            terrain rendering.
            Relies on an Update thread to refresh the "tiles" based on lat/lon/view range
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTileSet.DownloadInProgressTexture">
            <summary>
            Texture showing download in progress
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTileSet.DownloadQueuedTexture">
            <summary>
            Texture showing queued download
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTileSet.DownloadTerrainTexture">
            <summary>
            Texture showing terrain download in progress
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.QuadTileSet.ColorKeyMax">
            <summary>
            If a color range is to be transparent this specifies the brightest transparent color.
            The darkest transparent color is set using ColorKey.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.Double,System.Double,System.Double,System.DateTime,System.DateTime,System.Boolean,WorldWind.ImageStore[])">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.QuadTileSet"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="distanceAboveSurface"></param>
            <param name="north"></param>
            <param name="south"></param>
            <param name="west"></param>
            <param name="east"></param>
            <param name="earliesttime"></param>
            <param name="latesttime"></param>
            <param name="terrainMapped"></param>
            <param name="imageStores"></param>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,WorldWind.ImageStore[])">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.QuadTileSet"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="distanceAboveSurface"></param>
            <param name="north"></param>
            <param name="south"></param>
            <param name="west"></param>
            <param name="east"></param>
            <param name="terrainMapped"></param>
            <param name="imageStores"></param>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.CacheExpirationTime">
            <summary>
            If images in cache are older than expration time a refresh
            from server will be attempted.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.ServerLogoFilePath">
            <summary>
            Path to a thumbnail image (e.g. for use as a download indicator).
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.ServerLogoImage">
            <summary>
            The image referenced by ServerLogoFilePath.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.ThumbnailImage">
            <summary>
            Path to a thumbnail image (or download indicator if none available)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.HasTransparentRange">
            <summary>
            Path to a thumbnail image (e.g. for use as a download indicator).
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.SourceBlend">
            <summary>
            Source blend when rendering non-opaque layer
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.DestinationBlend">
            <summary>
            Destination blend when rendering non-opaque layer
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.North">
            <summary>
            North bound for this QuadTileSet
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.West">
            <summary>
            West bound for this QuadTileSet
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.South">
            <summary>
            South bound for this QuadTileSet
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.East">
            <summary>
            East bound for this QuadTileSet
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.EnableColorKeying">
            <summary>
            Controls if images are rendered using ColorKey (transparent areas)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.TerrainMapped">
            <summary>
            Controls rendering (flat or terrain mapped)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.DownloadRequests">
            <summary>
            Tiles in the request for download queue
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.Camera">
            <summary>
            The camera controlling the layers update logic
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.EffectPath">
            <summary>
            Path to the effect used to render this tileset; if null, use fixed function pipeline
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.QuadTileSet.Effect">
            <summary>
            The effect used to render this tileset.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.RemoveFromDownloadQueue(WorldWind.Renderable.GeoSpatialDownloadRequest)">
            <summary>
            Removes a request from the download queue.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.ServiceDownloadQueue">
            <summary>
            Starts downloads when there are threads available
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.GetClosestDownloadRequest">
            <summary>
            Finds the "best" tile from queue
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.CreateDownloadRectangle(Microsoft.DirectX.Direct3D.Device,System.Drawing.Color,System.Int32)">
            <summary>
            Creates a tile download indication texture
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.RecordFailedRequest(WorldWind.Renderable.GeoSpatialDownloadRequest)">
            <summary>
            When a DownloadRequest fails when a server returns a 404 error this will record that failure for the QuadTile
            If the QuadTile fails to be downloaded after 'MaxRetriesPerTile' retries the QuadTileSet will not download it again to prevent
            hammering the server.
            </summary>
            <param name="downloadRequest"></param>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.setTimeoutAndWait(System.TimeSpan)">
            <summary>
            Allows for setting the Timeout for this QuadTileSet for a specified length of time
            where downloads will be put on hold.
            </summary>
            <param name="waitTime">How long to set wait</param>
        </member>
        <member name="M:WorldWind.Renderable.QuadTileSet.IsTileFailed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if the requested download has been flagged as a failed download
            </summary>
            <param name="level"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.Renderable.RenderableObject">
            <summary>
            The base class for objects to be rendered as part of the scene.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.RenderableObject.isInitialized">
            <summary>
            True when object is ready to be rendered.
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.RenderableObject.isSelectable">
            <summary>
            True for objects the user can interact with.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.RenderableObject"/> class.
            </summary>
            <param name="name">Object description</param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.#ctor(System.String,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion)">
            <summary>
            Constructor
            </summary>
            <param name="name">Object description</param>
            <param name="position">Object position (XYZ world coordinates)</param>
            <param name="orientation">Object rotation (Quaternion)</param>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.World">
            <summary>
            The planet this layer is a part of.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.Thumbnail">
            <summary>
            Path to a Thumbnail image(e.g. for use as a Toolbar button).
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.ThumbnailImage">
            <summary>
            The image referenced by Thumbnail. 
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.IconImagePath">
            <summary>
            Path for an icon for the object, such as an image to be used in the Active Layer window.
            This can be different than the Thumbnail(e.g. an ImageLayer can have an IconImage, and no Thumbnail).
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.IconImage">
            <summary>
            The icon image referenced by IconImagePath. 
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.Dispose">
            <summary>
            Called when object is disabled.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.PerformSelectionAction(WorldWind.DrawArgs)">
            <summary>
            User interaction (mouse click)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.Delete">
            <summary>
            Permanently delete the layer
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.BuildContextMenu(System.Windows.Forms.ContextMenu)">
            <summary>
            Fills the context menu with menu items specific to the layer.
            </summary>
            <param name="menu">Pre-initialized context menu.</param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.ToString">
            <summary>
            Returns a String that represents the current SelectedObject.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.RenderPriority">
            <summary>
            The object's render priority determining in what order it will be rendered
            compared to the other objects.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.Opacity">
            <summary>
            How transparent this object should appear (0=invisible, 255=opaque)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.IsOn">
            <summary>
            Hide/Show this object.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.Name">
            <summary>
            Describes this object
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.Position">
            <summary>
            Object position (XYZ world coordinates)
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObject.Orientation">
            <summary>
            Object rotation (Quaternion)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnDbfInfo(System.Object,System.EventArgs)">
            <summary>
              Goes to the Shapefiles's DBF Information Window
             </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnGotoClick(System.Object,System.EventArgs)">
            <summary>
              Goes to the extent specified by the bounding box for the QTS layer
              or to the lat/lon for icons
             </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnInfoClick(System.Object,System.EventArgs)">
            <summary>
            Layer info context menu item
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnPropertiesClick(System.Object,System.EventArgs)">
            <summary>
            Layer properties context menu item
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnReloadShaderClick(System.Object,System.EventArgs)">
            <summary>
            Layer properties context menu item
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnDeleteClick(System.Object,System.EventArgs)">
            <summary>
            Delete layer context menu item
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnSaveAsClick(System.Object,System.EventArgs)">
            <summary>
            Save item from LM to a file
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObject.OnViewXmlClick(System.Object,System.EventArgs)">
            <summary>
            Show serialized item in browser
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:WorldWind.Renderable.RenderPriority">
            <summary>
            The render priority determines in what order objects are rendered.
            Objects with higher priority number are rendered over lower priority objects.
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.RenderableObjectList">
            <summary>
            Represents a parent node in the layer manager tree.  Contains a list of sub-nodes.
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObjectList.RefreshTimer">
            <summary>
            This ROL needs to be sorted because either something was added or render priority was changed.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.RenderableObjectList"/> class.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.#ctor(System.String,System.String,System.TimeSpan,WorldWind.World,WorldWind.Cache)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="dataSource"></param>
            <param name="refreshInterval"></param>
            <param name="parentWorld"></param>
            <param name="cache"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.GetObject(System.String)">
            <summary>
            Return the first direct child with a given name.
            </summary>
            <example>Get the placenames LayerSet.
            <code>
            RenderableObject placenames = CurrentWorld.RenderableObjects.GetObject("Placenames"));
            </code></example>
            <param name="name">The name to search for</param>
            <returns>The first <c>RenderableObject</c> that matched the specified name, or <c>nullk</c> if none was found.</returns>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.GetObjects(System.String,System.Type)">
            <summary>
            Return a list of all direct and indirect children that match the given name and/or object type.
            </summary>
            <example> Get all QuadTileSets defined in this world:
            <code>
            RenderableObjectList allQTS = CurrentWorld.RenderableObjects.GetObjects(null, typeof(QuadTileSet));
            </code></example>
            <param name="name">The name of the <c>RenderableObject</c> to search for, or <c>null</c> if any name should match.</param>
            <param name="objectType">The object type to search for, or <c>null</c> if any type should match.</param>
            <returns>A list of all <c>RenderableObject</c>s that match the given search criteria (may be empty), or <c>null</c> if an error occurred.</returns>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Enable(System.String)">
            <summary>
            Enables layer with specified name
            </summary>
            <returns>False if layer not found.</returns>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.OnCheckAllChildrenClick(System.Object,System.EventArgs)">
            <summary>
            Menu action to check all children of a ROL
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.OnUncheckAllChildrenClick(System.Object,System.EventArgs)">
            <summary>
            Menu action to uncheck all children of a ROL
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObjectList.ChildObjects">
            <summary>
            List containing the children layers
            </summary>
        </member>
        <member name="P:WorldWind.Renderable.RenderableObjectList.Count">
            <summary>
            Number of child objects.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Update(WorldWind.DrawArgs)">
            <summary>
            Update ROL - this is on the worker thread and is the only thing that writes to the child list.
            While this makes adds and deletes occur slower than before it eliminates both the deadlock when 
            a thread with a lock updates the UI when the main thread has the lock already and the non-atomic
            add/deletes
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Render(WorldWind.DrawArgs)">
            <summary>
            The ROL Render actually doesn't get called much because the World class used to do ROL rendering.
            Moved this code into Render(drawArgs, priority) so if your override Render, make sure to call either
            call that function OR replicate it's behavior.
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.RenderChildren(WorldWind.DrawArgs,WorldWind.Renderable.RenderPriority)">
            <summary>
            This used to be done in the World class but moved here so folks could override a ROL's behavior.
            </summary>
            <param name="drawArgs"></param>
            <param name="priority"></param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.GetWriterLock(System.Int32)">
            <summary>
            Tries to get the writer lock for the children list.  Each try takes 10ms
            </summary>
            <param name="retrys">How many times to try</param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Add(WorldWind.Renderable.RenderableObject)">
            <summary>
            Add a child object to this layer.  If the new object has the same name as an existing object in this 
            ROL it gets a number appended.  If the new object is a ROL and there was already a ROL with the same 
            name then the children of the new ROL gets added to the old ROL.
            
            Not sure who uses this but the functionality was kept this way.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Remove(System.String)">
            <summary>
            Removes specified RO from this ROL
            </summary>
            <param name="objectName">Name of object to remove</param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Remove(WorldWind.Renderable.RenderableObject)">
            <summary>
            Removes specified RO from this ROL
            </summary>
            <param name="ro">RO to be removed.</param>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.RemoveAll">
            <summary>
            Removes all child ROs
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.Remove">
            <summary>
            Removes all deleted ROs.  Called only in Update (Worker thread)
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.RenderableObjectList.UpdateRenderable(WorldWind.Renderable.RenderableObject,WorldWind.Renderable.RenderableObject)">
            <summary>
            Sorts the children list according to priority - ONLY called in worker thread (in Update())
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.GeoSpatialDownloadRequest.#ctor(WorldWind.Renderable.QuadTile,WorldWind.ImageStore,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.GeoSpatialDownloadRequest"/> class.
            </summary>
            <param name="quadTile"></param>
        </member>
        <member name="P:WorldWind.Renderable.GeoSpatialDownloadRequest.IsDownloading">
            <summary>
            Whether the request is currently being downloaded
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.ScreenOverlay">
            <summary>
            Summary description for ScreenOverlay.
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.ShapeLayer">
            <summary>
            Summary description for ShapeLayer.
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.ShapeLayer.#ctor(System.String,WorldWind.World,System.Double,System.String,System.Double,System.Double,Microsoft.DirectX.Direct3D.Font,System.Drawing.Color,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.ShapeLayer"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="Altitude"></param>
            <param name="masterFilePath"></param>
            <param name="minDisplayAltitude"></param>
            <param name="maxDisplayAltitude"></param>
            <param name="font"></param>
            <param name="color"></param>
            <param name="scalarKey"></param>
            <param name="showBoundaries"></param>
            <param name="showFilledPolygons"></param>
        </member>
        <member name="T:WorldWind.Renderable.TerrainPath">
            <summary>
            Class used to create and render a terrain following path
            TODO: Re-Implement terrain mapping based on new TerrainAccessor functionality
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TerrainPath.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.String,System.Single,System.Drawing.Color,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.TerrainPath"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="minDisplayAltitude"></param>
            <param name="maxDisplayAltitude"></param>
            <param name="terrainFileName"></param>
            <param name="heightAboveSurface"></param>
            <param name="lineColor"></param>
            <param name="terrainAccessor"></param>
        </member>
        <member name="M:WorldWind.Renderable.TerrainPath.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.IO.BinaryReader,System.Int64,System.Int64,System.Double,System.Double,System.Double,System.Double,System.Single,System.Drawing.Color,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.TerrainPath"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="minDisplayAltitude"></param>
            <param name="maxDisplayAltitude"></param>
            <param name="dataArchiveReader"></param>
            <param name="fileOffset"></param>
            <param name="fileSize"></param>
            <param name="north"></param>
            <param name="south"></param>
            <param name="east"></param>
            <param name="west"></param>
            <param name="heightAboveSurface"></param>
            <param name="lineColor"></param>
            <param name="terrainAccessor"></param>
        </member>
        <member name="M:WorldWind.Renderable.TerrainPath.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new point to the terrain path
            </summary>
            <param name="x">Lat</param>
            <param name="y">Lon</param>
            <param name="z">Alt</param>
        </member>
        <member name="T:WorldWind.Renderable.TiledPlacenameSet">
            <summary>
            Placename Layer that uses a Directory of xml files and extract place names 
            based on current lat/lon/viewrange
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TiledPlacenameSet.m_minimumDistanceSq">
            <summary>
            Minimum distance from camera to label squared
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TiledPlacenameSet.m_maximumDistanceSq">
            <summary>
            Maximum distance from camera to label squared
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TiledPlacenameSet.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.Double,System.String,Microsoft.DirectX.Direct3D.FontDescription,System.Drawing.Color,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.TiledPlacenameSet"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="altitude"></param>
            <param name="maximumDisplayAltitude"></param>
            <param name="minimumDisplayAltitude"></param>
            <param name="placenameListFilePath"></param>
            <param name="fontDescription"></param>
            <param name="color"></param>
            <param name="iconFilePath"></param>
        </member>
        <member name="F:WorldWind.Renderable.TiledPlacenameSet.curPlaceNameIndex">
            <summary>
            // Index into currently loaded array for already loaded test
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TiledPlacenameSet.UpdateNames(WorldWind.Renderable.WorldWindPlacenameFile,System.Collections.ArrayList,WorldWind.DrawArgs)">
            <summary>
            Loads visible place names from one file.
            </summary>
        </member>
        <member name="T:WorldWind.Renderable.TiledWFSPlacenameSet">
            <summary>
            Placename Layer that uses a Directory of xml files and extract place names 
            based on current lat/lon/viewrange
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TiledWFSPlacenameSet.m_minimumDistanceSq">
            <summary>
            Minimum distance from camera to label squared
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TiledWFSPlacenameSet.m_maximumDistanceSq">
            <summary>
            Maximum distance from camera to label squared
            </summary>
        </member>
        <member name="F:WorldWind.Renderable.TiledWFSPlacenameSet.m_placenameBaseUrl">
            <summary>
            Wfs Base Url from which to fetch placenames
            Typically http://host/wfs?service=WFS&amp;request=GetFeature&amp;FeatureID=cite:BrasilCid
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TiledWFSPlacenameSet.#ctor(System.String,WorldWind.World,System.Double,System.Double,System.Double,System.String,System.String,System.String,Microsoft.DirectX.Direct3D.FontDescription,System.Drawing.Color,System.String,WorldWind.Cache)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Renderable.TiledPlacenameSet"/> class.
            </summary>
            <param name="name"></param>
            <param name="parentWorld"></param>
            <param name="altitude"></param>
            <param name="maximumDisplayAltitude"></param>
            <param name="minimumDisplayAltitude"></param>
            <param name="placenameBaseUrl"></param>
            <param name="labelfield">Field in Feature type used as PlacenameLabel</param>
            <param name="fontDescription"></param>
            <param name="color"></param>
            <param name="iconFilePath"></param>
        </member>
        <member name="F:WorldWind.Renderable.TiledWFSPlacenameSet.curPlaceNameIndex">
            <summary>
            // Index into currently loaded array for already loaded test
            </summary>
        </member>
        <member name="M:WorldWind.Renderable.TiledWFSPlacenameSet.UpdateNames(WorldWind.Renderable.WorldWindWFSPlacenameFile,System.Collections.ArrayList,WorldWind.DrawArgs)">
            <summary>
            Loads visible place names from one file.
            If cache files are appropriately named only files in view are hit
            </summary>
        </member>
        <member name="T:WorldWind.InternalWebBrowserPanel">
            <summary>
            Internal Web Browser panel with url bar and simple navigation buttons
            </summary>
        </member>
        <member name="M:WorldWind.InternalWebBrowserPanel.webBrowserBack_Click(System.Object,System.EventArgs)">
            <summary>
            Following methods handle navigation buttons for the web browser.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:WorldWind.KMLDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.KMLDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WorldWind.KMLDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.KMLReader.KMLNetworkLink">
            <summary>
            Represents a NetworkLink. Updates a layer from a remote source periodically.
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLNetworkLink.#ctor(WorldWind.KMLReader.KMLParser,WorldWind.Renderable.Icons,System.String,System.Int32,System.Int32)">
            <summary>
            Creates and initializes a new NetworkLink
            </summary>
            <param name="owner">The owner of this NetworkLink</param>
            <param name="layer">The layer to update the NetworkLink to</param>
            <param name="url">The URL to update the NetworkLink from</param>
            <param name="tickTime">The interval, in milliseconds, at which the NetworkLink should update</param>
            <param name="viewTime">The time, in milliseconds, after the view stops moving which the NetworkLink should update</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLNetworkLink.GetBBox">
            <summary>
            Gets the visible bounding box for the application in lat/lon degrees.
            </summary>
            <returns>An array of Angles in minx.miny,maxx, maxy order</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLNetworkLink.Fire">
            <summary>
            Fires off a download
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLNetworkLink.timer_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Downloads a KML/KMZ file from the given URL
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLNetworkLink.Dispose">
            <summary>
            Stops the timer
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseStyles(System.Xml.XmlDocument,System.String)">
            <summary>
            Parses Styles and StyleMaps and stores them
            </summary>
            <param name="doc">The document to load styles from</param>
            <param name="KmlPath">The path to the KML file that is being loaded</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseRenderables(System.Xml.XmlNode,WorldWind.Renderable.Icons,System.String)">
            <summary>
            Parses everything that is not a style
            </summary>
            <param name="inNode">The node containing renderables</param>
            <param name="layer">The layer to add the resulting renderables to</param>
            <param name="KmlPath">The path to the KML file that is being loaded</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseFolders(System.Xml.XmlNode,WorldWind.Renderable.Icons,System.String)">
            <summary>
            Locates Folders and parses them recursively
            </summary>
            <param name="inNode">The XmlNode to extract the Folders from</param>
            <param name="layer">The layer to add the folders to</param>
            <param name="KmlPath">The path to the KML file that is being loaded</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseNetworkLinks(System.Xml.XmlNode,WorldWind.Renderable.Icons)">
            <summary>
            Parse NetworkLinks
            </summary>
            <param name="inNode">The XmlNode to load NetworkLinks from</param>
            <param name="layer">The layer to add NetworkLinks to</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParsePlacemarks(System.Xml.XmlNode,WorldWind.Renderable.Icons,System.String)">
            <summary>
            Parses Placemarks
            </summary>
            <param name="inNode">The node containing Placemarks</param>
            <param name="layer">The layer to add the resulting icons or folders to</param>
            <param name="KmlPath">The path to the KML file that is being loaded</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseGroundOverlays(System.Xml.XmlNode,WorldWind.Renderable.Icons)">
            <summary>
            Parse Ground Overlays
            </summary>
            <param name="inNode">The node containing Ground Overlays</param>
            <param name="layer">The layer to add the resulting Ground Overlays to</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseScreenOverlays(System.Xml.XmlNode,WorldWind.Renderable.Icons)">
            <summary>
            This Method parses screen overlays and adds to renderables
             using ScreenOverlay Object
            </summary>
            <param name="inNode">The node containing the Screen Overlay</param>
            <param name="layer">The layer to add the resulting Screen Overlay to</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseLineStrings(System.Xml.XmlNode,WorldWind.Renderable.Icons)">
            <summary>
            Parses LineStrings
            </summary>
            <param name="inNode">The node containing LineStrings</param>
            <param name="layer">The layer to add the resulting lines to</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseMultiGeometry(System.Xml.XmlNode,WorldWind.Renderable.Icons)">
            <summary>
            Parses Multi Polygons
            </summary>
            <param name="inNode">The node containing Polygons</param>
            <param name="layer">The layer to add the resulting Polygons to</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParsePolygons(System.Xml.XmlNode,WorldWind.Renderable.Icons)">
            <summary>
            Parses Polygons
            </summary>
            <param name="inNode">The node containing Polygons</param>
            <param name="layer">The layer to add the resulting Polygons to</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseCoordinates(System.Xml.XmlNode)">
            <summary>
            Parse a list of coordinates
            </summary>
            <param name="coordinatesNode">The node containing coordinates to parse</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.ParseCoordinate(System.String)">
            <summary>
            Parses a string containing a coordinate
            </summary>
            <param name="loc">The string containing a coordinate</param>
            <returns>The parsed coordinate</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.GetStyle(System.Xml.XmlNode,WorldWind.KMLReader.KMLParser.Style,System.String)">
            <summary>
            Modifies a style with Style tags loaded from an XmlNode
            </summary>
            <param name="style">The XmlNode containing override information</param>
            <param name="oldStyle">The style to override</param>
            <param name="KmlPath">The path to the KML file that is being loaded</param>
            <returns>The style with overridden values</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.GetSubImage(WorldWind.KMLReader.KMLParser.Style,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a rectangular selection from a given style
            </summary>
            <param name="style"></param>
            <param name="x">x</param>
            <param name="y">y</param>
            <param name="w">width</param>
            <param name="h">height</param>
            <returns>The generated bitmap</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.GetDiskImage(System.String)">
            <summary>
            Retrieves a bitmap from cache or a file on disk
            </summary>
            <param name="filename">The filename to open the bitmap from</param>
            <returns>The found bitmap</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.GetWebImage(System.String)">
            <summary>
            Retrieves a bitmap from cache or the web
            </summary>
            <param name="filename">The URI to download the bitmap from</param>
            <returns>The downloaded bitmap</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.LocateStyle(System.Xml.XmlNode,System.String)">
            <summary>
            Locates a referenced style
            </summary>
            <param name="node"></param>
            <param name="KmlPath"></param>
            <returns>The located style, or null if none was found</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.CreateIcon(WorldWind.Renderable.Icons,System.String,System.String,System.String,System.Single,System.Single,System.Single,WorldWind.KMLReader.KMLParser.Style,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Creates a scaled icon on the globe
            </summary>
            <param name="layer">The icons</param>
            <param name="Name">The name of the item</param>
            <param name="Desc">The description</param>
            <param name="Uri">The uri for the icon</param>
            <param name="Lat">The latitude for the icon</param>
            <param name="Lon">The longitude for the icon</param>
            <param name="Alt">The altitude to draw the icon at</param>
            <param name="style">The style to draw the icon</param>
            <param name="bRotated">The rotation flag</param>
            <param name="bExtrude">The extrude flag</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.SearchUri(System.String)">
            <summary>
            Returns the URI found in the first href tag
            </summary>
            <param name="source">The string to search</param>
            <returns>The found URI, or null if no URI was found</returns>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.RemoveUnusedIcons(WorldWind.Renderable.Icons)">
            <summary>
            Removes unused icons from a given layer
            </summary>
            <param name="layer">The layer to remove icons from</param>
        </member>
        <member name="T:WorldWind.KMLReader.KMLParser.Style">
            <summary>
            Helper class. Represents a KML Style or StyleMap
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.Style.#ctor">
            <summary>
            Creates a new Style
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.Style.#ctor(System.String)">
            <summary>
            Creates a new Style
            </summary>
            <param name="normalIcon">The normal Bitmap to use for this Style</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.Style.HexToColor(System.String)">
            <summary>
            Convert a hex string to a .NET Color object.
            </summary>
            <param name="hexColor">a hex string: "FFFFFF", "#000000"</param>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.Style.ExtractHexDigits(System.String)">
            <summary>
            Extract only the hex digits from a string.
            </summary>
        </member>
        <member name="T:WorldWind.KMLReader.KMLParser.LLA">
            <summary>
            LatLonAlt
            </summary>
        </member>
        <member name="M:WorldWind.KMLReader.KMLParser.LLA.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new instance of LLA
            </summary>
            <param name="lat">Latitude</param>
            <param name="lon">Longitude</param>
            <param name="alt">Altitude</param>
        </member>
        <member name="P:WorldWind.Menu.MenuBar.IsActive">
            <summary>
            是否激活
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuBar.AddToolsMenuButton(WorldWind.Menu.MenuButton)">
            <summary>
            Adds a tool button to the bar
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuBar.AddToolsMenuButton(WorldWind.Menu.MenuButton,System.Int32)">
            <summary>
            Adds a tool button to the bar
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuBar.RemoveToolsMenuButton(WorldWind.Menu.MenuButton)">
            <summary>
            Removes a layer button from the bar if it is found.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuBar.AddLayersMenuButton(WorldWind.Menu.MenuButton)">
            <summary>
            Adds a layer button to the bar
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuBar.AddLayersMenuButton(WorldWind.Menu.MenuButton,System.Int32)">
            <summary>
            Adds a layer button to the bar
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuBar.RemoveLayersMenuButton(WorldWind.Menu.MenuButton)">
            <summary>
            Removes a layer button from the bar if it is found.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.MenuButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Menu.MenuButton"/> class.
            </summary>
        </member>
        <member name="T:WorldWind.Menu.LayerManagerItemInfo">
            <summary>
            Summary description for LayerManagerItemInfo.
            </summary>
        </member>
        <member name="F:WorldWind.Menu.LayerManagerItemInfo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerItemInfo.#ctor(System.Collections.Hashtable)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Menu.LayerManagerItemInfo"/> class.
            </summary>
            <param name="itemHash"></param>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerItemInfo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerItemInfo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerButton.#ctor(System.String,WorldWind.World)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Menu.LayerManagerButton"/> class.
            </summary>
            <param name="iconImagePath"></param>
            <param name="parentWorld"></param>
        </member>
        <member name="P:WorldWind.Menu.LayerManagerMenu.ClientLeft">
            <summary>
            Client area X position of left side
            </summary>
        </member>
        <member name="P:WorldWind.Menu.LayerManagerMenu.ClientRight">
            <summary>
            Client area X position of right side
            </summary>
        </member>
        <member name="P:WorldWind.Menu.LayerManagerMenu.ClientTop">
            <summary>
            Client area Y position of top side
            </summary>
        </member>
        <member name="P:WorldWind.Menu.LayerManagerMenu.ClientBottom">
            <summary>
            Client area Y position of bottom side
            </summary>
        </member>
        <member name="P:WorldWind.Menu.LayerManagerMenu.ClientWidth">
            <summary>
            Client area width
            </summary>
        </member>
        <member name="P:WorldWind.Menu.LayerManagerMenu.ClientHeight">
            <summary>
            Client area height
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerMenu.#ctor(WorldWind.World,WorldWind.Menu.MenuButton)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Menu.LayerManagerMenu"/> class.
            </summary>
            <param name="parentWorld"></param>
            <param name="parentButton"></param>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerMenu.ShowContextMenu(System.Int32,System.Int32,WorldWind.Menu.LayerMenuItem)">
            <summary>
            Displays the layer manager context menu for an item.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="item"></param>
        </member>
        <member name="M:WorldWind.Menu.LayerManagerMenu.GetNumberOfUncollapsedItems">
            <summary>
            Calculate the number of un-collapsed items in the tree.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerMenuItem.GetNumberOfUncollapsedItems">
            <summary>
            Calculate the number of un-collapsed items in the tree.
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerMenuItem.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Detect expand arrow mouse over
            </summary>
        </member>
        <member name="M:WorldWind.Menu.LayerMenuItem.#ctor(WorldWind.Menu.LayerManagerMenu,WorldWind.Renderable.RenderableObject)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Menu.LayerMenuItem"/> class.
            </summary>
            <param name="parent"></param>
            <param name="renderableObject"></param>
        </member>
        <member name="M:WorldWind.Menu.LayerShortcutMenuButton.#ctor(System.String,WorldWind.Renderable.RenderableObject)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Menu.LayerShortcutMenuButton"/> class.
            </summary>
            <param name="imageFilePath"></param>
            <param name="ro"></param>
        </member>
        <member name="T:WorldWind.PointSpriteVertex">
            <summary>
            Custom vertex for point sprites.
            </summary>
        </member>
        <member name="M:WorldWind.RayCasting.#ctor">
            <summary>
            This class has only static methods.
            </summary>
        </member>
        <member name="M:WorldWind.RayCasting.RayIntersectionWithTerrain(WorldWind.Point3d,WorldWind.Point3d,System.Double,System.Double,WorldWind.Angle@,WorldWind.Angle@,WorldWind.World)">
            <summary>
            Find the intersection of a ray with the terrain.
            </summary>
            <param name="p1">Cartesian coordinate of starting point</param>
            <param name="p2">Cartesian coordinate of end point</param>
            <param name="samplingPrecision">Sample length in meter</param>
            <param name="resultPrecision">Final sampling length in meter</param>
            <param name="latitude">Out : intersection latitude</param>
            <param name="longitude">Out : intersection longitude</param>
            <param name="world">Current world</param>
            <returns>NaN if no intersection found</returns>
        </member>
        <member name="T:WorldWind.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.back">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.close">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.forward">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.georss_small">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.go">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.outline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:WorldWind.BinaryTriangleTree">
            <summary>
            Summary description for BinaryTriangleTree.
            </summary>
        </member>
        <member name="T:WorldWind.BoundingBox">
            <summary>
            The closed volume that completely contains a set of objects.
            </summary>
        </member>
        <member name="M:WorldWind.BoundingBox.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.BoundingSphere"/> class.
            </summary>
            <param name="v0"></param>
            <param name="v1"></param>
            <param name="v2"></param>
            <param name="v3"></param>
            <param name="v4"></param>
            <param name="v5"></param>
            <param name="v6"></param>
            <param name="v7"></param>
        </member>
        <member name="M:WorldWind.BoundingBox.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.BoundingSphere"/> class
            from a set of lat/lon values (degrees)
            </summary>
            <param name="south"></param>
            <param name="north"></param>
            <param name="west"></param>
            <param name="east"></param>
            <param name="radius1"></param>
            <param name="radius2"></param>
        </member>
        <member name="M:WorldWind.BoundingBox.CalcRelativeScreenArea(WorldWind.Camera.CameraBase)">
            <summary>
            Calculate the screen area (pixels) covered by the bottom of the bounding box.
            </summary>
        </member>
        <member name="T:WorldWind.BoundingSphere">
            <summary>
            Bounding sphere.  The tightest sphere that will fit the bounded object, 
            that is, the smallest radius sphere that all points lie within. 
            </summary>
        </member>
        <member name="M:WorldWind.BoundingSphere.#ctor(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.BoundingSphere"/> class
            from a center point and a radius.
            </summary>
        </member>
        <member name="M:WorldWind.BoundingSphere.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.BoundingSphere"/> class
            from a set of lat/lon values (degrees)
            </summary>
        </member>
        <member name="T:WorldWind.Cache">
            <summary>
            管理硬盘中的缓存
            </summary>
        </member>
        <member name="M:WorldWind.Cache.#ctor(System.String,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Cache"/> class.
            </summary>
            <param name="cacheDirectory">Location of the cache files.</param>
            <param name="cleanupFrequencyInterval">Frequency of cache cleanup.</param>
            <param name="totalRunTime">Total duration application has been running so far.</param>
        </member>
        <member name="M:WorldWind.Cache.#ctor(System.String,System.Int64,System.Int64,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="cacheDirectory">Location of the cache files.</param>
            <param name="cleanupFrequencyInterval">Frequency of cache cleanup.</param>
            <param name="totalRunTime">Total duration application has been running so far.</param>
        </member>
        <member name="M:WorldWind.Cache.OnTimer(System.Object)">
            <summary>
            Monitors the cache, makes sure it stays within limits.
            </summary>
        </member>
        <member name="F:WorldWind.Camera.CameraBase._headTracking">
            <summary>
            Whether or not we should allow headtracking 
            </summary>
        </member>
        <member name="F:WorldWind.Camera.CameraBase._headTilt">
            <summary>
            Modifies camera tilt based on head position
            </summary>
        </member>
        <member name="F:WorldWind.Camera.CameraBase._headSwivel">
            <summary>
            Modifies camera swivel based on head position
            </summary>
        </member>
        <member name="F:WorldWind.Camera.CameraBase._headZoom">
            <summary>
            Modifies distance to target based on head position
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.#ctor(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Camera.CameraBase"/> class.
            </summary>
            <param name="targetPosition"></param>
            <param name="radius">Planet's radius in meters</param>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.Altitude">
            <summary>
            Altitude above sea level (meters)
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.AltitudeAboveTerrain">
            <summary>
            Altitude above terrain (meters)
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.TargetAltitude">
            <summary>
            Target altitude above sea level (meters) (after travel)
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.TrueViewRange">
            <summary>
            Angle from horizon - center earth - horizon in opposite directon
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.Position">
            <summary>
            Camera position (World XYZ coordinates)
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.WorldRadius">
            <summary>
            The planet's radius in meters
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.Fov">
            <summary>
            Field of view (degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.Distance">
            <summary>
            Distance to target position on ground.
            </summary>
        </member>
        <member name="P:WorldWind.Camera.CameraBase.TargetDistance">
            <summary>
            Distance to target position on ground (after traveling to target)
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.Space">
            <summary>
            Resets the camera settings as dictated in WW-788
            Two consecutive resets closer than DoubleTapDelay ms apart performs a full reset.
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.Reset">
            <summary>
            Resets the camera settings
            Two consecutive resets closer than DoubleTapDelay ms apart performs a full reset.
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.PointGoto(System.Double,System.Double)">
            <summary>
            Sets camera position.
            </summary>
            <param name="lat">Latitude in decimal degrees</param>
            <param name="lon">Longitude in decimal degrees</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.PointGoto(WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Sets camera position.
            </summary>
            <param name="lat">Latitude in decimal degrees</param>
            <param name="lon">Longitude in decimal degrees</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.SetPosition(System.Double,System.Double)">
            <summary>
            Sets camera position.
            </summary>
            <param name="lat">Latitude in decimal degrees</param>
            <param name="lon">Longitude in decimal degrees</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.SetPosition(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets camera position.
            </summary>
            <param name="lat">Latitude in decimal degrees</param>
            <param name="lon">Longitude in decimal degrees</param>
            <param name="heading">Heading in decimal degrees</param>
            <param name="_altitude">Altitude above ground level in meters</param>
            <param name="tilt">Tilt in decimal degrees</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.SetPosition(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets camera position.
            </summary>
            <param name="lat">Latitude in decimal degrees</param>
            <param name="lon">Longitude in decimal degrees</param>
            <param name="heading">Heading in decimal degrees</param>
            <param name="_altitude">Altitude above ground level in meters</param>
            <param name="tilt">Tilt in decimal degrees</param>
            <param name="bank">Camera bank (roll) in decimal degrees</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.PickingRayIntersection(System.Int32,System.Int32,WorldWind.Angle@,WorldWind.Angle@)">
            <summary>
            Calculates latitude/longitude for given screen coordinate.
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.PickingRayIntersectionWithTerrain(System.Int32,System.Int32,WorldWind.Angle@,WorldWind.Angle@,WorldWind.World)">
            <summary>
            Calculates latitude/longitude for given screen coordinate.
            Cast a ray to the terrain geometry (Patrick Murris - march 2007)
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.ComputeProjectionMatrix(Microsoft.DirectX.Direct3D.Viewport)">
            <summary>
             Calculates the projection transformation matrix, which transforms 3-D camera or 
             view space coordinates into 2-D screen coordinates.
            </summary>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.ZoomStepped(System.Single)">
            <summary>
            Digital zoom (keyboard/mouse wheel style)
            </summary>
            <param name="ticks">Positive value for zoom in, negative for zoom out.</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.Zoom(System.Single)">
            <summary>
            Zoom camera in/out (distance) 
            </summary>
            <param name="percent">Positive value = zoom in, negative=out</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.Pan(WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Pan the camera using delta values
            </summary>
            <param name="lat">Latitude offset</param>
            <param name="lon">Longitude offset</param>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.Project(Microsoft.DirectX.Vector3)">
            <summary>
            Projects a point from world to screen coordinates.
            </summary>
            <param name="point">Point in world space</param>
            <returns>Point in screen space</returns>
        </member>
        <member name="M:WorldWind.Camera.CameraBase.getViewBoundingBox">
            <summary>
            Gets the visible bounding box for the application in degrees.
            </summary>
            <returns>An array of Angles in minx.miny,maxx, maxy order</returns>
        </member>
        <member name="M:WorldWind.Camera.WorldCamera.Zoom(System.Single)">
            <summary>
            放大缩小
            </summary>
            <param name="percent">Positive value = zoom in, negative=out</param>
        </member>
        <member name="T:WorldWind.Camera.MomentumCamera">
            <summary>
            Normal camera with MomentumCamera. (perhaps merge with the normal camera)
            </summary>
        </member>
        <member name="M:WorldWind.Camera.MomentumCamera.#ctor(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Camera.MomentumCamera"/> class.
            </summary>
            <param name="targetPosition"></param>
            <param name="radius"></param>
        </member>
        <member name="M:WorldWind.Camera.MomentumCamera.Pan(WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Pan the camera using delta values
            </summary>
            <param name="lat">Latitude offset</param>
            <param name="lon">Longitude offset</param>
        </member>
        <member name="T:WorldWind.ConfigurationLoader">
            <summary>
            配置加载
            </summary>
        </member>
        <member name="M:WorldWind.ConfigurationLoader.ParseDouble(System.String)">
            <summary>
            string 转 double
            </summary>
            <param name="s">Input string (can not be null)</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.DrawArgs">
            <summary>
            渲染参数类
            </summary>
        </member>
        <member name="F:WorldWind.DrawArgs.m_textures">
            <summary>
            所有的icon 贴图表
            </summary>
        </member>
        <member name="F:WorldWind.DrawArgs.CurrentFrameStartTicks">
            <summary>
            一帧的绝对时间
            </summary>
        </member>
        <member name="F:WorldWind.DrawArgs.LastFrameSecondsElapsed">
            <summary>
            上一帧开始和当前帧开始之间的秒数
            </summary>
        </member>
        <member name="M:WorldWind.DrawArgs.Present">
            <summary>
            渲染完后显示渲染图片
            </summary>
        </member>
        <member name="M:WorldWind.DrawArgs.CreateFont(System.String,System.Single)">
            <summary>
            创建字体
            </summary>
        </member>
        <member name="P:WorldWind.DrawArgs.MouseCursor">
            <summary>
            激活的鼠标cusor
            </summary>
        </member>
        <member name="P:WorldWind.DrawArgs.SecondsSinceLastFrame">
            <summary>
            返回上次帧呈现操作启动后所经过的时间
            </summary>
        </member>
        <member name="T:WorldWind.CursorType">
            <summary>
            鼠标状态
            </summary>
        </member>
        <member name="T:WorldWind.GeographicBoundingBox">
            <summary>
            Summary description for GeographicBoundingBox.
            </summary>
        </member>
        <member name="T:WorldWind.Net.GeoSpatialDownloadRequest">
            <summary>
            Base class for geo-spatial download requests
            </summary>
        </member>
        <member name="M:WorldWind.Net.GeoSpatialDownloadRequest.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Net.GeoSpatialDownloadRequest"/> class.
            </summary>
            <param name="owner"></param>
            <param name="uri"></param>
        </member>
        <member name="M:WorldWind.Net.GeoSpatialDownloadRequest.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Net.GeoSpatialDownloadRequest"/> class.
            </summary>
            <param name="owner"></param>
        </member>
        <member name="P:WorldWind.Net.GeoSpatialDownloadRequest.West">
            <summary>
            Western bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Net.GeoSpatialDownloadRequest.East">
            <summary>
            Eastern bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Net.GeoSpatialDownloadRequest.North">
            <summary>
            Northern bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Net.GeoSpatialDownloadRequest.South">
            <summary>
            Southern bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Net.GeoSpatialDownloadRequest.Color">
            <summary>
            Color used to identify this layer (download info)
            </summary>
        </member>
        <member name="T:WorldWind.Net.Wms.WmsImageStore">
            <summary>
            计算WMS图层的url
            </summary>
        </member>
        <member name="P:WorldWind.Net.Wms.WmsImageStore.TextureSizePixels">
            <summary>
            Bitmap width/height
            </summary>
        </member>
        <member name="M:WorldWind.Net.WorldWindUri.Parse(System.String)">
            <summary>
            构建url字符串
            Updated by CM = worldwind://goto/lat=51.41&amp;lon=5.479
            	   or	worldwind://goto/lat=51.41&amp;lon5.479&amp;view=0.25
            		or	
            worldwind://wmsimage=displayname%3Dtestlayer%2526transparency%3D50%2526altitude%3D10000%2526link%3Dhttp%3A%2F%2Fviz.globe.gov%2Fviz-bin%2Fwmt.cgi%3Fservice%3DWMS%26version%3D1.1.1%26request%3DGetMap%26layers%3DRATMAX%26format%3Dimage%2Fpng%26width%3D512%26height%3D512%26bbox%3D-180%2C-90%2C180%2C90%26srs%3DEPSG%3A4326
            </summary>
            <param name="worldWindUri"></param>
            <returns></returns>
        </member>
        <member name="P:WorldWind.Net.WorldWindUri.Layer">
            <summary>
            Layer name to enable for this uri
            </summary>
        </member>
        <member name="M:WorldWind.OnScreenMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.OnScreenMessage"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.OnScreenMessage.#ctor(System.Double,System.Double,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.OnScreenMessage"/> class.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="message"></param>
        </member>
        <member name="T:WorldWind.ImageHelper">
            <summary>
            各种图像处理.
            </summary>
        </member>
        <member name="M:WorldWind.ImageHelper.IsGdiSupportedImageFormat(System.String)">
            <summary>
            基于文件扩展名的测试是否是由GDI+图像加载器支持的图像格式
            </summary>
            <param name="imageFileName">完整路径或只是文件名包括扩展名.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadTexture(System.String)">
            <summary>
            从硬盘中加载图片到Texture
            </summary>
            <param name="textureFileName">路径</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadTexture(System.String,System.Int32,Microsoft.DirectX.Direct3D.Format)">
            <summary>
            从硬盘中加载图片到Texture
            </summary>
            <param name="textureFileName">路径</param>
            <param name="colorKey">透明</param>
            <param name="textureFormat">返回纹理的所需像素格式</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadTexture(System.String,System.Int32)">
            <summary>
            从硬盘中加载图片到Texture
            </summary>
            <param name="textureFilename">路径</param>
            <param name="colorKey">透明值</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadTexture(System.String,System.Int32,System.Int32)">
            <summary>
            Loads an image file from disk into a texture and makes a color range transparent.
            </summary>
            <param name="textureFileName">Path/filename to the image file</param>
            <param name="transparentRangeDarkColor">Color for start of transparent range.</param>
            <param name="transparentRangeBrightColor">Color for end of transparent range.</param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadTexture(System.IO.Stream)">
            <summary>
            Creates a texture from a data stream.
            </summary>
            <param name="textureStream">Stream containing the image file</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadTexture(System.IO.Stream,System.Int32,Microsoft.DirectX.Direct3D.Format)">
            <summary>
            Creates a texture from a data stream.
            </summary>
            <param name="textureStream">Stream containing the image file</param>
            <param name="colorKey">Transparent color. Any pixels in the image with this color will be made transparent.</param>
            <param name="textureFormat">Desired pixel format of the returned texture.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadImage(System.String)">
            <summary>
            Loads image from file. Returns dummy image on load fail.
            </summary>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadCursor(System.String)">
            <summary>
            Loads a custom mouse cursor from file
            </summary>
            <param name="relativePath">Path and filename of the .cur file relative to Data\Icons\Interface</param>
        </member>
        <member name="M:WorldWind.ImageHelper.LoadIconTexture(System.String)">
            <summary>
            Loads an icon texture from a file
            </summary>
            <param name="relativePath">Path and filename relative to Data\Icons</param>
        </member>
        <member name="M:WorldWind.ImageHelper.FindResource(System.String)">
            <summary>
            Tries it's best to locate an image file specified using relative path.
            </summary>
            <param name="relativePath"></param>
        </member>
        <member name="M:WorldWind.ImageHelper.ConvertToDxt1(System.String,System.String,System.Boolean)">
            <summary>
            Converts an image in any format readable by GDI+ to a DXT1 DDS file.
            </summary>
            <param name="originalImagePath">Input file (any supported format).</param>
            <param name="outputDdsPath">Output file to be created.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.ConvertToDxt1(System.IO.Stream,System.String)">
            <summary>
            Converts an image in any format readable by GDI+ to a DXT1 DDS file.
            </summary>
            <param name="originalImageStream">Stream containing a bitmap.</param>
            <param name="outputDdsPath">output file (any supported format).</param>
        </member>
        <member name="M:WorldWind.ImageHelper.ConvertToDxt3(System.String,System.String,System.Boolean)">
            <summary>
            Converts an image in any format readable by GDI+ to a DXT3 DDS file.
            </summary>
            <param name="originalImagePath">Input file (any supported format).</param>
            <param name="outputDdsPath">Output file to be created.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.ConvertToDxt3(System.IO.Stream,System.String)">
            <summary>
            Converts an image in any format readable by GDI+ to a DXT3 DDS file.
            </summary>
            <param name="originalImageStream">Stream containing a bitmap.</param>
            <param name="outputDdsPath">Output file to be created.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.ConvertToDds(System.String,System.String,Microsoft.DirectX.Direct3D.Format,System.Boolean)">
            <summary>
            Converts an image in any format readable by GDI+ to a DDS file.
            </summary>
            <param name="originalImagePath">Input file (any supported format).</param>
            <param name="outputDdsPath">Output file to be created.</param>
            <param name="format">DirectX format of file.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.ConvertToDds(System.IO.Stream,System.String,Microsoft.DirectX.Direct3D.Format)">
            <summary>
            Converts an image in any format readable by GDI+ to a DDS file.
            </summary>
            <param name="originalImageStream">Input file (any supported format).</param>
            <param name="outputDdsPath">Output file to be created.</param>
            <param name="format">DirectX format of file.</param>
        </member>
        <member name="M:WorldWind.ImageHelper.CreateDefaultImage">
            <summary>
            当请求的位图不可用时，使用默认映像。.
            </summary>
        </member>
        <member name="T:WorldWind.ImageStore">
            <summary>
            用于计算本地映像路径和远程下载URL的基类
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.LevelZeroTileSizeDegrees">
            <summary>
            Coverage of outer level 0 bitmaps (decimal degrees)
            Level 1 has half the coverage, level 2 half of level 1 (1/4) etc.
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.ServerLogo">
            <summary>
            Server Logo path for Downloadable layers
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.LevelCount">
            <summary>
            Number of detail levels
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.ImageExtension">
            <summary>
            File extension of the source image file format
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.CacheDirectory">
            <summary>
            Cache subdirectory for this layer
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.DataDirectory">
            <summary>
            Data directory for this layer (permanently stored images)
            </summary>
        </member>
        <member name="P:WorldWind.ImageStore.DuplicateTexturePath">
            <summary>
            Default texture to be used (always ocean?)
            Can be either file or url
            </summary>
        </member>
        <member name="M:WorldWind.ImageStore.GetLocalPath(WorldWind.Renderable.QuadTile)">
             <summary>
             Returns a path to be used for local storage of the tile
             Checks through various places before just assinging to cache, in this order.
             If it finds a tile in any of these places, it immediately returns the path.
             1. The "Data" directory (if existent), under its folder structure
             2. If the QTS doesn't have a cache directory, it just returns the m_duplicateTexturePath
             3. If it has a cache directory, first with the default file extension, then checks for others
             4. If not found in any of these, it simply constructs the path 
                from cache directory and default extension, and returns that path
            
             This method also checks for tiles in the old, pre-1.4.1 cache structure if it can't find it
             in the new WWJ format.  If it can't find it in the old structure, it returns a WWJ-style
             path to store a new tile in.
             </summary>
        </member>
        <member name="M:WorldWind.ImageStore.GetDownloadUrl(WorldWind.Renderable.QuadTile)">
            <summary>
            Figure out how to download the image.
            TODO: Allow subclasses to have control over how images are downloaded, 
            not just the download url.
            </summary>
        </member>
        <member name="M:WorldWind.ImageStore.DeleteLocalCopy(WorldWind.Renderable.QuadTile)">
            <summary>
            Deletes the cached copy of the tile.
            </summary>
            <param name="qt"></param>
        </member>
        <member name="M:WorldWind.ImageStore.ConvertImage(Microsoft.DirectX.Direct3D.Texture,System.String)">
            <summary>
            Converts image file to DDS
            </summary>
        </member>
        <member name="T:WorldWind.LinearRing">
            <summary>
            Summary description for LinearRing.
            </summary>
        </member>
        <member name="T:WorldWind.LineFeature">
            <summary>
            Summary description for LineFeature.
            </summary>
        </member>
        <member name="F:WorldWind.LineFeature.NeedsUpdate">
            <summary>
            Boolean indicating whether or not the line needs rebuilding.
            </summary>
        </member>
        <member name="P:WorldWind.LineFeature.Extrude">
            <summary>
            Whether line should be extruded
            </summary>
        </member>
        <member name="P:WorldWind.LineFeature.ExtrudeUpwards">
            <summary>
            Whether extrusion should be upwards
            </summary>
        </member>
        <member name="P:WorldWind.LineFeature.ExtrudeHeight">
            <summary>
            Distance to extrude
            </summary>
        </member>
        <member name="P:WorldWind.LineFeature.ExtrudeToGround">
            <summary>
            Whether line should be extruded to the ground 
            (completely overrides other extrusion options)
            </summary>
        </member>
        <member name="P:WorldWind.LineFeature.MaxPoints">
            <summary>
            Sets the maximum number of points to grow this line.  
            If less than or equal to 0 then unlimited.
            </summary>
        </member>
        <member name="P:WorldWind.LineFeature.ImageUri">
            <summary>
            Uri of image to paint on 'wall', changing/updating requires re-initializing
            </summary>
        </member>
        <member name="M:WorldWind.LineFeature.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point to the end of the line.
            </summary>
            <param name="x">Lon</param>
            <param name="y">Lat</param>
            <param name="z">Alt (meters)</param>
        </member>
        <member name="M:WorldWind.LineFeature.AddPoint(WorldWind.Point3d)">
            <summary>
            Adds a point to the line at the end of the line.
            </summary>
            <param name="point">The Point3d object to add.</param>
        </member>
        <member name="M:WorldWind.LineFeature.UpdatePoint(WorldWind.Point3d,WorldWind.Point3d)">
            <summary>
            Updates a point if it exists within a LineFeature with a newpoint
            </summary>
            <param name="oldpoint"></param>
            <param name="newpoint"></param>
        </member>
        <member name="T:WorldWind.LineGraph">
            <summary>
            Summary description for LineGraph.
            </summary>
        </member>
        <member name="T:WorldWind.LineString">
            <summary>
            Summary description for LineString.
            </summary>
        </member>
        <member name="T:WorldWind.MathEngine">
            <summary>
            数学方法
            </summary>
        </member>
        <member name="M:WorldWind.MathEngine.SphericalToCartesian(System.Double,System.Double,System.Double)">
            <summary>
            Converts position in spherical coordinates (lat/lon/altitude) to cartesian (XYZ) coordinates.
            </summary>
            <param name="latitude">Latitude in decimal degrees</param>
            <param name="longitude">Longitude in decimal degrees</param>
            <param name="radius">Radius (OBS: not altitude)</param>
            <returns>Coordinates converted to cartesian (XYZ)</returns>
        </member>
        <member name="M:WorldWind.MathEngine.SphericalToCartesian(WorldWind.Angle,WorldWind.Angle,System.Double)">
            <summary>
            Converts position in spherical coordinates (lat/lon/altitude) to cartesian (XYZ) coordinates.
            </summary>
            <param name="latitude">Latitude (Angle)</param>
            <param name="longitude">Longitude (Angle)</param>
            <param name="radius">Radius (OBS: not altitude)</param>
            <returns>Coordinates converted to cartesian (XYZ)</returns>
        </member>
        <member name="M:WorldWind.MathEngine.SphericalToCartesianD(WorldWind.Angle,WorldWind.Angle,System.Double)">
            <summary>
            Converts position in spherical coordinates (lat/lon/altitude) to cartesian (XYZ) coordinates.
            </summary>
            <param name="latitude">Latitude (Angle)</param>
            <param name="longitude">Longitude (Angle)</param>
            <param name="radius">Radius (OBS: not altitude)</param>
            <returns>Coordinates converted to cartesian (XYZ)</returns>
        </member>
        <member name="M:WorldWind.MathEngine.CartesianToSpherical(System.Single,System.Single,System.Single)">
            <summary>
            Converts position in cartesian coordinates (XYZ) to spherical (lat/lon/radius) coordinates in radians.
            </summary>
            <returns>Coordinates converted to spherical coordinates.  X=radius, Y=latitude (radians), Z=longitude (radians).</returns>
        </member>
        <member name="M:WorldWind.MathEngine.CartesianToSphericalD(System.Double,System.Double,System.Double)">
            <summary>
            Converts position in cartesian coordinates (XYZ) to spherical (lat/lon/radius) coordinates in radians - Double precision
            </summary>
            <returns>Coordinates converted to spherical coordinates.  X=radius, Y=latitude (radians), Z=longitude (radians).</returns>
        </member>
        <member name="M:WorldWind.MathEngine.DegreesToRadians(System.Double)">
            <summary>
            Converts an angle in decimal degrees to angle in radians
            </summary>
            <param name="degrees">Angle in decimal degrees (0-360)</param>
            <returns>Angle in radians (0-2*Pi)</returns>
        </member>
        <member name="M:WorldWind.MathEngine.RadiansToDegrees(System.Double)">
            <summary>
            Converts an angle in radians to angle in decimal degrees 
            </summary>
            <param name="radians">Angle in radians (0-2*Pi)</param>
            <returns>Angle in decimal degrees (0-360)</returns>
        </member>
        <member name="M:WorldWind.MathEngine.SphericalDistanceDegrees(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Computes the angle (seen from the center of the sphere) between 2 sets of latitude/longitude values.
            </summary>
            <param name="latA">Latitude of point 1 (decimal degrees)</param>
            <param name="lonA">Longitude of point 1 (decimal degrees)</param>
            <param name="latB">Latitude of point 2 (decimal degrees)</param>
            <param name="lonB">Longitude of point 2 (decimal degrees)</param>
            <returns>Angle in decimal degrees</returns>
        </member>
        <member name="M:WorldWind.MathEngine.SphericalDistance(WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Computes the angular distance between two pairs of lat/longs.
            Fails for distances (on earth) smaller than approx. 2km. (returns 0)
            </summary>
        </member>
        <member name="M:WorldWind.MathEngine.Azimuth(WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Calculates the azimuth from latA/lonA to latB/lonB
            Borrowed from http://williams.best.vwh.net/avform.htm
            </summary>
        </member>
        <member name="M:WorldWind.MathEngine.EulerToQuaternion(System.Double,System.Double,System.Double)">
            <summary>
            Transforms a set of Euler angles to a quaternion
            </summary>
            <param name="yaw">Yaw (radians)</param>
            <param name="pitch">Pitch (radians)</param>
            <param name="roll">Roll (radians)</param>
            <returns>The rotation transformed to a quaternion.</returns>
        </member>
        <member name="M:WorldWind.MathEngine.QuaternionToEuler(Microsoft.DirectX.Quaternion)">
            <summary>
            Transforms a rotation in quaternion form to a set of Euler angles 
            </summary>
            <returns>The rotation transformed to Euler angles, X=Yaw, Y=Pitch, Z=Roll (radians)</returns>
        </member>
        <member name="M:WorldWind.MathEngine.GetRowFromLatitude(System.Double,System.Double)">
            <summary>
            Compute the tile number (used in file names) for given latitude and tile size.
            </summary>
            <param name="latitude">Latitude (decimal degrees)</param>
            <param name="tileSize">Tile size  (decimal degrees)</param>
            <returns>The tile number</returns>
        </member>
        <member name="M:WorldWind.MathEngine.GetRowFromLatitude(WorldWind.Angle,System.Double)">
            <summary>
            Compute the tile number (used in file names) for given latitude and tile size.
            </summary>
            <param name="latitude">Latitude (decimal degrees)</param>
            <param name="tileSize">Tile size  (decimal degrees)</param>
            <returns>The tile number</returns>
        </member>
        <member name="M:WorldWind.MathEngine.GetColFromLongitude(System.Double,System.Double)">
            <summary>
            Compute the tile number (used in file names) for given longitude and tile size.
            </summary>
            <param name="longitude">Longitude (decimal degrees)</param>
            <param name="tileSize">Tile size  (decimal degrees)</param>
            <returns>The tile number</returns>
        </member>
        <member name="M:WorldWind.MathEngine.GetColFromLongitude(WorldWind.Angle,System.Double)">
            <summary>
            Compute the tile number (used in file names) for given longitude and tile size.
            </summary>
            <param name="longitude">Longitude (decimal degrees)</param>
            <param name="tileSize">Tile size  (decimal degrees)</param>
            <returns>The tile number</returns>
        </member>
        <member name="M:WorldWind.MathEngine.DistancePlaneToPoint(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
            <summary>
            Computes the distance between a point and a plane.
            </summary>
            <param name="p">Plane</param>
            <param name="v">Point (XYZ coordinates)</param>
            <returns>The shortest distance between the point and the plane.</returns>
        </member>
        <member name="M:WorldWind.MathEngine.Hypot(System.Double,System.Double)">
            <summary>
            Computes the hypotenuse (sqrt(x?y?).
            </summary>
        </member>
        <member name="T:WorldWind.NltImageStore">
            <summary>
            以 NLT-style存储的urls格式
            </summary>
        </member>
        <member name="T:WorldWind.Point2d">
            <summary>
            Summary description for Point3d.
            </summary>
        </member>
        <member name="T:WorldWind.Point3d">
            <summary>
            Summary description for Point3d.
            </summary>
        </member>
        <member name="T:WorldWind.Polygon">
            <summary>
            Polygon geometry used to rasterize vectors
            </summary>
        </member>
        <member name="T:WorldWind.PolygonFeature">
            <summary>
            Creates 2D or 3D polygons.  ClampedToGround polygons are drawn as tiled images using ProjectedVectorRenderer.
            </summary>
        </member>
        <member name="P:WorldWind.PolygonFeature.ZBufferEnable">
            <summary>
            Enables or disables depth buffering - disable if you are having terrain collision rendering issues.
            </summary>
        </member>
        <member name="P:WorldWind.PolygonFeature.Extrude">
            <summary>
            Whether polygon should be extruded
            </summary>
        </member>
        <member name="P:WorldWind.PolygonFeature.ExtrudeUpwards">
            <summary>
            Whether extrusion should be upwards
            </summary>
        </member>
        <member name="P:WorldWind.PolygonFeature.ExtrudeHeight">
            <summary>
            Distance to extrude
            </summary>
        </member>
        <member name="P:WorldWind.PolygonFeature.ExtrudeToGround">
            <summary>
            Whether polygon should be extruded to the ground (completely overrides other extrusion options)
            </summary>
        </member>
        <member name="P:WorldWind.PolygonFeature.OuterRing">
            <summary>
            Allow runtime updates of outerring
            </summary>
        </member>
        <member name="M:WorldWind.PolygonFeature.#ctor(System.String,WorldWind.World,WorldWind.LinearRing,WorldWind.LinearRing[],System.Drawing.Color)">
            <summary>
            Polygon Feature Constructor
            </summary>
            <param name="name">Name of the layer</param>
            <param name="parentWorld">Base world</param>
            <param name="outerRing">Polygon's outer boundary</param>
            <param name="innerRings">Inner Hole's</param>
            <param name="polygonColor">Colour of the rendered object</param>
        </member>
        <member name="M:WorldWind.PolygonFeature.#ctor(System.String,WorldWind.World,WorldWind.Angle,WorldWind.Angle,System.Double,System.Double,System.Int32,System.Drawing.Color)">
            <summary>
            Ring Polygon Feature Constructor
            </summary>
            <param name="name">Name of the layer</param>
            <param name="parentWorld">Base world</param>
            <param name="lat">Lat Center of Ring</param>
            <param name="lon">Lon Center of Ring</param>
            <param name="alt">Altitude in meters</param>
            <param name="radius">Radius of Ring in meters</param>
            <param name="numPoints">Number of points desired</param>
            <param name="polygonColor">Colour of the rendered object</param>
        </member>
        <member name="M:WorldWind.PolygonFeature.UpdateCircle(WorldWind.Angle,WorldWind.Angle,System.Double,System.Double,System.Int32)">
            <summary>
            Used to create or update this polygon as a circle.  Typically called if a new radius is desired.
            </summary>
            <param name="lat"></param>
            <param name="lon"></param>
            <param name="alt"></param>
            <param name="radius"></param>
            <param name="numPoints"></param>
            <param name="polygonColor"></param>
        </member>
        <member name="M:WorldWind.PolygonFeature.CalcBoundingBox">
            <summary>
            Method to update polygon bounding box
            </summary>
        </member>
        <member name="M:WorldWind.PolygonFeature.Initialize(WorldWind.DrawArgs)">
            <summary>
            Intialize Polygon with Tessalation
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.PolygonFeature.pointInRing(WorldWind.Point3d[],WorldWind.Point3d)">
            <summary>
            Utility method to check if point is in a simple polygon
            Uses Winding number/Jordan Curve Theorem
            http://en.wikipedia.org/wiki/Jordan_curve_theorem
            </summary>
            <param name="points">Polygon ring points</param>
            <param name="queryPoint">Test point</param>
            <returns>Location status</returns>
        </member>
        <member name="T:WorldWind.VisualControl.ProgressBar">
            <summary>
            Render a progress bar.
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.ProgressBar.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.VisualControl.ProgressBar"/> class.
            </summary>
            <param name="width">Width in pixels of progress bar</param>
            <param name="height">Height in pixels of progress bar</param>
        </member>
        <member name="M:WorldWind.VisualControl.ProgressBar.Initalize(System.Single,System.Single)">
            <summary>
            Sets up the data for rendering
            </summary>
            <param name="x">Center X position of progress.</param>
            <param name="y">Center Y position of progress.</param>
        </member>
        <member name="M:WorldWind.VisualControl.ProgressBar.Draw(WorldWind.DrawArgs,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Draws the progress bar
            </summary>
            <param name="x">Center X position of progress.</param>
            <param name="y">Center Y position of progress.</param>
            <param name="progress">Progress vale, in the range 0..1</param>
        </member>
        <member name="T:WorldWind.VisualControl.Colorbar">
            <summary>
            An auto-sizing form that displays a bitmap
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.Colorbar.#ctor(System.Windows.Forms.Form)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.VisualControl.Colorbar"/> class.
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:WorldWind.VisualControl.Colorbar.LoadImage(System.String)">
            <summary>
            Loads a bitmap from the web or a file and displays.
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.Colorbar.LoadImageInBackground(System.String)">
            <summary>
            Loads a bitmap from the web in background and displays.
            </summary>
        </member>
        <member name="P:WorldWind.VisualControl.Colorbar.Image">
            <summary>
            The image displayed in the form.
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.Colorbar.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.Colorbar.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.VisualControl.PropertyBrowser">
            <summary>
            Property browser/settings dialog to modify parameters in the main class.
            </summary>
        </member>
        <member name="F:WorldWind.VisualControl.PropertyBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.PropertyBrowser.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.VisualControl.PropertyBrowser"/> class.
            </summary>
            <param name="selected">The object to retrieve browsable properties from.</param>
        </member>
        <member name="M:WorldWind.VisualControl.PropertyBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.VisualControl.PropertyBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.ProjectedVectorRenderer">
            <summary>
            Summary description for ProjectedVectorRenderer.
            </summary>
        </member>
        <member name="M:WorldWind.Quaternion4d.QuaternionToEuler(WorldWind.Quaternion4d)">
            <summary>
            Transforms a rotation in quaternion form to a set of Euler angles 
            </summary>
            <returns>The rotation transformed to Euler angles, X=Yaw, Y=Pitch, Z=Roll (radians)</returns>
        </member>
        <member name="M:WorldWind.Configuration.SettingsBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Configuration.SettingsBase"/> class.
            A default constructor is required for serialization.
            </summary>
        </member>
        <member name="T:WorldWind.ShapeFileInfoDlg">
            <summary>
            Summary description for ShapeFileInfoDlg.
            </summary>
        </member>
        <member name="F:WorldWind.ShapeFileInfoDlg.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.ShapeFileInfoDlg.getInfoFromDBF(System.String)">
            <summary>
            gets the information from a dbf as a DataTable (null if there was an error)
            </summary>		
        </member>
        <member name="M:WorldWind.ShapeFileInfoDlg.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:WorldWind.ShapeFileInfoDlg.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.ShapeFileLayer">
            <summary>
            Summary description for ShapeFileLayer.
            </summary>
            
        </member>
        <member name="T:WorldWind.ShapeFillStyle">
            <summary>
            Polygon shape types can be filled with any of these styles, which are the same as the HatchStyles in the GDI .NET framework.
            The exception is the "Solid" style, signifies a "solid" fill style (no hatching).
            </summary>
        </member>
        <member name="T:WorldWind.SunCalculator">
            <summary>
            Summary description for SunCalculator.
            </summary>
        </member>
        <member name="P:WorldWind.SurfaceImage.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:WorldWind.SurfaceImage"/> is enabled. Useful if you don't want the surface renderer 
            to render an image without removing the image from the renderer
            </summary>
            <value>
            	<c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:WorldWind.SurfaceTile.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32,WorldWind.WorldSurfaceRenderer)">
            <summary>
            Creates a new <see cref="T:WorldWind.SurfaceTile"/> instance.
            </summary>
            <param name="north">North. (in degrees)</param>
            <param name="south">South. (in degrees)</param>
            <param name="west">West. (in degrees)</param>
            <param name="east">East. (in degrees)</param>
            <param name="level">Level.</param>
            <param name="parentWorldSurfaceRenderer">Parent world surface renderer.</param>
        </member>
        <member name="P:WorldWind.SurfaceTile.RenderTexture">
            <summary>
            Gets the render texture.
            </summary>
            <value></value>
        </member>
        <member name="M:WorldWind.SurfaceTile.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the specified draw args.
            </summary>
            <param name="drawArgs">DrawArgs.</param>
        </member>
        <member name="M:WorldWind.SurfaceTile.UpdateRenderSurface(WorldWind.DrawArgs)">
            <summary>
            Updates the render surface.
            </summary>
            <param name="drawArgs">Draw args.</param>
        </member>
        <member name="M:WorldWind.SurfaceTile.buildTerrainMesh">
            <summary>
            Builds the terrain mesh. Also re-builds the terrain mesh, such as when vertical exaggeration has changed.
            </summary>
        </member>
        <member name="M:WorldWind.SurfaceTile.Update(WorldWind.DrawArgs)">
            <summary>
            Updates the specified draw args.
            </summary>
            <param name="drawArgs">Draw args.</param>
        </member>
        <member name="M:WorldWind.SurfaceTile.Dispose">
            <summary>
            Disposes this instance. Releases any resources from the graphics device, also disposes of "child" surface tiles.
            </summary>
        </member>
        <member name="M:WorldWind.SurfaceTile.IsRenderable(WorldWind.DrawArgs)">
            <summary>
            Determines whether this surface tile is renderable.
            </summary>
            <param name="drawArgs">Draw args.</param>
            <returns>
            	<c>true</c> if the surface tile is renderable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WorldWind.SurfaceTile.Render(WorldWind.DrawArgs)">
            <summary>
            Renders the surface tile.
            </summary>
            <param name="drawArgs">Draw args.</param>
        </member>
        <member name="T:WorldWind.Terrain.NltTerrainAccessor">
            <summary>
            Reads NLT terrain/elevation data (BIL files).
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.NltTerrainAccessor.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,WorldWind.Terrain.TerrainTileService,WorldWind.Terrain.TerrainAccessor[])">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Terrain.NltTerrainAccessor"/> class.
            </summary>
            <param name="name"></param>
            <param name="west"></param>
            <param name="south"></param>
            <param name="east"></param>
            <param name="north"></param>
            <param name="terrainTileService"></param>
            <param name="higherResolutionSubsets"></param>
        </member>
        <member name="M:WorldWind.Terrain.NltTerrainAccessor.GetElevationAt(System.Double,System.Double,System.Double)">
            <summary>
            Get terrain elevation at specified location.  
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="targetSamplesPerDegree"></param>
            <returns>Returns 0 if the tile is not available on disk.</returns>
        </member>
        <member name="M:WorldWind.Terrain.NltTerrainAccessor.GetCachedElevationAt(System.Double,System.Double)">
            <summary>
            Get fast terrain elevation at specified location from already loaded data.
            Will not trigger any download or data loading from files in cache - just memory.
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <returns>Returns NaN if no tile is available in cache.</returns>
        </member>
        <member name="M:WorldWind.Terrain.NltTerrainAccessor.GetElevationAt(System.Double,System.Double)">
            <summary>
            Get terrain elevation at specified location.  
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <returns>Returns 0 if the tile is not available on disk.</returns>
        </member>
        <member name="M:WorldWind.Terrain.NltTerrainAccessor.GetElevationArray(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Builds a terrain array with specified boundaries
            </summary>
            <param name="north">North edge in decimal degrees.</param>
            <param name="south">South edge in decimal degrees.</param>
            <param name="west">West edge in decimal degrees.</param>
            <param name="east">East edge in decimal degrees.</param>
            <param name="samples"></param>
        </member>
        <member name="M:WorldWind.Terrain.NltTerrainAccessor.TerrainTileCacheEntry.#ctor(WorldWind.Terrain.TerrainTile)">
            <summary>
            Constructor.
            </summary>
            <param name="tile">TerrainTile to be cached.</param>
        </member>
        <member name="T:WorldWind.Terrain.TerrainAccessor">
            <summary>
            Terrain (elevation) interface
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainAccessor.Name">
            <summary>
            Terrain model name
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainAccessor.North">
            <summary>
            North boundary
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainAccessor.South">
            <summary>
            South boundary
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainAccessor.West">
            <summary>
            West boundary
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainAccessor.East">
            <summary>
            East boundary
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainAccessor.IsOn">
            <summary>
            Hide/Show this object.
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainAccessor.GetElevationAt(System.Double,System.Double,System.Double)">
            <summary>
            Gets the terrain elevation at a given Latitude, Longitude, 
            and resolution accuracy in the latitude/longitude geographic frame of reference.
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="targetSamplesPerDegree"></param>
            <returns>Returns 0 if the tile is not available on disk.</returns>
        </member>
        <member name="M:WorldWind.Terrain.TerrainAccessor.GetElevationAt(System.Double,System.Double)">
            <summary>
            Get terrain elevation at specified location.  
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <returns>Returns 0 if the tile is not available on disk.</returns>
        </member>
        <member name="M:WorldWind.Terrain.TerrainAccessor.GetCachedElevationAt(System.Double,System.Double)">
            <summary>
            Get fast terrain elevation at specified location from cached data. 
            Will not trigger any download or file loading from cache - just memory.
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <returns>Returns 0 if the tile is not available in cache.</returns>
        </member>
        <member name="M:WorldWind.Terrain.TerrainAccessor.GetElevationArray(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Gets the elevation array for given geographic bounding box and resolution.
            </summary>
            <param name="north">North edge in decimal degrees.</param>
            <param name="south">South edge in decimal degrees.</param>
            <param name="west">West edge in decimal degrees.</param>
            <param name="east">East edge in decimal degrees.</param>
            <param name="samples"></param>
        </member>
        <member name="M:WorldWind.Terrain.TerrainAccessor.AddHigherResolutionSubset(WorldWind.Terrain.TerrainAccessor)">
            <summary>
            This method appends to the array of higher resolution
            subsets for runtime addition of terrain layers
            </summary>
            <param name="newHighResSubset"></param>
        </member>
        <member name="M:WorldWind.Terrain.TerrainAccessor.RemoveHigherResolutionSubset(WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Method removes the specified high resolution subset from the
            array of terrain layers, decreases the array size by 1
            </summary>
            <param name="highResSubset"></param>
        </member>
        <member name="T:WorldWind.Terrain.TerrainDownloadRequest">
            <summary>
            Terrain tile download request
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainDownloadRequest.#ctor(WorldWind.Terrain.TerrainTile,WorldWind.Terrain.TerrainTileService,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Terrain.TerrainDownloadRequest"/> class.
            </summary>
            <param name="tile"></param>
            <param name="owner"></param>
            <param name="row"></param>
            <param name="col"></param>
            <param name="targetLevel"></param>
        </member>
        <member name="P:WorldWind.Terrain.TerrainDownloadRequest.West">
            <summary>
            Western bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainDownloadRequest.East">
            <summary>
            Eastern bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainDownloadRequest.North">
            <summary>
            Northern bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainDownloadRequest.South">
            <summary>
            Southern bound of current request (decimal degrees)
            </summary>
        </member>
        <member name="P:WorldWind.Terrain.TerrainDownloadRequest.Color">
            <summary>
            Terrain request color
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainDownloadRequest.DownloadComplete">
            <summary>
            Tile download completed callback
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainDownloadRequest.DownloadInForeground">
            <summary>
            Download tile in foreground
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainDownloadRequest.FlagBadTile">
            <summary>
            Creates an empty file signalling the current request is for some reason permanently unavailable.
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainDownloadRequest.CalculateScore">
            <summary>
            Calculates the relative importance of this download.
            </summary>
        </member>
        <member name="T:WorldWind.Terrain.TerrainTileService">
            <summary>
            Provides elevation data (BIL format).
            </summary>
        </member>
        <member name="M:WorldWind.Terrain.TerrainTileService.#ctor(System.String,System.String,System.Double,System.Int32,System.String,System.Int32,System.String,System.TimeSpan,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.Terrain.TerrainTileService"/> class.
            </summary>
            <param name="serverUrl"></param>
            <param name="dataSet"></param>
            <param name="levelZeroTileSizeDegrees"></param>
            <param name="samplesPerTile"></param>
            <param name="fileExtension"></param>
            <param name="numberLevels"></param>
            <param name="terrainTileDirectory"></param>
            <param name="terrainTileRetryInterval"></param>
            <param name="dataType">Terrain Tiles Data type</param>
        </member>
        <member name="M:WorldWind.Terrain.TerrainTileService.GetTerrainTile(System.Double,System.Double,System.Double)">
            <summary>
            Builds terrain tile containing the specified coordinates.
            </summary>
            <param name="latitude">Latitude in decimal degrees.</param>
            <param name="longitude">Longitude in decimal degrees.</param>
            <param name="samplesPerDegree"></param>
            <returns>Uninitialized terrain tile (no elevation data)</returns>
        </member>
        <member name="M:WorldWind.Terrain.TerrainTile.Initialize">
            <summary>
            This method initializes the terrain tile add switches to
            Initialize floating point/int 16 tiles
            </summary>
        </member>
        <member name="F:WorldWind.TimeSetterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.TimeSetterDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WorldWind.TimeSetterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.Frustum">
            <summary>
            The region of space in the modeled world that may appear on the screen; it is the field of view of the notional camera.
            Used to perform culling of invisible object (prior to rendering) to increase speed.
            See: http://en.wikipedia.org/wiki/Viewing_frustum
            </summary>
        </member>
        <member name="M:WorldWind.Frustum.Intersects(WorldWind.BoundingSphere)">
            <summary>
            Test if a sphere intersects or is completely inside the frustum.
            </summary>
            <returns>true when the sphere intersects.</returns>
        </member>
        <member name="M:WorldWind.Frustum.ContainsPoint(Microsoft.DirectX.Vector3)">
            <summary>
            Test if a point is inside the frustum.
            </summary>
            <returns>true when the point is inside.</returns>
            <param name="v">XYZ in world coordinates of the point to test.</param>
        </member>
        <member name="M:WorldWind.Frustum.Contains(WorldWind.BoundingBox)">
            <summary>
            Tests if the view frustum fully contains the bounding box.
            </summary>
            <returns>true when the box is complete enclosed by the frustum.</returns>
        </member>
        <member name="M:WorldWind.Frustum.Intersects(WorldWind.BoundingBox)">
            <summary>
            Tests if the bounding box specified intersects with or is fully contained in the frustum.
            </summary>
            <returns>true when the box intersects with the frustum.</returns>
        </member>
        <member name="T:WorldWind.Widgets.WidgetCollection">
            <summary>
            Summary description for WidgetCollection.
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.PictureBox">
            <summary>
            Summary description for PictureBox.
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.RootWidget">
            <summary>
            Summary description for Widget.
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.TextBox">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.TextLabel">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.IInteractive">
            <summary>
            Interface must be implemented in order to recieve user input.  Can be used by IRenderables and IWidgets.
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.IWidget">
            <summary>
            Base Interface for DirectX GUI Widgets
            </summary>
        </member>
        <member name="T:WorldWind.Widgets.IWidgetCollection">
            <summary>
            Collection of IWidgets
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.CompassWidget">
            <summary>
            CompassWidget. This is a specialized widget that displays
            a compass image based on the direction of the camera.
            
            Inspired by CompassRose written by Patrick Murris.
            http://www.worldwindcentral.com/wiki/Add-on:Compass_Rose
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_name">
            <summary>
            Name property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_location">
            <summary>
            Location property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_size">
            <summary>
            WidgetSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_visible">
            <summary>
            Visible property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_enabled">
            <summary>
            Enabled property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_parentWidget">
            <summary>
            Parent widget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_tag">
            <summary>
            Tag property
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_isInitialized">
            <summary>
            Flag indicating if initialization is required
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_sprite">
            <summary>
            Sprite used to draw texture and text
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_iconTexture">
            <summary>
            The texture for this widget
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_imageName">
            <summary>
            Name of texture image
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.m_normalColor">
            <summary>
            Normal color (not highlighted/mouseover etc.)
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.XScale">
            <summary>
             Icon X scaling computed by dividing icon width by texture width
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.CompassWidget.YScale">
            <summary>
             Icon Y scaling computed by dividing icon height by texture height 
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.CompassWidget.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.ImageName">
            <summary>
            Filename of button graphic
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.Name">
            <summary>
            Name of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.AbsoluteLocation">
            <summary>
            Where this widget is on the window
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.ClientLocation">
            <summary>
            The top left corner of this widget's client area
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.ClientSize">
            <summary>
            Size of the client area in pixels - Same as widget size.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.Enabled">
            <summary>
            Whether this widget is enabled
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.Visible">
            <summary>
            Whether this widget is visible
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.ParentWidget">
            <summary>
            The parent widget of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.ChildWidgets">
            <summary>
            List of children widgets - None in the case of button widgets.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.CompassWidget.Tag">
            <summary>
            A link to an object.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.CompassWidget.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the button by loading the texture, creating the sprite and figure out the scaling.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.CompassWidget.Render(WorldWind.DrawArgs)">
            <summary>
            The render method to draw this widget on the screen.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="T:WorldWind.NewWidgets.ControlWidget">
            <summary>
            ControlWidget - This is a specialized widget that displays a
            clickable 2-D map that puts the camera where you click on it.  As
            you move around worldwind it also updates the cross hairs to give
            an indication of where you are.
            
            Inspired by the WWKontrol Plugin written by Johann Zoehrer aka
            "canosso".  http://www.worldwindcentral.com/wiki/Add-on:WWKontrol
            
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_name">
            <summary>
            Name property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_location">
            <summary>
            Location property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_size">
            <summary>
            WidgetSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_visible">
            <summary>
            Visible property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_enabled">
            <summary>
            Enabled property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_parentWidget">
            <summary>
            Parent widget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_tag">
            <summary>
            Tag property
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_isInitialized">
            <summary>
            Flag indicating if initialization is required
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_leftClickAction">
            <summary>
            LeftClickAction value - holds method to call on left mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_rightClickAction">
            <summary>
            RightClickAction value - holds method to call on right mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_sprite">
            <summary>
            Sprite used to draw texture and text
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_iconTexture">
            <summary>
            The texture for this widget
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_imageName">
            <summary>
            Name of texture image
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_crossHairs">
            <summary>
            The 2D Map crosshair
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_normalColor">
            <summary>
            Normal color (not highlighted/mouseover etc.)
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.m_BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.XScale">
            <summary>
             Icon X scaling computed by dividing icon width by texture width
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ControlWidget.YScale">
            <summary>
             Icon Y scaling computed by dividing icon height by texture height 
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.ImageName">
            <summary>
            Filename of button graphic
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.UpdateCrosshair(WorldWind.DrawArgs)">
            <summary>
            Update where the crosshairs should be based on camera location
            </summary>
            <param name="drawArgs"></param>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.PerformLMBAction(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Default implementation of left click.
            </summary>
            <param name="e">Mouse event parameters</param>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.Name">
            <summary>
            Name of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.AbsoluteLocation">
            <summary>
            Where this widget is on the window
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.ClientLocation">
            <summary>
            The top left corner of this widget's client area
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.ClientSize">
            <summary>
            Size of the client area in pixels - Same as widget size.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.Enabled">
            <summary>
            Whether this widget is enabled
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.Visible">
            <summary>
            Whether this widget is visible
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.ParentWidget">
            <summary>
            The parent widget of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.ChildWidgets">
            <summary>
            List of children widgets - None in the case of button widgets.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.Tag">
            <summary>
            A link to an object.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the button by loading the texture, creating the sprite and figure out the scaling.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.Render(WorldWind.DrawArgs)">
            <summary>
            The render method to draw this widget on the screen.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.LeftClickAction">
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ControlWidget.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse wheel event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnMouseEnter(System.EventArgs)">
            <summary>
            Mouse entered this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnMouseLeave(System.EventArgs)">
            <summary>
            Mouse left this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ControlWidget.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.
            This widget does nothing with key presses.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.NewWidgets.IWidgetCollection">
            <summary>
            Collection of IWidgets
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.IWidget">
            <summary>
            Base Interface for DirectX GUI Widgets
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.Name">
            <summary>
            Name of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.AbsoluteLocation">
            <summary>
            Where this widget is on the window
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.ClientLocation">
            <summary>
            The top left corner of this widget's client area
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.ClientSize">
            <summary>
            Size of the client area in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.Enabled">
            <summary>
            Whether this widget is enabled
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.Visible">
            <summary>
            Whether this widget is visible
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.ParentWidget">
            <summary>
            The parent widget of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.ChildWidgets">
            <summary>
            List of children widgets
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IWidget.Tag">
            <summary>
            A link to an object.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.IWidget.Render(WorldWind.DrawArgs)">
            <summary>
            The render method to draw this widget on the screen.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.IWidget.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the button by loading the texture, creating the sprite and figure out the scaling.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="T:WorldWind.NewWidgets.MouseClickAction">
            <summary>
            Delegate for mouse click events
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.IInteractive">
            <summary>
            Interface must be implemented in order to recieve user input.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IInteractive.LeftClickAction">
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.IInteractive.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse wheel event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>				
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnMouseEnter(System.EventArgs)">
            <summary>
            Mouse entered this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnMouseLeave(System.EventArgs)">
            <summary>
            Mouse left this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.IInteractive.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.
            </summary>
            <param name="e">Event Args</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.NewWidgets.FormWidget">
            <summary>
            FormWidget - This class implements a basic form with no layout management whatsoever but
            will resize and generate scrollbars.  FormWidget can take any widget as a child including
            other form widgets.  Typically all other widgets reside in a form widget.
            
            Note:  You can nest form widgets (maybe) but not put form widgets inside other widgets 
            because each form widget creates a new ViewPort.  Typically a PanelWidget should work
            fine instead.
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.FormWidget.ResizeDirection">
            <summary>
            Possible Resize Directions
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_name">
            <summary>
            Name property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_location">
            <summary>
            Location property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_clientLocation">
            <summary>
            ClientLocation property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_size">
            <summary>
            WidgetSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_clientSize">
            <summary>
            ClientSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_visible">
            <summary>
            Visible property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_enabled">
            <summary>
            Enabled property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_parentWidget">
            <summary>
            Parent widget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_ChildWidgets">
            <summary>
            ChildWidget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_tag">
            <summary>
            Tag property
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_isInitialized">
            <summary>
            Flag indicating if initialization is required
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_leftClickAction">
            <summary>
            LeftClickAction value - holds method to call on left mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_rightClickAction">
            <summary>
            RightClickAction value - holds method to call on right mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_BorderColor">
            <summary>
            Border Color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_HeaderColor">
            <summary>
            Header Background Color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_TextColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_headerHeight">
            <summary>
            Height of title bar
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_scrollbarWidth">
            <summary>
            Width of vertical scrollbar
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_scrollbarHeight">
            <summary>
            Height of horizontal scrollbar
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_renderBody">
            <summary>
            Whether or not to render the body.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.resizeBuffer">
            <summary>
            Region around widget that counts for grabbing when trying to resize the widget.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_isDragging">
            <summary>
            True if we're dragging the form around
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_LastMousePosition">
            <summary>
            Last point where the mouse was clicked (mousedown).
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_LastClickTime">
            <summary>
            Last time the mouse clicked on this widget (header area mostly) - used to implement double click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.m_resize">
            <summary>
            Current resizing direction
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.Text">
            <summary>
            The text to render when the body is hidden
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.HeaderEnabled">
            <summary>
            Whether or not to ever render the header
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.BorderEnabled">
            <summary>
            Whether or not to ever render the border
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.AutoHideHeader">
            <summary>
            Whether or not to hide the header when form doesn't have focus.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.MinSize">
            <summary>
            Minimum drawing size
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.VerticalResizeEnabled">
            <summary>
            Flag that indicates whether the user can resize vertically
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.HorizontalResizeEnabled">
            <summary>
            Flag that indicates whether the user can resize horizontally
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.VerticalScrollbarEnabled">
            <summary>
            True if we allow the showing of the vertical scroll bar (clips otherwise)
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.HorizontalScrollbarEnabled">
            <summary>
            True if we allow the showing of the horizontal scroll bar (clips otherwise)
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.FormWidget.DestroyOnClose">
            <summary>
            Flag that indicates this form should get deleted on close
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Top">
            <summary>
            The top edge of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Bottom">
            <summary>
            The bottom edge of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Left">
            <summary>
            The left edge of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Right">
            <summary>
            The right edge of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.BodyLocation">
            <summary>
            Location within the form of where the client area is
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.#ctor(System.String)">
            <summary>
            Form Widget Constructor
            </summary>
            <param name="name">Name of this form.  Name is displayed in header.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.Add(WorldWind.NewWidgets.IWidget)">
            <summary>
            Adds a new child widget
            </summary>
            <param name="widget">The widget to be added</param>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.Remove(WorldWind.NewWidgets.IWidget)">
            <summary>
            Removes a child widget
            </summary>
            <param name="widget">The widget to be removed</param>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.Dispose">
            <summary>
            Try to clean up everything.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.getChildrenSize(System.Int32@,System.Int32@)">
            <summary>
            Computes the height and width of children as laid out.  This value is
            used to determine if scrolling is required.
            
            HACK - Uses the fields CountHeight and CountWidth in the child widgets 
            to determine if they should be counted in the total height/width.
            </summary>
            <param name="childrenHeight">The total children height.</param>
            <param name="childrenWidth">The total children width</param>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Name">
            <summary>
            Name of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.AbsoluteLocation">
            <summary>
            Where this widget is on the window
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.ClientLocation">
            <summary>
            The top left corner of this widget's client area offset by scrolling.
            This area is is masked by the ViewPort so objects outside the client
            area is clipped and not shown.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.ClientSize">
            <summary>
            Size of the client area in pixels.  This area is the 
            widget area minus header and scrollbar areas.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Enabled">
            <summary>
            Whether this widget is enabled
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Visible">
            <summary>
            Whether this widget is visible
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.ParentWidget">
            <summary>
            The parent widget of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.ChildWidgets">
            <summary>
            List of children widgets - None in the case of button widgets.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.Tag">
            <summary>
            A link to an object.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the button by loading the texture, creating the sprite and figure out the scaling.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.Render(WorldWind.DrawArgs)">
            <summary>
            The render method to draw this widget on the screen.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.LeftClickAction">
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.FormWidget.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse wheel event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnMouseEnter(System.EventArgs)">
            <summary>
            Mouse entered this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnMouseLeave(System.EventArgs)">
            <summary>
            Mouse left this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.  
            This widget doesn't do anything with key presses.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.NewWidgets.FormWidget.UpdateLocation">
            <summary>
            Helper method to recalculate position from the edge of the 
            parent widget for anchors.
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.ButtonWidget">
            <summary>
            ButtonWidget - This class implements a basic button.  Left
            and/or right) click actions must be assigned for the button to 
            do anything.  Set the ImageName property for the button to have
            a texture.
            
            TODO Dispose needs to decrement the Texture reference count.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_name">
            <summary>
            Name property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_location">
            <summary>
            Location property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_size">
            <summary>
            WidgetSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_visible">
            <summary>
            Visible property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_enabled">
            <summary>
            Enabled property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_parentWidget">
            <summary>
            Parent widget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_tag">
            <summary>
            Tag property
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_isInitialized">
            <summary>
            Flag indicating if initialization is required
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_leftClickAction">
            <summary>
            LeftClickAction value - holds method to call on left mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_rightClickAction">
            <summary>
            RightClickAction value - holds method to call on right mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_sprite">
            <summary>
            Sprite used to draw texture and text
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_iconTexture">
            <summary>
            The texture for this widget
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_imageName">
            <summary>
            Name of texture image
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_normalColor">
            <summary>
            Normal color (not highlighted/mouseover etc.)
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.m_ForeColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.XScale">
            <summary>
             Icon X scaling computed by dividing icon width by texture width
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.ButtonWidget.YScale">
            <summary>
             Icon Y scaling computed by dividing icon height by texture height 
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.ImageName">
            <summary>
            Filename of button graphic
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.ForeColor">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.Name">
            <summary>
            Name of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.AbsoluteLocation">
            <summary>
            Where this widget is on the window
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.ClientLocation">
            <summary>
            The top left corner of this widget's client area
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.ClientSize">
            <summary>
            Size of the client area in pixels - Same as widget size.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.Enabled">
            <summary>
            Whether this widget is enabled
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.Visible">
            <summary>
            Whether this widget is visible
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.ParentWidget">
            <summary>
            The parent widget of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.ChildWidgets">
            <summary>
            List of children widgets - None in the case of button widgets.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.Tag">
            <summary>
            A link to an object.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the button by loading the texture, creating the sprite and figure out the scaling.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.Render(WorldWind.DrawArgs)">
            <summary>
            The render method to draw this widget on the screen.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.LeftClickAction">
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.ButtonWidget.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse wheel event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnMouseEnter(System.EventArgs)">
            <summary>
            Mouse entered this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnMouseLeave(System.EventArgs)">
            <summary>
            Mouse left this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.ButtonWidget.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.
            This widget does nothing with key presses.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.NewWidgets.LabelWidget">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.PanelWidget">
            <summary>
            PanelWidget - This class implements a basic panel with no layout management whatsoever.  
            PanelWidget can take any widget as a child.  This widget is used to group other widgets
            as a single widget.  
            
            No scroll bars are created as this widget doesn't clip subwidgets.  If
            you specify a child widget to be outside the panel space it renders outside the panel.
            
            Panels cannot be closed, resized or moved (dragged).
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_name">
            <summary>
            Name property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_location">
            <summary>
            Location property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_clientLocation">
            <summary>
            ClientLocation property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_size">
            <summary>
            WidgetSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_clientSize">
            <summary>
            ClientSize property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_visible">
            <summary>
            Visible property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_enabled">
            <summary>
            Enabled property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_parentWidget">
            <summary>
            Parent widget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_ChildWidgets">
            <summary>
            ChildWidget property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_tag">
            <summary>
            Tag property
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_isInitialized">
            <summary>
            Flag indicating if initialization is required
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_leftClickAction">
            <summary>
            LeftClickAction value - holds method to call on left mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_rightClickAction">
            <summary>
            RightClickAction value - holds method to call on right mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_BackgroundColor">
            <summary>
            Background color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_BorderColor">
            <summary>
            Border Color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_HeaderColor">
            <summary>
            Header Background Color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_TextColor">
            <summary>
            Text color
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_headerHeight">
            <summary>
            Height of title bar
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_renderBody">
            <summary>
            Whether or not to render the body.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_LastMousePosition">
            <summary>
            Last point where the mouse was clicked (mousedown).
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.m_LastClickTime">
            <summary>
            Last time the mouse clicked on this widget (header area mostly) - used to implement double click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.Text">
            <summary>
            The text to render when the body is hidden
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PanelWidget.HeaderEnabled">
            <summary>
            Whether or not to ever render the header
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Top">
            <summary>
            The top edge of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Bottom">
            <summary>
            The bottom edge of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Left">
            <summary>
            The left edge of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Right">
            <summary>
            The right edge of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.BodyLocation">
            <summary>
            Location within the form of where the client area is
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.#ctor(System.String)">
            <summary>
            Form Widget Constructor
            </summary>
            <param name="name">Name of this form.  Name is displayed in header.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.Add(WorldWind.NewWidgets.IWidget)">
            <summary>
            Adds a new child widget
            </summary>
            <param name="widget">The widget to be added</param>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.Remove(WorldWind.NewWidgets.IWidget)">
            <summary>
            Removes a child widget
            </summary>
            <param name="widget">The widget to be removed</param>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.Dispose">
            <summary>
            Try to clean up everything.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.getChildrenSize(System.Int32@,System.Int32@)">
            <summary>
            Computes the height and width of children as laid out.  This value is
            used to determine if scrolling is required.
            
            HACK - Uses the fields CountHeight and CountWidth in the child widgets 
            to determine if they should be counted in the total height/width.
            </summary>
            <param name="childrenHeight">The total children height.</param>
            <param name="childrenWidth">The total children width</param>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Name">
            <summary>
            Name of this widget
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.AbsoluteLocation">
            <summary>
            Where this widget is on the window
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.ClientLocation">
            <summary>
            The top left corner of this widget's client area offset by scrolling.
            This area is is masked by the ViewPort so objects outside the client
            area is clipped and not shown.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.ClientSize">
            <summary>
            Size of the client area in pixels.  This area is the 
            widget area minus header and scrollbar areas.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Enabled">
            <summary>
            Whether this widget is enabled
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Visible">
            <summary>
            Whether this widget is visible
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.ParentWidget">
            <summary>
            The parent widget of this widget.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.ChildWidgets">
            <summary>
            List of children widgets - None in the case of button widgets.
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.Tag">
            <summary>
            A link to an object.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.Initialize(WorldWind.DrawArgs)">
            <summary>
            Initializes the button by loading the texture, creating the sprite and figure out the scaling.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.Render(WorldWind.DrawArgs)">
            <summary>
            The render method to draw this widget on the screen.
            
            Called on the GUI thread.
            </summary>
            <param name="drawArgs">The drawing arguments passed from the WW GUI thread.</param>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.LeftClickAction">
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PanelWidget.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse move event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Mouse wheel event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnMouseEnter(System.EventArgs)">
            <summary>
            Mouse entered this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnMouseLeave(System.EventArgs)">
            <summary>
            Mouse left this widget event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key down event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Key up event handler.
            </summary>
            <param name="e">Event args</param>
            <returns>If this widget handled this event</returns>
        </member>
        <member name="M:WorldWind.NewWidgets.PanelWidget.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.
            This widget does nothing with key presses.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="F:WorldWind.NewWidgets.Scrollbar.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.Scrollbar.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.Scrollbar.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.Scrollbar.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.Scrollbar.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.Scrollbar.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.SimpleTreeNodeWidget">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.SimpleTreeNodeWidget.#ctor">
            <summary>
            Default constructor.  Stub
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.SimpleTreeNodeWidget.#ctor(System.String)">
            <summary>
            Constructor that allows passing in a name
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:WorldWind.NewWidgets.SimpleTreeNodeWidget.Render(WorldWind.DrawArgs,System.Int32,System.Int32)">
            <summary>
            Specialized render for tree nodes
            </summary>
            <param name="drawArgs"></param>
            <param name="xOffset">The offset from the left based on how deep this node is nested</param>
            <param name="yOffset">The offset from the top based on how many treenodes are above this one</param>
            <returns>Total pixels consumed by this widget and its children</returns>
        </member>
        <member name="T:WorldWind.NewWidgets.TreeNodeWidget">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.TreeNodeWidget.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Key press event handler.
            This widget does nothing with key presses.
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.NewWidgets.TreeNodeWidget.Render(WorldWind.DrawArgs,System.Int32,System.Int32)">
            <summary>
            Specialized render for tree nodes
            </summary>
            <param name="drawArgs"></param>
            <param name="xOffset">The offset from the left based on how deep this node is nested</param>
            <param name="yOffset">The offset from the top based on how many treenodes are above this one</param>
            <returns>Total pixels consumed by this widget and its children</returns>
        </member>
        <member name="T:WorldWind.NewWidgets.WidgetCollection">
            <summary>
            Summary description for WidgetCollection.
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.RootWidget">
            <summary>
            Summary description for Widget.
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.WidgetEnums">
            <summary>
            Summary description for JHU_Enums.
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.WidgetEnums.AnchorStyles">
            <summary>
            Widget Anchor Styles.  Same values as Forms AnchorStyles
            </summary>
        </member>
        <member name="M:WorldWind.NewWidgets.WidgetEnums.#ctor">
            <summary>
            Default constructor - does nada
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.PictureBox">
            <summary>
            Summary description for PictureBox.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PictureBox.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PictureBox.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PictureBox.m_leftClickAction">
            <summary>
            LeftClickAction value - holds method to call on left mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.PictureBox.m_rightClickAction">
            <summary>
            RightClickAction value - holds method to call on right mouse click
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PictureBox.Location">
            New IWidget properties
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PictureBox.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PictureBox.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PictureBox.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PictureBox.LeftClickAction">
            TODO: Refactor so that URL click is done on LeftClickAction
            and OnMouseUp (or Down) the relevant Left and Right click actions
            are called.
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.PictureBox.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.TextBox">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.TextBox.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.TextBox.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.TextBox.m_leftClickAction">
            <summary>
            LeftClickAction value - holds method to call on left mouse click
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.TextBox.m_rightClickAction">
            <summary>
            RightClickAction value - holds method to call on right mouse click
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextBox.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextBox.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextBox.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextBox.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextBox.LeftClickAction">
            <summary>
            Action to perform when the left mouse button is clicked
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextBox.RightClickAction">
            <summary>
            Action to perform when the right mouse button is clicked
            </summary>
        </member>
        <member name="T:WorldWind.NewWidgets.TextLabel">
            <summary>
            Summary description for TextLabel.
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.TextLabel.m_countHeight">
            <summary>
            CountHeight property value
            </summary>
        </member>
        <member name="F:WorldWind.NewWidgets.TextLabel.m_countWidth">
            <summary>
            CountWidth property value
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextLabel.Location">
            <summary>
            Location of this widget relative to the client area of the parent
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextLabel.WidgetSize">
            <summary>
            Size of widget in pixels
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextLabel.CountHeight">
            <summary>
            Whether this widget should count for height calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="P:WorldWind.NewWidgets.TextLabel.CountWidth">
            <summary>
            Whether this widget should count for width calculations - HACK until we do real layout
            </summary>
        </member>
        <member name="T:WorldWind.World">
             <summary>
            
             </summary>
        </member>
        <member name="F:WorldWind.World.Settings">
            <summary>
            Persisted user adjustable settings.
            </summary>
        </member>
        <member name="P:WorldWind.World.IsEarth">
            <summary>
            Whether this world is planet Earth.
            </summary>
        </member>
        <member name="M:WorldWind.World.#ctor(System.String,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,System.Double,System.String,WorldWind.Terrain.TerrainAccessor)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.World"/> class.
            </summary>
            <param name="name"></param>
            <param name="position"></param>
            <param name="orientation"></param>
            <param name="equatorialRadius"></param>
            <param name="cacheDirectory"></param>
            <param name="terrainAccessor"></param>
        </member>
        <member name="M:WorldWind.World.LoadSettings">
            <summary>
            Deserializes settings from default location
            </summary>
        </member>
        <member name="M:WorldWind.World.LoadSettings(System.String)">
            <summary>
            Deserializes settings from specified location
            </summary>
        </member>
        <member name="M:WorldWind.World.ApproxAngularDistance(WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Computes the great circle distance between two pairs of lat/longs.
            TODO: Compute distance using ellipsoid.
            </summary>
        </member>
        <member name="M:WorldWind.World.ApproxDistance(WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Computes the distance between two pairs of lat/longs in meters.
            </summary>
        </member>
        <member name="M:WorldWind.World.IntermediateGCPoint(System.Single,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle@,WorldWind.Angle@)">
            <summary>
            Intermediate points on a great circle
            In previous sections we have found intermediate points on a great circle given either
            the crossing latitude or longitude. Here we find points (lat,lon) a given fraction of the
            distance (d) between them. Suppose the starting point is (lat1,lon1) and the final point
            (lat2,lon2) and we want the point a fraction f along the great circle route. f=0 is
            point 1. f=1 is point 2. The two points cannot be antipodal ( i.e. lat1+lat2=0 and
            abs(lon1-lon2)=pi) because then the route is undefined.
            </summary>
            <param name="f">Fraction of the distance for intermediate point (0..1)</param>
        </member>
        <member name="M:WorldWind.World.IntermediateGCPoint(System.Single,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle,WorldWind.Angle)">
            <summary>
            Intermediate points on a great circle
            In previous sections we have found intermediate points on a great circle given either
            the crossing latitude or longitude. Here we find points (lat,lon) a given fraction of the
            distance (d) between them. Suppose the starting point is (lat1,lon1) and the final point
            (lat2,lon2) and we want the point a fraction f along the great circle route. f=0 is
            point 1. f=1 is point 2. The two points cannot be antipodal ( i.e. lat1+lat2=0 and
            abs(lon1-lon2)=pi) because then the route is undefined.
            </summary>
            <param name="f">Fraction of the distance for intermediate point (0..1)</param>
        </member>
        <member name="M:WorldWind.AtmosphericScatteringSphere.ColoredSpherePartial(WorldWind.DrawArgs,System.Single,System.Double,System.Double,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Creates a partial PositionColored sphere pre-transformed to the camera position
            modified to provide a sky/atmosphere gradient dome
            </summary>
            <param name="drawArgs">Where to get the current direct3D drawing device.</param>
            <param name="radius">The sphere's radius</param>
            <param name="slices">Number of slices (Horizontal resolution).</param>
            <param name="stacks">Number of stacks. (Vertical resolution)</param>
            <returns></returns>
            <remarks>
            Number of vertices in the sphere will be (slices+1)*(stacks+1)<br/>
            Number of faces :slices*stacks*2
            Number of Indexes   : Number of faces * 3;
            </remarks>
        </member>
        <member name="M:WorldWind.AtmosphericScatteringSphere.getAtmosphereColor(WorldWind.DrawArgs,Microsoft.DirectX.Direct3D.CustomVertex.PositionColored)">
            <summary>
            Compute sky vertex color using atmospheric scattering
            </summary>
        </member>
        <member name="T:WorldWind.WorldSettings">
            <summary>
            World user configurable settings
            TODO: Group settings
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showToolbar">
            <summary>
            Show the top tool button bar
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.toolbarAnchor">
            <summary>
            Where the tool bar should be anchored
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showLayerManager">
            <summary>
            Display the layer manager window
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showCrosshairs">
            <summary>
            Display cross-hair symbol on screen
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.defaultFontName">
            <summary>
            Font name for the default font used in UI
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.defaultFontSize">
            <summary>
            Font size (em) for the default font used in UI
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.defaultFontStyle">
            <summary>
            Font style for the default font used in UI
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.toolbarFontName">
            <summary>
            Font name used in the toolbar 
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.toolbarFontSize">
            <summary>
            Font size (em) for the font used in UI
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.toolbarFontStyle">
            <summary>
            Font style for the font used in UI
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.menuBarBackgroundColor">
            <summary>
            Menu bar background color
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.layerManagerFontName">
            <summary>
            Font name used in the layer manager 
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.layerManagerFontSize">
            <summary>
            Font size (em) for the font used in UI
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.layerManagerFontStyle">
            <summary>
            Font style for the font used in layer manager
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.layerManagerWidth">
            <summary>
            Layer manager width (pixels)
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.antiAliasedText">
            <summary>
            Draw anti-aliased text
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.throttleFpsHz">
            <summary>
            Maximum frames-per-second setting
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.vSync">
            <summary>
            Vsync on/off (Wait for vertical retrace)
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.modisIconSize">
            <summary>
            Rapid Fire MODIS icon size
            </summary>
        </member>
        <member name="P:WorldWind.WorldSettings.AntiAliasedText">
            <summary>
            Draw anti-aliased text
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showLatLonLines">
            <summary>
            Display the latitude/longitude grid
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.latLonLinesColor">
            <summary>
            The color of the latitude/longitude grid
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.equatorLineColor">
            <summary>
            The color of the equator latitude line
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showTropicLines">
            <summary>
            Display the tropic of capricorn/cancer lines
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.tropicLinesColor">
            <summary>
            The color of the latitude/longitude grid
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.bmngVersion">
            <summary>
            Index of blue marble version to show
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showPlanetAxis">
            <summary>
            Whether to display the planet axis line (through poles)
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showPlacenames">
            <summary>
            Whether place name labels should display
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showBoundaries">
            <summary>
            Whether country borders and other boundaries should display
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.showPosition">
            <summary>
            Displays coordinates of current position
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.skyColor">
            <summary>
            Color of the sky at sea level
            </summary>
        </member>
        <member name="F:WorldWind.WorldSettings.keepOriginalSvsImages">
            <summary>
            Keep the original (unconverted) NASA SVS image files on disk (in addition to converted files). 
            </summary>
        </member>
        <member name="T:WorldWind.WorldSurfaceRenderer">
            <summary>
            Summary description for SurfaceRenderer.
            </summary>
        </member>
        <member name="P:WorldWind.WorldSurfaceRenderer.SurfaceImages">
            <summary>
            Gets the surface images.
            </summary>
            <value></value>
        </member>
        <member name="P:WorldWind.WorldSurfaceRenderer.DistanceAboveSeaLevel">
            <summary>
            Gets the distance above sea level in meters.
            </summary>
            <value></value>
        </member>
        <member name="P:WorldWind.WorldSurfaceRenderer.SamplesPerTile">
            <summary>
            Gets the samples per tile.  Also can be considered the Vertex Density or Mesh Density of each SurfaceTile
            </summary>
            <value></value>
        </member>
        <member name="P:WorldWind.WorldSurfaceRenderer.ParentWorld">
            <summary>
            Gets the parent world.
            </summary>
            <value></value>
        </member>
        <member name="T:WorldWind.WorldWindow">
            <summary>
            D3D 渲染的地球
            </summary>
        </member>
        <member name="M:WorldWind.WorldWindow.Goto(WorldWind.Net.WorldWindUri)">
            <summary>
            Go to worldwind URI
            </summary>
        </member>
        <member name="M:WorldWind.WorldWindow.GotoLatLon(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            定位
            </summary>
            <param name="latitude">Latitude in degrees of target position. (-90 - 90).</param>
            <param name="longitude">Longitude in degrees of target position. (-180 - 180).</param>
            <param name="heading">Camera heading in degrees (0-360) or double.NaN for no change.</param>
            <param name="altitude">Camera altitude in meters or double.NaN for no change.</param>
            <param name="perpendicularViewRange"></param>
            <param name="tilt">Camera tilt in degrees (-90 - 90) or double.NaN for no change.</param>
        </member>
        <member name="M:WorldWind.WorldWindow.SaveScreenshot(System.String)">
            <summary>
            截屏
            </summary>
            <param name="filePath">Path and filename of output file.  
            Extension is used to determine the image format.</param>
        </member>
        <member name="M:WorldWind.WorldWindow.OnApplicationIdle(System.Object,System.EventArgs)">
            <summary>
            地球渲染.  
            Borrowed from FlightGear and Tom Miller's blog
            </summary>
        </member>
        <member name="F:WorldWind.WorldWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:WorldWind.WorldWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:WorldWind.WorldWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:WorldWind.WorldWindSettings">
            <summary>
            配置
            </summary>
        </member>
        <member name="P:WorldWind.WorldWindSettings.CacheCleanupIntervalXml">
            <summary>
            Because Microsoft forgot to implement TimeSpan in their xml serializer.
            </summary>
        </member>
        <member name="P:WorldWind.WorldWindSettings.TotalRunTimeXml">
            <summary>
            Because Microsoft forgot to implement TimeSpan in their xml serializer.
            </summary>
        </member>
        <member name="F:WorldWind.WorldWindSettings.WorldWindDirectory">
            <summary>
            World Wind application base directory ("C:\Program Files\NASA\Worldwind v1.2\") 
            </summary>
        </member>
        <member name="T:gpxType">
            <remarks/>
        </member>
        <member name="F:gpxType.metadata">
            <remarks/>
        </member>
        <member name="F:gpxType.wpt">
            <remarks/>
        </member>
        <member name="F:gpxType.rte">
            <remarks/>
        </member>
        <member name="F:gpxType.trk">
            <remarks/>
        </member>
        <member name="F:gpxType.extensions">
            <remarks/>
        </member>
        <member name="F:gpxType.version">
            <remarks/>
        </member>
        <member name="F:gpxType.creator">
            <remarks/>
        </member>
        <member name="T:metadataType">
            <remarks/>
        </member>
        <member name="F:metadataType.name">
            <remarks/>
        </member>
        <member name="F:metadataType.desc">
            <remarks/>
        </member>
        <member name="F:metadataType.author">
            <remarks/>
        </member>
        <member name="F:metadataType.copyright">
            <remarks/>
        </member>
        <member name="F:metadataType.link">
            <remarks/>
        </member>
        <member name="F:metadataType.time">
            <remarks/>
        </member>
        <member name="F:metadataType.timeSpecified">
            <remarks/>
        </member>
        <member name="F:metadataType.keywords">
            <remarks/>
        </member>
        <member name="F:metadataType.bounds">
            <remarks/>
        </member>
        <member name="F:metadataType.extensions">
            <remarks/>
        </member>
        <member name="T:personType">
            <remarks/>
        </member>
        <member name="F:personType.name">
            <remarks/>
        </member>
        <member name="F:personType.email">
            <remarks/>
        </member>
        <member name="F:personType.link">
            <remarks/>
        </member>
        <member name="T:emailType">
            <remarks/>
        </member>
        <member name="F:emailType.id">
            <remarks/>
        </member>
        <member name="F:emailType.domain">
            <remarks/>
        </member>
        <member name="T:trksegType">
            <remarks/>
        </member>
        <member name="F:trksegType.trkpt">
            <remarks/>
        </member>
        <member name="F:trksegType.extensions">
            <remarks/>
        </member>
        <member name="T:wptType">
            <remarks/>
        </member>
        <member name="F:wptType.ele">
            <remarks/>
        </member>
        <member name="F:wptType.eleSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.time">
            <remarks/>
        </member>
        <member name="F:wptType.timeSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.magvar">
            <remarks/>
        </member>
        <member name="F:wptType.magvarSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.geoidheight">
            <remarks/>
        </member>
        <member name="F:wptType.geoidheightSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.name">
            <remarks/>
        </member>
        <member name="F:wptType.cmt">
            <remarks/>
        </member>
        <member name="F:wptType.desc">
            <remarks/>
        </member>
        <member name="F:wptType.src">
            <remarks/>
        </member>
        <member name="F:wptType.link">
            <remarks/>
        </member>
        <member name="F:wptType.sym">
            <remarks/>
        </member>
        <member name="F:wptType.type">
            <remarks/>
        </member>
        <member name="F:wptType.fix">
            <remarks/>
        </member>
        <member name="F:wptType.fixSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.sat">
            <remarks/>
        </member>
        <member name="F:wptType.hdop">
            <remarks/>
        </member>
        <member name="F:wptType.hdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.vdop">
            <remarks/>
        </member>
        <member name="F:wptType.vdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.pdop">
            <remarks/>
        </member>
        <member name="F:wptType.pdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.ageofdgpsdata">
            <remarks/>
        </member>
        <member name="F:wptType.ageofdgpsdataSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.dgpsid">
            <remarks/>
        </member>
        <member name="F:wptType.extensions">
            <remarks/>
        </member>
        <member name="F:wptType.lat">
            <remarks/>
        </member>
        <member name="F:wptType.lon">
            <remarks/>
        </member>
        <member name="T:linkType">
            <remarks/>
        </member>
        <member name="F:linkType.text">
            <remarks/>
        </member>
        <member name="F:linkType.type">
            <remarks/>
        </member>
        <member name="F:linkType.href">
            <remarks/>
        </member>
        <member name="T:fixType">
            <remarks/>
        </member>
        <member name="F:fixType.none">
            <remarks/>
        </member>
        <member name="F:fixType.Item2d">
            <remarks/>
        </member>
        <member name="F:fixType.Item3d">
            <remarks/>
        </member>
        <member name="F:fixType.dgps">
            <remarks/>
        </member>
        <member name="F:fixType.pps">
            <remarks/>
        </member>
        <member name="T:extensionsType">
            <remarks/>
        </member>
        <member name="F:extensionsType.Any">
            <remarks/>
        </member>
        <member name="T:trkType">
            <remarks/>
        </member>
        <member name="F:trkType.name">
            <remarks/>
        </member>
        <member name="F:trkType.cmt">
            <remarks/>
        </member>
        <member name="F:trkType.desc">
            <remarks/>
        </member>
        <member name="F:trkType.src">
            <remarks/>
        </member>
        <member name="F:trkType.link">
            <remarks/>
        </member>
        <member name="F:trkType.number">
            <remarks/>
        </member>
        <member name="F:trkType.type">
            <remarks/>
        </member>
        <member name="F:trkType.extensions">
            <remarks/>
        </member>
        <member name="F:trkType.trkseg">
            <remarks/>
        </member>
        <member name="T:rteType">
            <remarks/>
        </member>
        <member name="F:rteType.name">
            <remarks/>
        </member>
        <member name="F:rteType.cmt">
            <remarks/>
        </member>
        <member name="F:rteType.desc">
            <remarks/>
        </member>
        <member name="F:rteType.src">
            <remarks/>
        </member>
        <member name="F:rteType.link">
            <remarks/>
        </member>
        <member name="F:rteType.number">
            <remarks/>
        </member>
        <member name="F:rteType.type">
            <remarks/>
        </member>
        <member name="F:rteType.extensions">
            <remarks/>
        </member>
        <member name="F:rteType.rtept">
            <remarks/>
        </member>
        <member name="T:boundsType">
            <remarks/>
        </member>
        <member name="F:boundsType.minlat">
            <remarks/>
        </member>
        <member name="F:boundsType.minlon">
            <remarks/>
        </member>
        <member name="F:boundsType.maxlat">
            <remarks/>
        </member>
        <member name="F:boundsType.maxlon">
            <remarks/>
        </member>
        <member name="T:copyrightType">
            <remarks/>
        </member>
        <member name="F:copyrightType.year">
            <remarks/>
        </member>
        <member name="F:copyrightType.license">
            <remarks/>
        </member>
        <member name="F:copyrightType.author">
            <remarks/>
        </member>
        <member name="T:MapTools.ShapeLib.ShapeType">
            <summary>
            Shape type enumeration
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.NullShape">
            <summary>Shape with no geometric data</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.Point">
            <summary>2D point</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLine">
            <summary>2D polyline</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.Polygon">
            <summary>2D polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPoint">
            <summary>Set of 2D points</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PointZ">
            <summary>3D point</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLineZ">
            <summary>3D polyline</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolygonZ">
            <summary>3D polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPointZ">
            <summary>Set of 3D points</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PointM">
            <summary>3D point with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLineM">
            <summary>3D polyline with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolygonM">
            <summary>3D polygon with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPointM">
            <summary>Set of 3d points with measures</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPatch">
            <summary>Collection of surface patches</summary>
        </member>
        <member name="T:MapTools.ShapeLib.PartType">
            <summary>
            Part type enumeration - everything but ShapeType.MultiPatch just uses PartType.Ring.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.TriangleStrip">
            <summary>
            Linked strip of triangles, where every vertex (after the first two) completes a new triangle.
            A new triangle is always formed by connecting the new vertex with its two immediate predecessors.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.TriangleFan">
            <summary>
            A linked fan of triangles, where every vertex (after the first two) completes a new triangle.
            A new triangle is always formed by connecting the new vertex with its immediate predecessor 
            and the first vertex of the part.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.OuterRing">
            <summary>The outer ring of a polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.InnerRing">
            <summary>The first ring of a polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.FirstRing">
            <summary>The outer ring of a polygon of an unspecified type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.Ring">
            <summary>A ring of a polygon of an unspecified type</summary>
        </member>
        <member name="T:MapTools.ShapeLib.SHPObject">
            <summary>
            SHPObject - represents on shape (without attributes) read from the .shp file.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.shpType">
            <summary>Shape type as a ShapeType enum</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nShapeId">
            <summary>Shape number (-1 is unknown/unassigned)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nParts">
            <summary>Number of parts (0 implies single part with no info)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.paPartStart">
            <summary>Pointer to int array of part start offsets, of size nParts</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.paPartType">
            <summary>Pointer to PartType array (PartType.Ring if not ShapeType.MultiPatch) of size nParts</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nVertices">
            <summary>Number of vertices</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfX">
            <summary>Pointer to double array containing X coordinates</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfY">
            <summary>Pointer to double array containing Y coordinates</summary>		
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfZ">
            <summary>Pointer to double array containing Z coordinates (all zero if not provided)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfM">
            <summary>Pointer to double array containing Measure coordinates(all zero if not provided)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfXMin">
            <summary>Bounding rectangle's min X</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfYMin">
            <summary>Bounding rectangle's min Y</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfZMin">
            <summary>Bounding rectangle's min Z</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfMMin">
            <summary>Bounding rectangle's min M</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfXMax">
            <summary>Bounding rectangle's max X</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfYMax">
            <summary>Bounding rectangle's max Y</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfZMax">
            <summary>Bounding rectangle's max Z</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfMMax">
            <summary>Bounding rectangle's max M</summary>	
        </member>
        <member name="M:MapTools.ShapeLib.SHPOpen(System.String,System.String)">
            <summary>
            The SHPOpen() function should be used to establish access to the two files for 
            accessing vertices (.shp and .shx). Note that both files have to be in the indicated 
            directory, and must have the expected extensions in lower case. The returned SHPHandle 
            is passed to other access functions, and SHPClose() should be invoked to recover 
            resources, and flush changes to disk when complete.
            </summary>
            <param name="szShapeFile">The name of the layer to access.  This can be the name of either 
            the .shp or the .shx file or can just be the path plus the basename of the pair.</param>
            <param name="szAccess">The fopen() style access string. At this time only "rb" (read-only binary) 
            and "rb+" (read/write binary) should be used.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreate(System.String,MapTools.ShapeLib.ShapeType)">
            <summary>
            The SHPCreate() function will create a new .shp and .shx file of the desired type.
            </summary>
            <param name="szShapeFile">The name of the layer to access. This can be the name of either 
            the .shp or the .shx file or can just be the path plus the basename of the pair.</param>
            <param name="shpType">The type of shapes to be stored in the newly created file. 
            It may be either ShapeType.Point, ShapeType.PolyLine, ShapeType.Polygon or ShapeType.MultiPoint.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPGetInfo(System.IntPtr,System.Int32@,MapTools.ShapeLib.ShapeType@,System.Double[],System.Double[])">
            <summary>
            The SHPGetInfo() function retrieves various information about shapefile as a whole. 
            The bounds are read from the file header, and may be inaccurate if the file was 
            improperly generated.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate()</param>
            <param name="pnEntities">A pointer to an integer into which the number of 
            entities/structures should be placed. May be NULL.</param>
            <param name="pshpType">A pointer to an integer into which the ShapeType of this file 
            should be placed. Shapefiles may contain either ShapeType.Point, ShapeType.PolyLine, ShapeType.Polygon or 
            ShapeType.MultiPoint entities. This may be NULL.</param>
            <param name="adfMinBound">The X, Y, Z and M minimum values will be placed into this 
            four entry array. This may be NULL. </param>
            <param name="adfMaxBound">The X, Y, Z and M maximum values will be placed into this 
            four entry array. This may be NULL.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPReadObject(System.IntPtr,System.Int32)">
            <summary>
            The SHPReadObject() call is used to read a single structure, or entity from the shapefile. 
            See the definition of the SHPObject structure for detailed information on fields of a SHPObject. 
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate().</param>
            <param name="iShape">The entity number of the shape to read. Entity numbers are between 0 
            and nEntities-1 (as returned by SHPGetInfo()).</param>
            <returns>SHPObject</returns>
            <remarks>
            SHPObject's returned from SHPReadObject() should be deallocated with SHPDestroyShape(). 
            SHPReadObject() will return NULL if an illegal iShape value is requested. 
            Note that the bounds placed into the SHPObject are those read from the file, and may not be correct. 
            For points the bounds are generated from the single point since bounds aren't normally provided 
            for point types. Generally the shapes returned will be of the type of the file as a whole. 
            However, any file may also contain type ShapeType.NullShape shapes which will have no geometry. 
            Generally speaking applications should skip rather than preserve them, as they usually 
            represented interactively deleted shapes.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPWriteObject(System.IntPtr,System.Int32,MapTools.ShapeLib.SHPObject)">
            <summary>
            The SHPWriteObject() call is used to write a single structure, or entity to the shapefile. 
            See the definition of the SHPObject structure for detailed information on fields of a SHPObject.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen("r+") or SHPCreate().</param>
            <param name="iShape">The entity number of the shape to write. 
            A value of -1 should be used for new shapes. </param>
            <param name="psObject">The shape to write to the file. This should have been created with SHPCreateObject(), 
            or SHPCreateSimpleObject().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPDestroyObject(MapTools.ShapeLib.SHPObject)">
            <summary>
            This function should be used to deallocate the resources associated with a SHPObject 
            when it is no longer needed, including those created with SHPCreateSimpleObject(), 
            SHPCreateObject() and returned from SHPReadObject().
            </summary>
            <param name="psObject">The object to deallocate.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPComputeExtents(MapTools.ShapeLib.SHPObject)">
            <summary>
            This function will recompute the extents of this shape, replacing the existing values 
            of the dfXMin, dfYMin, dfZMin, dfMMin, dfXMax, dfYMax, dfZMax, and dfMMax values based 
            on the current set of vertices for the shape. This function is automatically called by 
            SHPCreateObject() but if the vertices of an existing object are altered it should be 
            called again to fix up the extents.
            </summary>
            <param name="psObject">An existing shape object to be updated in place.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateObject(MapTools.ShapeLib.ShapeType,System.Int32,System.Int32,System.Int32[],MapTools.ShapeLib.PartType[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            The SHPCreateObject() function allows for the creation of objects (shapes). 
            This is normally used so that the SHPObject can be passed to SHPWriteObject() 
            to write it to the file.
            </summary>
            <param name="shpType">The ShapeType of the object to be created, such as ShapeType.Point, or ShapeType.Polygon.</param>
            <param name="nShapeId">The shapeid to be recorded with this shape.</param>
            <param name="nParts">The number of parts for this object. If this is zero for PolyLine, 
            or Polygon type objects, a single zero valued part will be created internally.</param>
            <param name="panPartStart">The list of zero based start vertices for the rings 
            (parts) in this object. The first should always be zero. This may be NULL if nParts is 0.</param>
            <param name="paPartType">The type of each of the parts. This is only meaningful for MultiPatch files. 
            For all other cases this may be NULL, and will be assumed to be PartType.Ring.</param>
            <param name="nVertices">The number of vertices being passed in padfX, padfY, and padfZ. </param>
            <param name="adfX">An array of nVertices X coordinates of the vertices for this object.</param>
            <param name="adfY">An array of nVertices Y coordinates of the vertices for this object.</param>
            <param name="adfZ">An array of nVertices Z coordinates of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <param name="adfM">An array of nVertices M (measure values) of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <returns>SHPObject</returns>
            <remarks>
            The SHPDestroyObject() function should be used to free 
            resources associated with an object allocated with SHPCreateObject(). This function 
            computes a bounding box for the SHPObject from the given vertices.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateSimpleObject(MapTools.ShapeLib.ShapeType,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            The SHPCreateSimpleObject() function allows for the convenient creation of simple objects. 
            This is normally used so that the SHPObject can be passed to SHPWriteObject() to write it 
            to the file. The simple object creation API assumes an M (measure) value of zero for each vertex. 
            For complex objects (such as polygons) it is assumed that there is only one part, and that it 
            is of the default type (PartType.Ring). Use the SHPCreateObject() function for more sophisticated 
            objects. 
            </summary>
            <param name="shpType">The ShapeType of the object to be created, such as ShapeType.Point, or ShapeType.Polygon.</param>
            <param name="nVertices">The number of vertices being passed in padfX, padfY, and padfZ.</param>
            <param name="adfX">An array of nVertices X coordinates of the vertices for this object.</param>
            <param name="adfY">An array of nVertices Y coordinates of the vertices for this object.</param>
            <param name="adfZ">An array of nVertices Z coordinates of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <returns>SHPObject</returns>
            <remarks>
            The SHPDestroyObject() function should be used to free resources associated with an 
            object allocated with SHPCreateSimpleObject().
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPClose(System.IntPtr)">
            <summary>
            The SHPClose() function will close the .shp and .shx files, and flush all outstanding header 
            information to the files. It will also recover resources associated with the handle. 
            After this call the hSHP handle cannot be used again.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate().</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTypeName(MapTools.ShapeLib.ShapeType)">
            <summary>
            Translates a ShapeType.* constant into a named shape type (Point, PointZ, Polygon, etc.)
            </summary>
            <param name="shpType">ShapeType enum</param>
            <returns>string</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPPartTypeName(MapTools.ShapeLib.PartType)">
            <summary>
            Translates a PartType enum into a named part type (Ring, Inner Ring, etc.)
            </summary>
            <param name="partType">PartType enum</param>
            <returns>string</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateTree(System.IntPtr,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Creates a quadtree index
            </summary>
            <param name="hSHP"></param>
            <param name="nDimension"></param>
            <param name="nMaxDepth"></param>
            <param name="adfBoundsMin"></param>
            <param name="adfBoundsMax"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPDestroyTree(System.IntPtr)">
            <summary>
            Releases resources associated with quadtree
            </summary>
            <param name="hTree"></param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeAddShapeId(System.IntPtr,MapTools.ShapeLib.SHPObject)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <param name="psObject"></param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeTrimExtraNodes(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeFindLikelyShapes(System.IntPtr,System.Double[],System.Double[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <param name="adfBoundsMin"></param>
            <param name="adfBoundsMax"></param>
            <param name="pnShapeCount"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCheckBoundsOverlap(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="adfBox1Min"></param>
            <param name="adfBox1Max"></param>
            <param name="adfBox2Min"></param>
            <param name="adfBox2Max"></param>
            <param name="nDimension"></param>
            <returns>int</returns>
        </member>
        <member name="T:MapTools.ShapeLib.DBFFieldType">
            <summary>
            xBase field type enumeration
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTString">
            <summary>String data type</summary> 
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTInteger">
            <summary>Integer data type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTDouble">
            <summary>Double data type</summary> 
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTLogical">
            <summary>Logical data type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTInvalid">
            <summary>Invalid data type</summary>
        </member>
        <member name="M:MapTools.ShapeLib.DBFOpen(System.String,System.String)">
            <summary>
            The DBFOpen() function should be used to establish access to an existing xBase format table file. 
            The returned DBFHandle is passed to other access functions, and DBFClose() should be invoked 
            to recover resources, and flush changes to disk when complete. The DBFCreate() function should 
            called to create new xBase files. As a convenience, DBFOpen() can be called with the name of a 
            .shp or .shx file, and it will figure out the name of the related .dbf file.
            </summary>
            <param name="szDBFFile">The name of the xBase (.dbf) file to access.</param>
            <param name="szAccess">The fopen() style access string. At this time only "rb" (read-only binary) 
            and "rb+" (read/write binary) should be used.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFCreate(System.String)">
            <summary>
            The DBFCreate() function creates a new xBase format file with the given name, 
            and returns an access handle that can be used with other DBF functions. 
            The newly created file will have no fields, and no records. 
            Fields should be added with DBFAddField() before any records add written. 
            </summary>
            <param name="szDBFFile">The name of the xBase (.dbf) file to create.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldCount(System.IntPtr)">
            <summary>
            The DBFGetFieldCount() function returns the number of fields currently defined 
            for the indicated xBase file. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetRecordCount(System.IntPtr)">
            <summary>
            The DBFGetRecordCount() function returns the number of records that exist on the xBase 
            file currently. Note that with shape files one xBase record exists for each shape in the 
            .shp/.shx files.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFAddField(System.IntPtr,System.String,MapTools.ShapeLib.DBFFieldType,System.Int32,System.Int32)">
            <summary>
            The DBFAddField() function is used to add new fields to an existing xBase file opened with DBFOpen(), 
            or created with DBFCreate(). Note that fields can only be added to xBase files with no records, 
            though this is limitation of this API, not of the file format. Returns the field number of the 
            new field, or -1 if the addition of the field failed
            </summary>
            <param name="hDBF">The access handle for the file to be updated, as returned by DBFOpen(), 
            or DBFCreate().</param>
            <param name="szFieldName">The name of the new field. At most 11 character will be used. 
            In order to use the xBase file in some packages it may be necessary to avoid some special 
            characters in the field names such as spaces, or arithmetic operators.</param>
            <param name="eType">One of FTString, FTInteger, FTLogical, or FTDouble in order to establish the 
            type of the new field. Note that some valid xBase field types cannot be created such as date fields.</param>
            <param name="nWidth">The width of the field to be created. For FTString fields this establishes 
            the maximum length of string that can be stored. For FTInteger this establishes the number of 
            digits of the largest number that can be represented. For FTDouble fields this in combination 
            with the nDecimals value establish the size, and precision of the created field.</param>
            <param name="nDecimals">The number of decimal places to reserve for FTDouble fields. 
            For all other field types this should be zero. For instance with nWidth=7, and nDecimals=3 
            numbers would be formatted similarly to `123.456'.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldInfo(System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
            The DBFGetFieldInfo() returns the type of the requested field, which is one of the DBFFieldType 
            enumerated values. As well, the field name, and field width information can optionally be returned. 
            The field type returned does not correspond one to one with the xBase field types. 
            For instance the xBase field type for Date will just be returned as being FTInteger. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by DBFOpen(), 
            or DBFCreate().</param>
            <param name="iField">The field to be queried. This should be a number between 0 and n-1, 
            where n is the number fields on the file, as returned by DBFGetFieldCount().</param>
            <param name="szFieldName">If this pointer is not NULL the name of the requested field 
            will be written to this location. The pszFieldName buffer should be at least 12 character 
            is size in order to hold the longest possible field name of 11 characters plus a terminating 
            zero character.</param>
            <param name="pnWidth">If this pointer is not NULL, the width of the requested field will be 
            returned in the int pointed to by pnWidth. This is the width in characters. </param>
            <param name="pnDecimals">If this pointer is not NULL, the number of decimal places precision 
            defined for the field will be returned. This is zero for integer fields, or non-numeric fields.</param>
            <returns>DBFFieldType</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldIndex(System.IntPtr,System.String)">
            <summary>
            Returns the index of the field matching this name, or -1 on failure. 
            The comparison is case insensitive. However, lengths must match exactly.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned 
            by DBFOpen(), or DBFCreate().</param>
            <param name="szFieldName">Name of the field to search for.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadIntegerAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadIntegerAttribute() will read the value of one field and return it as an integer. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>int</returns>
            <remarks>
            This can be used even with FTString fields, though the returned value will be zero if not 
            interpretable as a number.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadDoubleAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadDoubleAttribute() will read the value of one field and return it as a double. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>double</returns>
            <remarks>
            This can be used even with FTString fields, though the returned value will be zero if not 
            interpretable as a number.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadStringAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadStringAttribute() will read the value of one field and return it as a string. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>string</returns>
            <remarks>
            This function may be used on any field type (including FTInteger and FTDouble) and will 
            return the string representation stored in the .dbf file. The returned pointer is to an 
            internal buffer which is only valid untill the next DBF function call. It's contents may 
            be copied with normal string functions such as strcpy(), or strdup(). If the 
            TRIM_DBF_WHITESPACE macro is defined in shapefil.h (it is by default) then all leading and 
            trailing space (ASCII 32) characters will be stripped before the string is returned.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadLogicalAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadLogicalAttribute() will read the value of one field and return it as a boolean. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>bool</returns>
            <remarks>
            This can be used with FTString fields, in which case it returns TRUE if the string="T";
            otherwise it returns FALSE.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFIsAttributeNULL(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            This function will return TRUE if the indicated field is NULL valued otherwise FALSE. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>int</returns>
            <remarks>
            Note that NULL fields are represented in the .dbf file as having all spaces in the field. 
            Reading NULL fields will result in a value of 0.0 or an empty string with the other 
            DBFRead*Attribute() functions.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteIntegerAttribute(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The DBFWriteIntegerAttribute() function is used to write a value to a numeric field 
            (FTInteger, or FTDouble). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned. If the value is too large to fit in the field, 
            it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="nFieldValue">The integer value that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteDoubleAttribute(System.IntPtr,System.Int32,System.Int32,System.Double)">
            <summary>
            The DBFWriteDoubleAttribute() function is used to write a value to a numeric field 
            (FTInteger, or FTDouble). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned. If the value is too large to fit in the field, 
            it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="dFieldValue">The floating point value that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteStringAttribute(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            The DBFWriteStringAttribute() function is used to write a value to a string field (FString). 
            If the write succeeds the value TRUE willbe returned, otherwise FALSE will be returned. 
            If the value is too large to fit in the field, it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="szFieldValue">The string to be written to the field.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteNULLAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFWriteNULLAttribute() function is used to clear the indicated field to a NULL value. 
            In the .dbf file this is represented by setting the entire field to spaces. If the write 
            succeeds the value TRUE will be returned, otherwise FALSE will be returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteLogicalAttribute(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The DBFWriteLogicalAttribute() function is used to write a boolean value to a logical field 
            (FTLogical). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="bFieldValue">The boolean value to be written to the field.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadTuple(System.IntPtr,System.Int32)">
            <summary>
            Reads the attribute fields of a record.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="hEntity">The entity (record) number to be read</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteTuple(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes an attribute record to the file.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="hEntity">The zero-based entity (record) number to be written.  If hEntity equals 
            the number of records a new record is appended.</param>
            <param name="pRawTuple">Pointer to the tuple to be written</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFCloneEmpty(System.IntPtr,System.String)">
            <summary>
            Copies the data structure of an xBase file to another xBase file.  
            Data are not copied.  Use Read/WriteTuple functions to selectively copy data.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="szFilename">The name of the xBase (.dbf) file to create.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFClose(System.IntPtr)">
            <summary>
            The DBFClose() function will close the indicated xBase file (opened with DBFOpen(), 
            or DBFCreate()), flushing out all information to the file on disk, and recovering 
            any resources associated with having the file open. The file handle (hDBF) should not 
            be used again with the DBF API after calling DBFClose().
            </summary>
            <param name="hDBF">The access handle for the file to be closed.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetNativeFieldType(System.IntPtr,System.Int32)">
            <summary>
            This function returns the DBF type code of the indicated field.
            </summary>
            <param name="hDBF">The access handle for the file.</param>
            <param name="iField">The field index to query.</param>
            <returns>sbyte</returns>
            <remarks>
            Return value will be one of:
            <list type="bullet">
            <item><term>C</term><description>String</description></item>
            <item><term>D</term><description>Date</description></item>
            <item><term>F</term><description>Float</description></item>
            <item><term>N</term><description>Numeric, with or without decimal</description></item>
            <item><term>L</term><description>Logical</description></item>
            <item><term>M</term><description>Memo: 10 digits .DBT block ptr</description></item>
            <item><term> </term><description>field out of range</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.#ctor">
            <summary>
            private constructor:  no instantiation needed or permitted
            </summary>
        </member>
        <member name="F:OgrVectorImporter.NoDataForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgrVectorImporter.NoDataForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgrVectorImporter.NoDataForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OgrVectorImporter.VectorInfoSelector">
            <summary>
            Form to display a list of key fields from the dbf
            </summary>
        </member>
        <member name="F:OgrVectorImporter.VectorInfoSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgrVectorImporter.VectorInfoSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgrVectorImporter.VectorInfoSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:OgrVectorImporter.TextFilterDialog.FilterString">
            <summary>
            Gets string for filter
            </summary>
        </member>
        <member name="P:OgrVectorImporter.TextFilterDialog.FilterType">
            <summary>
            Gets type of filtering to perform
            </summary>
        </member>
        <member name="F:OgrVectorImporter.TextFilterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:OgrVectorImporter.TextFilterDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:OgrVectorImporter.TextFilterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:OgrVectorImporter.WaitMessage">
            <summary>
            渲染消息
            </summary>
        </member>
        <member name="M:OgrVectorImporter.WaitMessage.Update(WorldWind.DrawArgs)">
            <summary>
            RenderableObject abstract member (needed)
            OBS: Worker thread (don't update UI directly from this thread)
            </summary>
        </member>
        <member name="T:GeometryUtility.NonValidReturnException">
            <summary>
            异常总结
            </summary>
        </member>
        <member name="T:GeometryUtility.CLine">
             <summary>
            To define a line in the given coordinate system
            and related calculations
            Line Equation:ax+by+c=0
            </summary>
        </member>
        <member name="T:GeometryUtility.CPoint2D">
            <summary>
            Summary description for CPoint2D.
            </summary>
        </member>
        <member name="T:GeometryUtility.CPolygon">
            <summary>
            Summary description for CPolygon.
            </summary>
        </member>
        <member name="T:GeometryUtility.ConstantValue">
             <summary>
            To define the common types used in 
            Analytical Geometry calculations.
             </summary>
        </member>
        <member name="T:PolygonCuttingEar.CPolygonShape">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
    </members>
</doc>
