//
// Type_DisplayFont.cs.cs
//
// This file was generated by XMLSpy 2005 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace LayerSet
{
	public class Type_DisplayFont : Altova.Xml.Node
	{
		#region Forward constructors
		public Type_DisplayFont() : base() { SetCollectionParents(); }
		public Type_DisplayFont(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Type_DisplayFont(XmlNode node) : base(node) { SetCollectionParents(); }
		public Type_DisplayFont(Altova.Xml.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "Family"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Family", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "Size"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Size", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			for (int i = 0; i < DomChildCount(NodeType.Element, "", "Style"); i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Style", i);
				InternalAdjustPrefix(DOMNode, true);
				new StyleType(DOMNode).AdjustPrefix();
			}
		}


		#region Family accessor methods
		public int GetFamilyMinCount()
		{
			return 1;
		}

		public int FamilyMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFamilyMaxCount()
		{
			return 1;
		}

		public int FamilyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFamilyCount()
		{
			return DomChildCount(NodeType.Element, "", "Family");
		}

		public int FamilyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Family");
			}
		}

		public bool HasFamily()
		{
			return HasDomChild(NodeType.Element, "", "Family");
		}

		public SchemaString GetFamilyAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Family", index)));
		}

		public XmlNode GetStartingFamilyCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Family" );
		}

		public XmlNode GetAdvancedFamilyCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Family", curNode );
		}

		public SchemaString GetFamilyValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaString( curNode.InnerText );
		}


		public SchemaString GetFamily()
		{
			return GetFamilyAt(0);
		}

		public SchemaString Family
		{
			get
			{
				return GetFamilyAt(0);
			}
		}

		public void RemoveFamilyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Family", index);
		}

		public void RemoveFamily()
		{
			while (HasFamily())
				RemoveFamilyAt(0);
		}

		public void AddFamily(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "Family", newValue.ToString());
		}

		public void InsertFamilyAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Family", index, newValue.ToString());
		}

		public void ReplaceFamilyAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Family", index, newValue.ToString());
		}
		#endregion // Family accessor methods

		#region Family collection
        public FamilyCollection	MyFamilys = new FamilyCollection( );

        public class FamilyCollection: IEnumerable
        {
            Type_DisplayFont parent;
            public Type_DisplayFont Parent
			{
				set
				{
					parent = value;
				}
			}
			public FamilyEnumerator GetEnumerator() 
			{
				return new FamilyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class FamilyEnumerator: IEnumerator 
        {
			int nIndex;
			Type_DisplayFont parent;
			public FamilyEnumerator(Type_DisplayFont par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.FamilyCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetFamilyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Family collection

		#region Size accessor methods
		public int GetSizeMinCount()
		{
			return 1;
		}

		public int SizeMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSizeMaxCount()
		{
			return 1;
		}

		public int SizeMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetSizeCount()
		{
			return DomChildCount(NodeType.Element, "", "Size");
		}

		public int SizeCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Size");
			}
		}

		public bool HasSize()
		{
			return HasDomChild(NodeType.Element, "", "Size");
		}

		public SchemaDecimal GetSizeAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Size", index)));
		}

		public XmlNode GetStartingSizeCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Size" );
		}

		public XmlNode GetAdvancedSizeCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Size", curNode );
		}

		public SchemaDecimal GetSizeValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new SchemaDecimal( curNode.InnerText );
		}


		public SchemaDecimal GetSize()
		{
			return GetSizeAt(0);
		}

		public SchemaDecimal Size
		{
			get
			{
				return GetSizeAt(0);
			}
		}

		public void RemoveSizeAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Size", index);
		}

		public void RemoveSize()
		{
			while (HasSize())
				RemoveSizeAt(0);
		}

		public void AddSize(SchemaDecimal newValue)
		{
			AppendDomChild(NodeType.Element, "", "Size", newValue.ToString());
		}

		public void InsertSizeAt(SchemaDecimal newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Size", index, newValue.ToString());
		}

		public void ReplaceSizeAt(SchemaDecimal newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Size", index, newValue.ToString());
		}
		#endregion // Size accessor methods

		#region Size collection
        public SizeCollection	MySizes = new SizeCollection( );

        public class SizeCollection: IEnumerable
        {
            Type_DisplayFont parent;
            public Type_DisplayFont Parent
			{
				set
				{
					parent = value;
				}
			}
			public SizeEnumerator GetEnumerator() 
			{
				return new SizeEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class SizeEnumerator: IEnumerator 
        {
			int nIndex;
			Type_DisplayFont parent;
			public SizeEnumerator(Type_DisplayFont par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.SizeCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(parent.GetSizeAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Size collection

		#region Style accessor methods
		public int GetStyleMinCount()
		{
			return 0;
		}

		public int StyleMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetStyleMaxCount()
		{
			return 1;
		}

		public int StyleMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetStyleCount()
		{
			return DomChildCount(NodeType.Element, "", "Style");
		}

		public int StyleCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Style");
			}
		}

		public bool HasStyle()
		{
			return HasDomChild(NodeType.Element, "", "Style");
		}

		public StyleType GetStyleAt(int index)
		{
			return new StyleType(GetDomChildAt(NodeType.Element, "", "Style", index));
		}

		public XmlNode GetStartingStyleCursor()
		{
			return GetDomFirstChild( NodeType.Element, "", "Style" );
		}

		public XmlNode GetAdvancedStyleCursor( XmlNode curNode )
		{
			return GetDomNextChild( NodeType.Element, "", "Style", curNode );
		}

		public StyleType GetStyleValueAtCursor( XmlNode curNode )
		{
			if( curNode == null )
				  throw new Altova.Xml.XmlException("Out of range");
			else
				return new StyleType( curNode );
		}


		public StyleType GetStyle()
		{
			return GetStyleAt(0);
		}

		public StyleType Style
		{
			get
			{
				return GetStyleAt(0);
			}
		}

		public void RemoveStyleAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Style", index);
		}

		public void RemoveStyle()
		{
			while (HasStyle())
				RemoveStyleAt(0);
		}

		public void AddStyle(StyleType newValue)
		{
			AppendDomElement("", "Style", newValue);
		}

		public void InsertStyleAt(StyleType newValue, int index)
		{
			InsertDomElementAt("", "Style", index, newValue);
		}

		public void ReplaceStyleAt(StyleType newValue, int index)
		{
			ReplaceDomElementAt("", "Style", index, newValue);
		}
		#endregion // Style accessor methods

		#region Style collection
        public StyleCollection	MyStyles = new StyleCollection( );

        public class StyleCollection: IEnumerable
        {
            Type_DisplayFont parent;
            public Type_DisplayFont Parent
			{
				set
				{
					parent = value;
				}
			}
			public StyleEnumerator GetEnumerator() 
			{
				return new StyleEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class StyleEnumerator: IEnumerator 
        {
			int nIndex;
			Type_DisplayFont parent;
			public StyleEnumerator(Type_DisplayFont par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.StyleCount );
			}
			public StyleType  Current 
			{
				get 
				{
					return(parent.GetStyleAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}

        #endregion // Style collection

        private void SetCollectionParents()
        {
            MyFamilys.Parent = this; 
            MySizes.Parent = this; 
            MyStyles.Parent = this; 
	}
}
}
